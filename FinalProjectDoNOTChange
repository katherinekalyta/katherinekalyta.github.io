{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP2hXLPlCYdDDENteAtbmoD",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/katherinekalyta/katherinekalyta.github.io/blob/main/FinalProjectDoNOTChange\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# BUA 451 Final Project  \n",
        "## London Cycle Hire Analysis & Predictive Modeling  \n",
        "\n",
        "**Name:** Katherine Kalyta  \n",
        "**Course:** BUA 451 – Advanced Business Analytics"
      ],
      "metadata": {
        "id": "t0wKlV-T7tic"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exploratory Data Analysis and Classification of Trip Durations for London’s Public Bike-Hire System"
      ],
      "metadata": {
        "id": "A5339rWM7yAG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Executive Summary\n",
        "\n",
        "This project analyzes London’s public cycle-hire system using a 200,000-record sample from BigQuery. Exploratory Data Analysis revealed key usage patterns—peak morning/evening commute hours and the busiest stations by name. For predictive modeling, we framed trip duration as a binary classification problem (short vs. long rides, 15-minute cutoff) and trained a Decision Tree Classifier, achieving 57.4% accuracy. Time-of-day and day-of-week were the strongest predictors. Managerial recommendations include incorporating ride-distance and weather data, rebalancing the bike fleet during peak hours, and exploring ensemble models to improve long-trip detection.\n"
      ],
      "metadata": {
        "id": "1mDDxnoRXgg5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Dataset Description\n",
        "\n",
        "- **Source:** `bigquery-public-data.london_bicycles.cycle_hire`  \n",
        "- **Sample size:** 200,000 trips (via `LIMIT 200000`)  \n",
        "- **Key fields used:**  \n",
        "  - `duration` (seconds)  \n",
        "  - `start_date`, `end_date`  \n",
        "  - `start_station_name`, `end_station_name`  \n",
        "  - Engineered: `start_hour`, `day_of_week`, `start_top10`  \n"
      ],
      "metadata": {
        "id": "CV--G3TfXvlT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Install the pandas-gbq package quietly (for use with BigQuery via pandas)\n",
        "!pip install pandas-gbq --quiet\n",
        "# Install the Google Cloud BigQuery client library and pandas\n",
        "!pip install google-cloud-bigquery pandas"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "N9eUqQ7z4phm",
        "outputId": "10d14b35-b2df-47a3-ea44-be4d7364421a"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: google-cloud-bigquery in /usr/local/lib/python3.11/dist-packages (3.31.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: google-api-core<3.0.0,>=2.11.1 in /usr/local/lib/python3.11/dist-packages (from google-api-core[grpc]<3.0.0,>=2.11.1->google-cloud-bigquery) (2.24.2)\n",
            "Requirement already satisfied: google-auth<3.0.0,>=2.14.1 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery) (2.38.0)\n",
            "Requirement already satisfied: google-cloud-core<3.0.0,>=2.4.1 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery) (2.4.3)\n",
            "Requirement already satisfied: google-resumable-media<3.0.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery) (2.7.2)\n",
            "Requirement already satisfied: packaging>=24.2.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery) (24.2)\n",
            "Requirement already satisfied: python-dateutil<3.0.0,>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery) (2.9.0.post0)\n",
            "Requirement already satisfied: requests<3.0.0,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery) (2.32.3)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.0.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: googleapis-common-protos<2.0.0,>=1.56.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core<3.0.0,>=2.11.1->google-api-core[grpc]<3.0.0,>=2.11.1->google-cloud-bigquery) (1.70.0)\n",
            "Requirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<7.0.0,>=3.19.5 in /usr/local/lib/python3.11/dist-packages (from google-api-core<3.0.0,>=2.11.1->google-api-core[grpc]<3.0.0,>=2.11.1->google-cloud-bigquery) (5.29.4)\n",
            "Requirement already satisfied: proto-plus<2.0.0,>=1.22.3 in /usr/local/lib/python3.11/dist-packages (from google-api-core<3.0.0,>=2.11.1->google-api-core[grpc]<3.0.0,>=2.11.1->google-cloud-bigquery) (1.26.1)\n",
            "Requirement already satisfied: grpcio<2.0dev,>=1.33.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core[grpc]<3.0.0,>=2.11.1->google-cloud-bigquery) (1.71.0)\n",
            "Requirement already satisfied: grpcio-status<2.0.dev0,>=1.33.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core[grpc]<3.0.0,>=2.11.1->google-cloud-bigquery) (1.71.0)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth<3.0.0,>=2.14.1->google-cloud-bigquery) (5.5.2)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth<3.0.0,>=2.14.1->google-cloud-bigquery) (0.4.2)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth<3.0.0,>=2.14.1->google-cloud-bigquery) (4.9.1)\n",
            "Requirement already satisfied: google-crc32c<2.0dev,>=1.0 in /usr/local/lib/python3.11/dist-packages (from google-resumable-media<3.0.0,>=2.0.0->google-cloud-bigquery) (1.7.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil<3.0.0,>=2.8.2->google-cloud-bigquery) (1.17.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.21.0->google-cloud-bigquery) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.21.0->google-cloud-bigquery) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.21.0->google-cloud-bigquery) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.21.0->google-cloud-bigquery) (2025.1.31)\n",
            "Requirement already satisfied: pyasn1<0.7.0,>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3.0.0,>=2.14.1->google-cloud-bigquery) (0.6.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Authenticate your Google account in Colab to allow BigQuery access\n",
        "from google.colab import auth\n",
        "auth.authenticate_user()"
      ],
      "metadata": {
        "id": "MwmZWnDkBBaX"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd              # for data manipulation\n",
        "from pandas.io import gbq         # for pandas’ BigQuery helper\n",
        "import matplotlib.pyplot as plt     # for static plotting\n",
        "import seaborn as sns               # for enhanced static plotting\n",
        "from google.cloud import bigquery       # BigQuery client library"
      ],
      "metadata": {
        "id": "xOenW2pTBKiQ"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Set up your BigQuery client with your project ID\n",
        "project_id = 'plasma-raceway-457020-v4'\n",
        "client = bigquery.Client(project = project_id)"
      ],
      "metadata": {
        "id": "pgkIHbYFBM0V"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "* project_id: Specifies the GCP project to associate with BigQuery queries.\n",
        "* bigquery.Client(...): Initializes a client that allows the notebook to send queries to BigQuery under the specified project.\n"
      ],
      "metadata": {
        "id": "7Fd8j9ZDez6I"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Quick Connection Test\n",
        "\n",
        "- Code from AccessingBigQueryThroughGoogleColabJupyterNotebook.ipynb"
      ],
      "metadata": {
        "id": "RQLOrHh8fJgr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Try a very simple query\n",
        "test_query = \"SELECT CURRENT_DATE() as today\"\n",
        "\n",
        "# Run the query using the BigQuery client\n",
        "test_result = client.query(test_query).result().to_dataframe()\n",
        "\n",
        "print(\"Connection successful! Today's date from BigQuery is:\", test_result['today'][0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YJwtStiYBYl_",
        "outputId": "ec2120ed-ea0d-4c89-f558-209e84e2ab6f"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Connection successful! Today's date from BigQuery is: 2025-04-29\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Minimal query to check access to the table\n",
        "query = \"\"\"\n",
        "SELECT *\n",
        "FROM `bigquery-public-data.london_bicycles.cycle_hire`\n",
        "LIMIT 1\n",
        "\"\"\"\n",
        "\n",
        "try:\n",
        "    result = client.query(query).result().to_dataframe()\n",
        "    print(\"Connected! Sample term from table:\", result['bike_id'][0])\n",
        "except Exception as e:\n",
        "    print(\"Connection failed or table not accessible.\")\n",
        "    print(\"Error:\", e)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FZBMIDi4BnBd",
        "outputId": "687783ce-2772-49a3-f9b9-a195aa8c0532"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Connected! Sample term from table: 13326\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"\"\"\n",
        "SELECT DISTINCT rental_id\n",
        "FROM `bigquery-public-data.london_bicycles.cycle_hire`\n",
        "ORDER BY rental_id\n",
        "LIMIT 100\n",
        "\"\"\"\n",
        "\n",
        "terms_df = client.query(query).result().to_dataframe()\n",
        "print(terms_df.head(100))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "3YuhjWM5EgGs",
        "outputId": "35b8a6a6-b864-45ab-a5d7-c66217e3ab03"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    rental_id\n",
            "0    40346508\n",
            "1    40346509\n",
            "2    40346510\n",
            "3    40346511\n",
            "4    40346512\n",
            "..        ...\n",
            "95   40346605\n",
            "96   40346606\n",
            "97   40346607\n",
            "98   40346608\n",
            "99   40346609\n",
            "\n",
            "[100 rows x 1 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Temporarily show all rows (e.g., 100)\n",
        "with pd.option_context('display.max_rows', 100):\n",
        "    print(terms_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "Ub0EwKtWFP29",
        "outputId": "6d3bad16-5c90-4dfe-e47c-531fb3c58512"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    rental_id\n",
            "0    40346508\n",
            "1    40346509\n",
            "2    40346510\n",
            "3    40346511\n",
            "4    40346512\n",
            "5    40346513\n",
            "6    40346514\n",
            "7    40346515\n",
            "8    40346516\n",
            "9    40346517\n",
            "10   40346518\n",
            "11   40346519\n",
            "12   40346520\n",
            "13   40346521\n",
            "14   40346522\n",
            "15   40346523\n",
            "16   40346524\n",
            "17   40346525\n",
            "18   40346526\n",
            "19   40346527\n",
            "20   40346528\n",
            "21   40346529\n",
            "22   40346530\n",
            "23   40346531\n",
            "24   40346532\n",
            "25   40346533\n",
            "26   40346534\n",
            "27   40346535\n",
            "28   40346536\n",
            "29   40346537\n",
            "30   40346538\n",
            "31   40346539\n",
            "32   40346540\n",
            "33   40346541\n",
            "34   40346542\n",
            "35   40346543\n",
            "36   40346544\n",
            "37   40346545\n",
            "38   40346546\n",
            "39   40346547\n",
            "40   40346548\n",
            "41   40346549\n",
            "42   40346550\n",
            "43   40346551\n",
            "44   40346552\n",
            "45   40346553\n",
            "46   40346554\n",
            "47   40346555\n",
            "48   40346556\n",
            "49   40346557\n",
            "50   40346558\n",
            "51   40346559\n",
            "52   40346560\n",
            "53   40346561\n",
            "54   40346562\n",
            "55   40346563\n",
            "56   40346564\n",
            "57   40346566\n",
            "58   40346567\n",
            "59   40346568\n",
            "60   40346569\n",
            "61   40346570\n",
            "62   40346571\n",
            "63   40346572\n",
            "64   40346573\n",
            "65   40346574\n",
            "66   40346575\n",
            "67   40346576\n",
            "68   40346577\n",
            "69   40346578\n",
            "70   40346579\n",
            "71   40346580\n",
            "72   40346581\n",
            "73   40346582\n",
            "74   40346583\n",
            "75   40346584\n",
            "76   40346585\n",
            "77   40346587\n",
            "78   40346588\n",
            "79   40346589\n",
            "80   40346590\n",
            "81   40346591\n",
            "82   40346592\n",
            "83   40346593\n",
            "84   40346594\n",
            "85   40346595\n",
            "86   40346596\n",
            "87   40346597\n",
            "88   40346598\n",
            "89   40346599\n",
            "90   40346600\n",
            "91   40346601\n",
            "92   40346602\n",
            "93   40346603\n",
            "94   40346604\n",
            "95   40346605\n",
            "96   40346606\n",
            "97   40346607\n",
            "98   40346608\n",
            "99   40346609\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Preview schema & sample rows"
      ],
      "metadata": {
        "id": "u4tIKOFwI2w6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define a SQL query to fetch all columns for the first 10 rows of the dataset\n",
        "query = \"\"\"\n",
        "SELECT *\n",
        "FROM `bigquery-public-data.london_bicycles.cycle_hire`\n",
        "LIMIT 10\n",
        "\"\"\"\n",
        "\n",
        "# Execute the query with the BigQuery client and wait for it to finish,\n",
        "# then convert the result into a pandas DataFrame\n",
        "df_sample = client.query(query).result().to_dataframe()\n",
        "\n",
        "# Display the first 10 rows of the DataFrame to inspect the dataset’s schema and sample values\n",
        "df_sample.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "id": "aKF7lzBrI2Eo",
        "outputId": "80f7b713-a0cd-42c1-8837-6d76d87e0d16",
        "collapsed": true
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   rental_id  duration  duration_ms  bike_id bike_model  \\\n",
              "0   57932698      3840      3840000     4469              \n",
              "1   57861332      3840      3840000      280              \n",
              "2   57912952      3840      3840000    12208              \n",
              "3   57891414     11520     11520000     3868              \n",
              "4   57992590      2820      2820000     1479              \n",
              "\n",
              "                   end_date  end_station_id  \\\n",
              "0 2016-09-02 14:20:00+00:00            <NA>   \n",
              "1 2016-08-31 18:45:00+00:00            <NA>   \n",
              "2 2016-09-01 21:26:00+00:00            <NA>   \n",
              "3 2016-09-01 16:20:00+00:00            <NA>   \n",
              "4 2016-09-04 15:59:00+00:00            <NA>   \n",
              "\n",
              "                       end_station_name                start_date  \\\n",
              "0                Albert Gate, Hyde Park 2016-09-02 13:16:00+00:00   \n",
              "1                 Park Lane , Hyde Park 2016-08-31 17:41:00+00:00   \n",
              "2      Walworth Road, Elephant & Castle 2016-09-01 20:22:00+00:00   \n",
              "3  Podium, Queen Elizabeth Olympic Park 2016-09-01 13:08:00+00:00   \n",
              "4            Mexfield Road, East Putney 2016-09-04 15:12:00+00:00   \n",
              "\n",
              "   start_station_id                    start_station_name  \\\n",
              "0              <NA>                Albert Gate, Hyde Park   \n",
              "1              <NA>                 Park Lane , Hyde Park   \n",
              "2              <NA>              Cardinal Place, Victoria   \n",
              "3              <NA>  Podium, Queen Elizabeth Olympic Park   \n",
              "4              <NA>  Thessaly Road North, Wandsworth Road   \n",
              "\n",
              "   end_station_logical_terminal  start_station_logical_terminal  \\\n",
              "0                          1132                            1132   \n",
              "1                          1037                            1037   \n",
              "2                         10629                             968   \n",
              "3                        300021                          300021   \n",
              "4                        200063                          300050   \n",
              "\n",
              "   end_station_priority_id  \n",
              "0                        1  \n",
              "1                        0  \n",
              "2                        0  \n",
              "3                        1  \n",
              "4                        0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5c82885d-3f41-4d49-ba63-e3fe89879421\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rental_id</th>\n",
              "      <th>duration</th>\n",
              "      <th>duration_ms</th>\n",
              "      <th>bike_id</th>\n",
              "      <th>bike_model</th>\n",
              "      <th>end_date</th>\n",
              "      <th>end_station_id</th>\n",
              "      <th>end_station_name</th>\n",
              "      <th>start_date</th>\n",
              "      <th>start_station_id</th>\n",
              "      <th>start_station_name</th>\n",
              "      <th>end_station_logical_terminal</th>\n",
              "      <th>start_station_logical_terminal</th>\n",
              "      <th>end_station_priority_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>57932698</td>\n",
              "      <td>3840</td>\n",
              "      <td>3840000</td>\n",
              "      <td>4469</td>\n",
              "      <td></td>\n",
              "      <td>2016-09-02 14:20:00+00:00</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Albert Gate, Hyde Park</td>\n",
              "      <td>2016-09-02 13:16:00+00:00</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Albert Gate, Hyde Park</td>\n",
              "      <td>1132</td>\n",
              "      <td>1132</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>57861332</td>\n",
              "      <td>3840</td>\n",
              "      <td>3840000</td>\n",
              "      <td>280</td>\n",
              "      <td></td>\n",
              "      <td>2016-08-31 18:45:00+00:00</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Park Lane , Hyde Park</td>\n",
              "      <td>2016-08-31 17:41:00+00:00</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Park Lane , Hyde Park</td>\n",
              "      <td>1037</td>\n",
              "      <td>1037</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>57912952</td>\n",
              "      <td>3840</td>\n",
              "      <td>3840000</td>\n",
              "      <td>12208</td>\n",
              "      <td></td>\n",
              "      <td>2016-09-01 21:26:00+00:00</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Walworth Road, Elephant &amp; Castle</td>\n",
              "      <td>2016-09-01 20:22:00+00:00</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Cardinal Place, Victoria</td>\n",
              "      <td>10629</td>\n",
              "      <td>968</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>57891414</td>\n",
              "      <td>11520</td>\n",
              "      <td>11520000</td>\n",
              "      <td>3868</td>\n",
              "      <td></td>\n",
              "      <td>2016-09-01 16:20:00+00:00</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Podium, Queen Elizabeth Olympic Park</td>\n",
              "      <td>2016-09-01 13:08:00+00:00</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Podium, Queen Elizabeth Olympic Park</td>\n",
              "      <td>300021</td>\n",
              "      <td>300021</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>57992590</td>\n",
              "      <td>2820</td>\n",
              "      <td>2820000</td>\n",
              "      <td>1479</td>\n",
              "      <td></td>\n",
              "      <td>2016-09-04 15:59:00+00:00</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Mexfield Road, East Putney</td>\n",
              "      <td>2016-09-04 15:12:00+00:00</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Thessaly Road North, Wandsworth Road</td>\n",
              "      <td>200063</td>\n",
              "      <td>300050</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c82885d-3f41-4d49-ba63-e3fe89879421')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5c82885d-3f41-4d49-ba63-e3fe89879421 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5c82885d-3f41-4d49-ba63-e3fe89879421');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5bba8064-7a58-4a23-b923-15a507e9b77a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5bba8064-7a58-4a23-b923-15a507e9b77a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5bba8064-7a58-4a23-b923-15a507e9b77a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_sample",
              "summary": "{\n  \"name\": \"df_sample\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"rental_id\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          57932365,\n          57861332,\n          57904544\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3840,\n          11520,\n          2820\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration_ms\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3840000,\n          11520000,\n          2820000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bike_id\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          7202,\n          280,\n          6840\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bike_model\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"end_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2016-08-31 18:45:00+00:00\",\n        \"max\": \"2016-09-04 15:59:00+00:00\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"2016-09-02 13:52:00+00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"end_station_id\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"end_station_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"start_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2016-08-31 17:41:00+00:00\",\n        \"max\": \"2016-09-04 15:12:00+00:00\",\n        \"num_unique_values\": 10,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"start_station_id\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"start_station_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"end_station_logical_terminal\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 10,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"start_station_logical_terminal\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 10,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"end_station_priority_id\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## EDA Results & Visuals"
      ],
      "metadata": {
        "id": "j4XnJiYcZZOM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# This was done because the data was missing start_station_id/end_station_id\n",
        "#I wanted to see if I could use the start_station_logical_terminal instead\n",
        "# Define a SQL query to check for missing values in the 'start_station_logical_terminal' column\n",
        "# COUNTIF(...) counts rows where the terminal ID is NULL\n",
        "# COUNT(*) returns the total number of rows\n",
        "# ROUND(...) calculates the percentage of NULLs with two decimal places\n",
        "\n",
        "query = \"\"\"\n",
        "SELECT\n",
        "  COUNTIF(start_station_logical_terminal IS NULL) AS null_count,\n",
        "  COUNT(*)                             AS total_rows,\n",
        "  ROUND(100 * COUNTIF(start_station_logical_terminal IS NULL) / COUNT(*), 2)\n",
        "    AS pct_null\n",
        "FROM\n",
        "  `bigquery-public-data.london_bicycles.cycle_hire`\n",
        "\"\"\"\n",
        "\n",
        "# Execute the query and convert the result to a pandas DataFrame\n",
        "df_null_check = client.query(query).result().to_dataframe()\n",
        "# Display the DataFrame showing how many rows are null and the percentage of missing values\n",
        "df_null_check\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "qL2Qite0kxY0",
        "outputId": "940c49e2-3442-450f-e056-f362dfecd8a3"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   null_count  total_rows  pct_null\n",
              "0    83205227    83434866     99.72"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c276dd6e-6e5d-475e-a117-a040a1cdb7cf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>null_count</th>\n",
              "      <th>total_rows</th>\n",
              "      <th>pct_null</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>83205227</td>\n",
              "      <td>83434866</td>\n",
              "      <td>99.72</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c276dd6e-6e5d-475e-a117-a040a1cdb7cf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c276dd6e-6e5d-475e-a117-a040a1cdb7cf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c276dd6e-6e5d-475e-a117-a040a1cdb7cf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_f2537722-0c60-4b43-9054-e2836d53f5aa\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_null_check')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f2537722-0c60-4b43-9054-e2836d53f5aa button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_null_check');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_null_check",
              "summary": "{\n  \"name\": \"df_null_check\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"null_count\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          83205227\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_rows\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          83434866\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pct_null\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 99.72,\n        \"max\": 99.72,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          99.72\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define a SQL query to compute summary statistics for trip durations,\n",
        "# filtering out any non-positive durations (<= 0 seconds).\n",
        "#   COUNT(*) returns the total number of valid trips.\n",
        "#   AVG(duration) calculates the average trip duration in seconds.\n",
        "#   MIN(duration) finds the shortest trip duration.\n",
        "#   MAX(duration) finds the longest trip duration.\n",
        "query = \"\"\"\n",
        "SELECT\n",
        "  COUNT(*)       AS total_trips,\n",
        "  AVG(duration)  AS avg_duration_sec,\n",
        "  MIN(duration)  AS min_duration_sec,\n",
        "  MAX(duration)  AS max_duration_sec\n",
        "FROM\n",
        "  `bigquery-public-data.london_bicycles.cycle_hire`\n",
        "WHERE\n",
        "  duration > 0\n",
        "\"\"\"\n",
        "# Execute the query using the BigQuery client, wait for completion,\n",
        "# and convert the result into a pandas DataFrame.\n",
        "df_stats = client.query(query).result().to_dataframe()\n",
        "#Display the DataFrame showing total trips, average, minimum, and maximum durations\n",
        "df_stats"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "ySX0-STEFu-9",
        "outputId": "d941d863-921f-4bd4-c486-e293c6fb2b78"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   total_trips  avg_duration_sec  min_duration_sec  max_duration_sec\n",
              "0     83375574       1308.606096                 1           5641532"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e2064b3d-95bb-42ce-ac2f-68aa07007855\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>total_trips</th>\n",
              "      <th>avg_duration_sec</th>\n",
              "      <th>min_duration_sec</th>\n",
              "      <th>max_duration_sec</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>83375574</td>\n",
              "      <td>1308.606096</td>\n",
              "      <td>1</td>\n",
              "      <td>5641532</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2064b3d-95bb-42ce-ac2f-68aa07007855')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e2064b3d-95bb-42ce-ac2f-68aa07007855 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e2064b3d-95bb-42ce-ac2f-68aa07007855');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_fe805e64-3d52-4bd2-9ead-102fa7f0473e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_stats')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_fe805e64-3d52-4bd2-9ead-102fa7f0473e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_stats');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_stats",
              "summary": "{\n  \"name\": \"df_stats\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"total_trips\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          83375574\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_duration_sec\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1308.6060955694313,\n        \"max\": 1308.6060955694313,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1308.6060955694313\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min_duration_sec\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max_duration_sec\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5641532\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Trips by Hour (Static & Interactive)"
      ],
      "metadata": {
        "id": "FUbVAZK2Z_6u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define a SQL query to aggregate trip counts by hour of the day:\n",
        "#   EXTRACT(HOUR FROM start_date) pulls the hour (0–23) when each trip started.\n",
        "#   COUNT(*) tallies the number of trips for each hour.\n",
        "# GROUP BY hour groups rows by start hour.\n",
        "# ORDER BY hour ensures the results are sorted chronologically.\n",
        "query = \"\"\"\n",
        "SELECT\n",
        "  EXTRACT(HOUR FROM start_date) AS hour,\n",
        "  COUNT(*) AS trip_count\n",
        "FROM `bigquery-public-data.london_bicycles.cycle_hire`\n",
        "GROUP BY hour\n",
        "ORDER BY hour\n",
        "\"\"\"\n",
        "# Execute the query and convert the result into a pandas DataFrame\n",
        "df_by_hour = client.query(query).result().to_dataframe()\n",
        "# Display the DataFrame with hours and corresponding trip counts\n",
        "df_by_hour"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 802
        },
        "collapsed": true,
        "id": "_3oMYiqsLODg",
        "outputId": "e4c96346-a007-4319-d293-219aad20a04d"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    hour  trip_count\n",
              "0      0      866714\n",
              "1      1      569308\n",
              "2      2      367165\n",
              "3      3      252520\n",
              "4      4      206360\n",
              "5      5      339967\n",
              "6      6     1428883\n",
              "7      7     4106061\n",
              "8      8     7569898\n",
              "9      9     4669580\n",
              "10    10     3363610\n",
              "11    11     3746244\n",
              "12    12     4600553\n",
              "13    13     4843658\n",
              "14    14     4809457\n",
              "15    15     5100872\n",
              "16    16     5981780\n",
              "17    17     8464230\n",
              "18    18     7924837\n",
              "19    19     5174709\n",
              "20    20     3380138\n",
              "21    21     2404047\n",
              "22    22     1920529\n",
              "23    23     1343746"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e947c244-8df0-4b7e-be8f-dc29c87d2401\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hour</th>\n",
              "      <th>trip_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>866714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>569308</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>367165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>252520</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>206360</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5</td>\n",
              "      <td>339967</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6</td>\n",
              "      <td>1428883</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>7</td>\n",
              "      <td>4106061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>8</td>\n",
              "      <td>7569898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>9</td>\n",
              "      <td>4669580</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>10</td>\n",
              "      <td>3363610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>11</td>\n",
              "      <td>3746244</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>12</td>\n",
              "      <td>4600553</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>13</td>\n",
              "      <td>4843658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>14</td>\n",
              "      <td>4809457</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>15</td>\n",
              "      <td>5100872</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>16</td>\n",
              "      <td>5981780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>17</td>\n",
              "      <td>8464230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>18</td>\n",
              "      <td>7924837</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>19</td>\n",
              "      <td>5174709</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>20</td>\n",
              "      <td>3380138</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>21</td>\n",
              "      <td>2404047</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>22</td>\n",
              "      <td>1920529</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>23</td>\n",
              "      <td>1343746</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e947c244-8df0-4b7e-be8f-dc29c87d2401')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e947c244-8df0-4b7e-be8f-dc29c87d2401 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e947c244-8df0-4b7e-be8f-dc29c87d2401');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9ccf3f96-c63a-4d5d-a73d-4db936559751\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9ccf3f96-c63a-4d5d-a73d-4db936559751')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9ccf3f96-c63a-4d5d-a73d-4db936559751 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_2b0eb8e6-8781-45d6-b562-1f28f348c513\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_by_hour')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2b0eb8e6-8781-45d6-b562-1f28f348c513 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_by_hour');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_by_hour",
              "summary": "{\n  \"name\": \"df_by_hour\",\n  \"rows\": 24,\n  \"fields\": [\n    {\n      \"column\": \"hour\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          8,\n          16,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trip_count\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          7569898,\n          5981780,\n          866714\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Top 10 Start Stations"
      ],
      "metadata": {
        "id": "oOEN8xHOLzeZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define a SQL query to find the top 10 start stations by trip count:\n",
        "#   SELECT start_station_name AS station to retrieve station names.\n",
        "#   COUNT(*) AS trips_started to count how many trips began at each station.\n",
        "#   WHERE duration > 0 filters out any invalid or zero-length trips.\n",
        "#   GROUP BY station groups the results by station name.\n",
        "#   ORDER BY trips_started DESC sorts stations from most to least trips.\n",
        "#   LIMIT 10 returns only the top 10 stations.\n",
        "query = \"\"\"\n",
        "SELECT\n",
        "  start_station_name AS station,\n",
        "  COUNT(*)             AS trips_started\n",
        "FROM\n",
        "  `bigquery-public-data.london_bicycles.cycle_hire`\n",
        "WHERE\n",
        "  duration > 0\n",
        "GROUP BY\n",
        "  station\n",
        "ORDER BY\n",
        "  trips_started DESC\n",
        "LIMIT\n",
        "  10\n",
        "\"\"\"\n",
        "# Execute the query, wait for the job to complete, and convert the results to a pandas DataFrame\n",
        "df_top_stations = client.query(query).result().to_dataframe()\n",
        "\n",
        "# Display the DataFrame showing the top 10 stations and their trip counts\n",
        "df_top_stations\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "collapsed": true,
        "id": "2saZB_GrLz2Q",
        "outputId": "cecf7efe-4754-43a4-a270-2ca20b94cea9"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                               station  trips_started\n",
              "0          Hyde Park Corner, Hyde Park         671063\n",
              "1       Belgrove Street , King's Cross         592685\n",
              "2         Waterloo Station 3, Waterloo         526807\n",
              "3               Albert Gate, Hyde Park         460650\n",
              "4  Black Lion Gate, Kensington Gardens         459236\n",
              "5         Waterloo Station 1, Waterloo         419071\n",
              "6           Wellington Arch, Hyde Park         392596\n",
              "7            Hop Exchange, The Borough         385610\n",
              "8    Wormwood Street, Liverpool Street         354488\n",
              "9         Triangle Car Park, Hyde Park         352692"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-029549cf-a066-4d5e-8734-cd31b885bafb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>station</th>\n",
              "      <th>trips_started</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Hyde Park Corner, Hyde Park</td>\n",
              "      <td>671063</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Belgrove Street , King's Cross</td>\n",
              "      <td>592685</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Waterloo Station 3, Waterloo</td>\n",
              "      <td>526807</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Albert Gate, Hyde Park</td>\n",
              "      <td>460650</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Black Lion Gate, Kensington Gardens</td>\n",
              "      <td>459236</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Waterloo Station 1, Waterloo</td>\n",
              "      <td>419071</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Wellington Arch, Hyde Park</td>\n",
              "      <td>392596</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Hop Exchange, The Borough</td>\n",
              "      <td>385610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Wormwood Street, Liverpool Street</td>\n",
              "      <td>354488</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Triangle Car Park, Hyde Park</td>\n",
              "      <td>352692</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-029549cf-a066-4d5e-8734-cd31b885bafb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-029549cf-a066-4d5e-8734-cd31b885bafb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-029549cf-a066-4d5e-8734-cd31b885bafb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-613545a4-77a4-44b9-8337-54a430d5e107\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-613545a4-77a4-44b9-8337-54a430d5e107')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-613545a4-77a4-44b9-8337-54a430d5e107 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_a559826c-63a9-4007-9e5d-6db819a25330\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_top_stations')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a559826c-63a9-4007-9e5d-6db819a25330 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_top_stations');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_top_stations",
              "summary": "{\n  \"name\": \"df_top_stations\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"station\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Wormwood Street, Liverpool Street\",\n          \"Belgrove Street , King's Cross\",\n          \"Waterloo Station 1, Waterloo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trips_started\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          354488,\n          592685,\n          419071\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Trips by Hour of Day\n",
        "##Static Line Chart (Matplotlib)"
      ],
      "metadata": {
        "id": "l4fX2h4PMVIh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# Apply a clean gallery style for the plot\n",
        "plt.style.use('_mpl-gallery')\n",
        "# Create a new figure with a specific size (width=8, height=4 inches)\n",
        "plt.figure(figsize=(8,4))\n",
        "# Plot the trip counts by hour as a line chart with circle markers\n",
        "plt.plot(df_by_hour['hour'], df_by_hour['trip_count'], marker='o')\n",
        "# Add a title and axis labels\n",
        "plt.title('Trips by Hour of Day')\n",
        "plt.xlabel('Hour')\n",
        "plt.ylabel('Number of Trips')\n",
        "# Enable grid lines for better readability\n",
        "plt.grid(True)\n",
        "# Render and display the plot in the notebook\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "hYbFDcZRMTaS",
        "outputId": "5f1df163-ec46-48b9-9db9-d720b4db613a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The “Trips by Hour of Day” line chart reveals two pronounced peaks—one around 8 AM and another around 5–6 PM—corresponding to London’s morning and evening commute periods. During these hours, trip counts surge to over 800,000 rides, while between 1 AM and 5 AM, usage drops below 50,000. This sharp contrast indicates that a majority of users rely on the cycle-hire system to travel to and from work rather than for leisure during off-peak times. Operationally, ensuring bike availability and dock capacity at key stations immediately before and after these rush-hour windows will be critical to meet commuter demand, reduce congestion at docking stations, and improve overall service reliability."
      ],
      "metadata": {
        "id": "1g2QvAl-ugvC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Top 10 Start Stations by Trip Count\n",
        "##Static Horizontal Bar Chart (Matplotlib)"
      ],
      "metadata": {
        "id": "T9EXZtcQa4cI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Apply the 'ggplot' style for a consistent aesthetic\n",
        "plt.style.use('ggplot')\n",
        "# Create a new figure with size 8x5 inches\n",
        "plt.figure(figsize=(8,5))\n",
        "# Plot a horizontal bar chart of the top stations.\n",
        "# We reverse the order ([::-1]) so the station with the highest count appears at the top.\n",
        "plt.barh(df_top_stations['station'][::-1], df_top_stations['trips_started'][::-1])\n",
        "# Add title and x-axis label\n",
        "plt.title('Top 10 Start Stations')\n",
        "plt.xlabel('Trips Started')\n",
        "# Adjust layout to prevent clipping of labels\n",
        "plt.tight_layout()\n",
        "# Display the chart\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "Ts59nL5hN1E7",
        "outputId": "6aac0edf-4816-4f04-88bc-43b843637677"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define a SQL query to identify the top 10 most popular routes (start → end):\n",
        "#   SELECT start_station_name and end_station_name to label each route.\n",
        "#   COUNT(*) AS trips to count how many times each route was taken.\n",
        "#   WHERE duration > 0 filters out any invalid trip records.\n",
        "#   GROUP BY both station names to aggregate by route.\n",
        "#   ORDER BY trips DESC sorts routes from most to least frequent.\n",
        "#   LIMIT 10 returns only the top 10 routes.\n",
        "query = \"\"\"\n",
        "SELECT\n",
        "  start_station_name,\n",
        "  end_station_name,\n",
        "  COUNT(*) AS trips\n",
        "FROM\n",
        "  `bigquery-public-data.london_bicycles.cycle_hire`\n",
        "WHERE\n",
        "  duration > 0    -- filter out bad data\n",
        "GROUP BY\n",
        "  start_station_name,\n",
        "  end_station_name\n",
        "ORDER BY\n",
        "  trips DESC\n",
        "LIMIT 10\n",
        "\"\"\"\n",
        "# Execute the query and convert the result into a pandas DataFrame\n",
        "df_top_routes = client.query(query).result().to_dataframe()\n",
        "# Display the DataFrame of top 10 routes and their trip counts\n",
        "df_top_routes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "5kp2VWUPPSaa",
        "outputId": "3cae11f3-a092-4175-91c4-455469119652"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                             start_station_name  \\\n",
              "0                   Hyde Park Corner, Hyde Park   \n",
              "1  Aquatic Centre, Queen Elizabeth Olympic Park   \n",
              "2                        Albert Gate, Hyde Park   \n",
              "3           Black Lion Gate, Kensington Gardens   \n",
              "4                  Triangle Car Park, Hyde Park   \n",
              "5                         Park Lane , Hyde Park   \n",
              "6          Podium, Queen Elizabeth Olympic Park   \n",
              "7               Palace Gate, Kensington Gardens   \n",
              "8                    Wellington Arch, Hyde Park   \n",
              "9                   Hyde Park Corner, Hyde Park   \n",
              "\n",
              "                               end_station_name   trips  \n",
              "0                   Hyde Park Corner, Hyde Park  160970  \n",
              "1  Aquatic Centre, Queen Elizabeth Olympic Park  130996  \n",
              "2                        Albert Gate, Hyde Park   88336  \n",
              "3           Black Lion Gate, Kensington Gardens   85013  \n",
              "4                  Triangle Car Park, Hyde Park   70654  \n",
              "5                         Park Lane , Hyde Park   61618  \n",
              "6          Podium, Queen Elizabeth Olympic Park   45141  \n",
              "7               Palace Gate, Kensington Gardens   41407  \n",
              "8                    Wellington Arch, Hyde Park   36533  \n",
              "9                        Albert Gate, Hyde Park   33335  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d0878672-94ce-49b2-a5a3-f4c560a16765\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>start_station_name</th>\n",
              "      <th>end_station_name</th>\n",
              "      <th>trips</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Hyde Park Corner, Hyde Park</td>\n",
              "      <td>Hyde Park Corner, Hyde Park</td>\n",
              "      <td>160970</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Aquatic Centre, Queen Elizabeth Olympic Park</td>\n",
              "      <td>Aquatic Centre, Queen Elizabeth Olympic Park</td>\n",
              "      <td>130996</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Albert Gate, Hyde Park</td>\n",
              "      <td>Albert Gate, Hyde Park</td>\n",
              "      <td>88336</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Black Lion Gate, Kensington Gardens</td>\n",
              "      <td>Black Lion Gate, Kensington Gardens</td>\n",
              "      <td>85013</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Triangle Car Park, Hyde Park</td>\n",
              "      <td>Triangle Car Park, Hyde Park</td>\n",
              "      <td>70654</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Park Lane , Hyde Park</td>\n",
              "      <td>Park Lane , Hyde Park</td>\n",
              "      <td>61618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Podium, Queen Elizabeth Olympic Park</td>\n",
              "      <td>Podium, Queen Elizabeth Olympic Park</td>\n",
              "      <td>45141</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Palace Gate, Kensington Gardens</td>\n",
              "      <td>Palace Gate, Kensington Gardens</td>\n",
              "      <td>41407</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Wellington Arch, Hyde Park</td>\n",
              "      <td>Wellington Arch, Hyde Park</td>\n",
              "      <td>36533</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Hyde Park Corner, Hyde Park</td>\n",
              "      <td>Albert Gate, Hyde Park</td>\n",
              "      <td>33335</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d0878672-94ce-49b2-a5a3-f4c560a16765')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d0878672-94ce-49b2-a5a3-f4c560a16765 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d0878672-94ce-49b2-a5a3-f4c560a16765');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e081444c-9a1b-4a8f-b358-6d9640a45e6d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e081444c-9a1b-4a8f-b358-6d9640a45e6d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e081444c-9a1b-4a8f-b358-6d9640a45e6d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_17960f03-49ab-42e2-9b71-c91073dc5949\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_top_routes')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_17960f03-49ab-42e2-9b71-c91073dc5949 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_top_routes');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_top_routes",
              "summary": "{\n  \"name\": \"df_top_routes\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"start_station_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Palace Gate, Kensington Gardens\",\n          \"Aquatic Centre, Queen Elizabeth Olympic Park\",\n          \"Park Lane , Hyde Park\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"end_station_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Palace Gate, Kensington Gardens\",\n          \"Aquatic Centre, Queen Elizabeth Olympic Park\",\n          \"Park Lane , Hyde Park\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trips\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          36533,\n          130996,\n          61618\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Interactive Horizontal Bar: Top 10 Bike Routes by Number of Trips"
      ],
      "metadata": {
        "id": "2ZAHjNzRbIgG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.express as px\n",
        "# Create an interactive horizontal bar chart of the top routes\n",
        "fig = px.bar(\n",
        "    df_top_routes,\n",
        "    x='trips',    # x-axis: number of trips for each route\n",
        "    y=df_top_routes.apply(lambda row: f\"{row.start_station_name} → {row.end_station_name}\", axis=1),    # y-axis: formatted route labels (\"Start → End\")\n",
        "    orientation='h',          # horizontal orientation for better readability\n",
        "    labels={'y':'Route', 'trips':'Number of Trips'},       # axis labels\n",
        "    title='Top 10 Most Popular Bike Routes'           # chart title\n",
        ")\n",
        "# Ensure the longest routes appear at the top of the chart\n",
        "fig.update_layout(yaxis={'categoryorder':'total ascending'})  # largest at top\n",
        "# Display the interactive chart in the notebook\n",
        "fig.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "1MZ_g9PhPrqQ",
        "outputId": "40028916-1d8c-4e66-d25c-ffbd121421c7"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"9c51ef9b-30df-4aa6-bfcf-fb77cd5780cb\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"9c51ef9b-30df-4aa6-bfcf-fb77cd5780cb\")) {                    Plotly.newPlot(                        \"9c51ef9b-30df-4aa6-bfcf-fb77cd5780cb\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Number of Trips=%{x}\\u003cbr\\u003eRoute=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[160970,130996,88336,85013,70654,61618,45141,41407,36533,33335],\"xaxis\":\"x\",\"y\":[\"Hyde Park Corner, Hyde Park → Hyde Park Corner, Hyde Park\",\"Aquatic Centre, Queen Elizabeth Olympic Park → Aquatic Centre, Queen Elizabeth Olympic Park\",\"Albert Gate, Hyde Park → Albert Gate, Hyde Park\",\"Black Lion Gate, Kensington Gardens → Black Lion Gate, Kensington Gardens\",\"Triangle Car Park, Hyde Park → Triangle Car Park, Hyde Park\",\"Park Lane , Hyde Park → Park Lane , Hyde Park\",\"Podium, Queen Elizabeth Olympic Park → Podium, Queen Elizabeth Olympic Park\",\"Palace Gate, Kensington Gardens → Palace Gate, Kensington Gardens\",\"Wellington Arch, Hyde Park → Wellington Arch, Hyde Park\",\"Hyde Park Corner, Hyde Park → Albert Gate, Hyde Park\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Number of Trips\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Route\"},\"categoryorder\":\"total ascending\"},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Top 10 Most Popular Bike Routes\"},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('9c51ef9b-30df-4aa6-bfcf-fb77cd5780cb');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ride Patterns Reveal Key Corridors:\n",
        "Our interactive bar chart of the top 10 routes highlights that just a few paths carry the lion’s share of London’s bike‐hire traffic. The most popular loop—Hyde Park Corner to itself—sees over 160,000 rides in our sample alone, and even the tenth‐ranked route still boasts more than 35,000 trips. These figures show that cyclists overwhelmingly favor certain corridors—often around major parks and transit hubs—which makes sense given their convenience and safety.\n",
        "\n",
        "Putting Insights into Action:\n",
        "For operators and city planners, these routes are the obvious places to focus resources. Adding more bikes and docks here, installing protected bike lanes, or scheduling more frequent rebalancing trips can keep these high‐demand paths running smoothly. You could also introduce off‐peak incentives—like discounted rides during quieter hours—to spread usage more evenly and avoid overcrowding during rush periods. By zeroing in on these critical corridors, London can deliver a smoother, more reliable experience for everyone who hops on a hire bike."
      ],
      "metadata": {
        "id": "UxT03M1-vfw3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Interactive Scatter: Trip Duration vs. Start Hour (Short vs. Long Rides)\n"
      ],
      "metadata": {
        "id": "dItBzTlYar5R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.express as px\n",
        "\n",
        "# Create a binary flag 'is_long': 1 if duration ≥ 15 minutes (900 seconds), else 0\n",
        "df['is_long'] = (df['duration'] >= 900).astype(int)\n",
        "\n",
        "# Build an interactive scatter plot:\n",
        "# - Sample 5,000 rows for performance in the notebook\n",
        "# - x-axis: hour of day the trip started\n",
        "# - y-axis: trip duration in seconds\n",
        "# - color: differentiate long vs. short trips based on 'is_long' flag\n",
        "# - hover_data: include station name when hovering over each point\n",
        "fig = px.scatter(\n",
        "    df.sample(5000),            # sample for performance\n",
        "    x='start_hour',\n",
        "    y='duration',\n",
        "    color='is_long',\n",
        "    labels={'is_long':'Long Trip (1) vs Short (0)'},\n",
        "    title='Trip Duration vs. Start Hour (Interactive)',\n",
        "    hover_data=['start_station_name']\n",
        ")\n",
        "# Display the interactive scatter plot\n",
        "fig.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "gHBFlFwaW10d",
        "outputId": "4e3ee6ce-ced6-457c-dc6a-54b6b1de85fb"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"87bbcf3f-7cea-44ae-9994-0e0b32bc9433\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"87bbcf3f-7cea-44ae-9994-0e0b32bc9433\")) {                    Plotly.newPlot(                        \"87bbcf3f-7cea-44ae-9994-0e0b32bc9433\",                        [{\"customdata\":[[\"Somerset House, Strand\"],[\"Lavington Street, Bankside\"],[\"Hansard Mews, Holland Park\"],[\"Boston Place, Marylebone\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Windsor Terrace, Hoxton\"],[\"Watney Market, Stepney\"],[\"Nesham Street, Wapping\"],[\"Melton Street, Euston\"],[\"Warwick Road, Olympia\"],[\"Westbourne Grove, Bayswater\"],[\"Leonard Circus , Shoreditch\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Nesham Street, Wapping\"],[\"Fanshaw Street, Hoxton\"],[\"Albert Gate, Hyde Park\"],[\"Regent's Row , Haggerston\"],[\"Melton Street, Euston\"],[\"Westminster Pier, Westminster\"],[\"Wellington Row, Bethnal Green\"],[\"Vincent Square, Westminster\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Fanshaw Street, Hoxton\"],[\"Empire Square, The Borough\"],[\"Gloucester Avenue, Camden Town\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Black Prince Road, Vauxhall\"],[\"Bouverie Street, Temple\"],[\"Albert Square, Stockwell\"],[\"Clarence Walk, Stockwell\"],[\"Windsor Terrace, Hoxton\"],[\"Regent's Row , Haggerston\"],[\"Albert Gate, Hyde Park\"],[\"Green Park Station, West End\"],[\"Royal London Hospital, Whitechapel\"],[\"Clapham Road, Lingham Street, Stockwell\"],[\"Maida Vale, Maida Vale\"],[\"Percival Street, Finsbury\"],[\"Shoreditch High Street, Shoreditch\"],[\"Green Park Station, Mayfair\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Pancras Road, King's Cross\"],[\"Royal London Hospital, Whitechapel\"],[\"St. George's Square, Pimlico\"],[\"Belgrove Street , King's Cross\"],[\"Commercial Street, Shoreditch\"],[\"Curlew Street, Shad Thames\"],[\"Malet Street, Bloomsbury\"],[\"Kensington Gore, Knightsbridge\"],[\"Clinton Road, Mile End\"],[\"London Zoo,  The Regent's Park\"],[\"Roscoe Street, St. Luke's\"],[\"Hansard Mews, Holland Park\"],[\"Drury Lane, Covent Garden\"],[\"Kensington Church Street, Kensington\"],[\"Queensbridge Road, Haggerston\"],[\"Westminster University, Marylebone\"],[\"Bolsover Street, Fitzrovia\"],[\"Clapham Common North Side, Clapham Common\"],[\"Belgrave Road, Victoria\"],[\"British Museum, Bloomsbury\"],[\"Marylebone Lane, Marylebone\"],[\"Bancroft Road, Bethnal Green\"],[\"New Globe Walk, Bankside\"],[\"Blythe Road, Olympia\"],[\"Ossulston Street, Somers Town\"],[\"Pritchard's Road, Bethnal Green\"],[\"Russell Gardens, Olympia\"],[\"Brunswick Square, Bloomsbury\"],[\"Sopwith Way, Battersea Park\"],[\"Penywern Road, Earl's Court\"],[\"Preston's Road, Cubitt Town\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Malet Street, Bloomsbury\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Pritchard's Road, Bethnal Green\"],[\"Park Street, Bankside\"],[\"Commercial Street, Shoreditch\"],[\"Shoreditch High Street, Shoreditch\"],[\"Vincent Square, Westminster\"],[\"Ford Road, Old Ford\"],[\"Leonard Circus , Shoreditch\"],[\"Belgrave Road, Victoria\"],[\"Central House, Aldgate\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Heron Quays DLR, Canary Wharf\"],[\"Maida Vale, Maida Vale\"],[\"Nesham Street, Wapping\"],[\"Salmon Lane, Limehouse\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Westminster Pier, Westminster\"],[\"Arlington Road, Camden Town\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Tooley Street, Bermondsey\"],[\"Royal London Hospital, Whitechapel\"],[\"Salmon Lane, Limehouse\"],[\"Albany Street, The Regent's Park\"],[\"Handyside Street, King's Cross\"],[\"Monier Road, Hackney Wick\"],[\"Leonard Circus , Shoreditch\"],[\"British Museum, Bloomsbury\"],[\"Sopwith Way, Battersea Park\"],[\"Sopwith Way, Battersea Park\"],[\"Phillimore Gardens, Kensington\"],[\"Fanshaw Street, Hoxton\"],[\"British Museum, Bloomsbury\"],[\"Regent's Row , Haggerston \"],[\"Lancaster Gate , Bayswater\"],[\"St. Mary Axe, Aldgate\"],[\"Serpentine Car Park, Hyde Park\"],[\"Queensbridge Road, Haggerston\"],[\"Selby Street, Whitechapel\"],[\"Kensington Olympia Station, Olympia\"],[\"Albany Street, The Regent's Park\"],[\"Brunswick Square, Bloomsbury\"],[\"Regent's Row , Haggerston \"],[\"Royal Avenue 2, Chelsea\"],[\"Malet Street, Bloomsbury\"],[\"De Vere Gardens, Kensington\"],[\"Queen Victoria Street, St. Paul's\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Westferry DLR, Limehouse\"],[\"North Wharf Road, Paddington\"],[\"Belgrove Street , King's Cross\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Albert Gate, Hyde Park\"],[\"Grafton Street, Mayfair\"],[\"Winsland Street, Paddington\"],[\"Melton Street, Euston\"],[\"Shoreditch High Street, Shoreditch\"],[\"Montpelier Street, Knightsbridge\"],[\"Belgrove Street , King's Cross\"],[\"Princes Square, Bayswater\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Westminster University, Marylebone\"],[\"One Tower Bridge, Bermondsey\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Abbotsbury Road, Holland Park\"],[\"Bury Place, Holborn\"],[\"New Globe Walk, Bankside\"],[\"Pindar Street, Liverpool Street\"],[\"Abyssinia Close, Clapham Junction\"],[\"Bancroft Road, Bethnal Green\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Regent's Row , Haggerston\"],[\"Tooley Street, Bermondsey\"],[\"St Mary's Hospital, Paddington\"],[\"Lavington Street, Bankside\"],[\"Wellington Row, Bethnal Green\"],[\"Roscoe Street, St. Luke's\"],[\"Albert Square, Stockwell\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Kings Gate House, Westminster\"],[\"Lambeth Palace Road, Waterloo\"],[\"One Tower Bridge, Bermondsey\"],[\"Hampstead Road (Cartmel), Euston\"],[\"Bury Place, Holborn\"],[\"Warwick Avenue Station, Maida Vale\"],[\"South Audley Street, Mayfair\"],[\"Westminster University, Marylebone\"],[\"Somerset House, Strand\"],[\"Imperial Wharf Station, Sands End\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Clarges Street, Mayfair\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Regency Street, Westminster\"],[\"Bouverie Street, Temple\"],[\"Old Montague Street, Whitechapel\"],[\"Malet Street, Bloomsbury\"],[\"Belgrove Street , King's Cross\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Albert Square, Stockwell\"],[\"Battersea Power Station, Battersea Park\"],[\"Green Park Station, Mayfair\"],[\"Stratford Station, Stratford\"],[\"Bancroft Road, Bethnal Green\"],[\"Bouverie Street, Temple\"],[\"Red Lion Square, Holborn\"],[\"Duke Street Hill, London Bridge\"],[\"Clapham Common North side, Clapham Common\"],[\"Birkenhead Street, King's Cross\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Birkenhead Street, King's Cross\"],[\"Somerset House, Strand\"],[\"Sedding Street, Sloane Square\"],[\"Handyside Street, King's Cross\"],[\"Bolsover Street, Fitzrovia\"],[\"Wenlock Road , Hoxton\"],[\"Leonard Circus , Shoreditch\"],[\"Royal London Hospital, Whitechapel\"],[\"Broadwick Street, Soho\"],[\"Limburg Road, Clapham Junction\"],[\"Leonard Circus , Shoreditch\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Marylebone Lane, Marylebone\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Regent's Row , Haggerston \"],[\"Albany Street, The Regent's Park\"],[\"East Road, Hoxton\"],[\"Lancaster Gate , Bayswater\"],[\"Bolsover Street, Fitzrovia\"],[\"Wenlock Road , Hoxton\"],[\"Elizabeth Bridge, Victoria\"],[\"Malet Street, Bloomsbury\"],[\"Montgomery Square, Canary Wharf\"],[\"Albert Gate, Hyde Park\"],[\"Montpelier Street, Knightsbridge\"],[\"New Fetter Lane, Holborn\"],[\"New Fetter Lane, Holborn\"],[\"Central House, Aldgate\"],[\"Claverton Street, Pimlico\"],[\"Royal Avenue 2, Chelsea\"],[\"Newby Place, Poplar\"],[\"Belgrave Road, Victoria\"],[\"Nesham Street, Wapping\"],[\"Winsland Street, Paddington\"],[\"Clarges Street, Mayfair\"],[\"Ford Road, Old Ford\"],[\"Montgomery Square, Canary Wharf\"],[\"Doric Way , Somers Town\"],[\"Tooley Street, Bermondsey\"],[\"Godliman Street, St. Paul's\"],[\"Sopwith Way, Battersea Park\"],[\"Commercial Street, Shoreditch\"],[\"Arlington Road, Camden Town\"],[\"Good's Way, King's Cross\"],[\"Drury Lane, Covent Garden\"],[\"Ampton Street , Clerkenwell\"],[\"Wenlock Road , Hoxton\"],[\"Golden Lane, Barbican\"],[\"St. Chad's Street, King's Cross\"],[\"Abingdon Villas, Kensington\"],[\"Lambeth Road, Vauxhall\"],[\"Bouverie Street, Temple\"],[\"New Spring Gardens Walk, Vauxhall\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Queen's Gate (North), Kensington\"],[\"Kensington Church Street, Kensington\"],[\"Warwick Road, Olympia\"],[\"Pritchard's Road, Bethnal Green\"],[\"Shoreditch High Street, Shoreditch\"],[\"Curzon Street, Mayfair\"],[\"Lavington Street, Bankside\"],[\"Leonard Circus , Shoreditch\"],[\"Sopwith Way, Battersea Park\"],[\"Monier Road, Hackney Wick\"],[\"Monier Road, Hackney Wick\"],[\"Serpentine Car Park, Hyde Park\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Hoxton Station, Hoxton\"],[\"Harford Street, Mile End\"],[\"Geraldine Street, Elephant & Castle\"],[\"Nesham Street, Wapping\"],[\"Bonner Gate, Victoria Park\"],[\"Broadcasting House, Marylebone\"],[\"Roscoe Street, St. Luke's\"],[\"Belgrove Street , King's Cross\"],[\"Royal London Hospital, Whitechapel\"],[\"Stratford Station, Stratford\"],[\"St. George's Square, Pimlico\"],[\"Twig Folly Bridge, Mile End\"],[\"Abingdon Villas, Kensington\"],[\"Monier Road, Hackney Wick\"],[\"Little Brook Green, Brook Green\"],[\"Belvedere Road 2, South Bank\"],[\"Regent's Row , Haggerston \"],[\"Sandilands Road, Walham Green\"],[\"Wenlock Road , Hoxton\"],[\"Somerset House, Strand\"],[\"Marylebone Lane, Marylebone\"],[\"Doric Way , Somers Town\"],[\"Old Montague Street, Whitechapel\"],[\"Fanshaw Street, Hoxton\"],[\"Sun Street, Liverpool Street\"],[\"Blackfriars Road, Southwark\"],[\"Bolsover Street, Fitzrovia\"],[\"Grafton Street, Mayfair\"],[\"Baylis Road, Waterloo\"],[\"St. George's Square, Pimlico\"],[\"Green Park Station, Mayfair\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Kensington Gore, Knightsbridge\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Regency Street, Westminster\"],[\"Green Park Station, Mayfair\"],[\"Houndsditch, Aldgate\"],[\"Curzon Street, Mayfair\"],[\"Rathbone Street, Fitzrovia\"],[\"Limburg Road, Clapham Junction\"],[\"Paddington Street, Marylebone\"],[\"Rathbone Street, Fitzrovia\"],[\"Roscoe Street, St. Luke's\"],[\"Southwark Street, Bankside\"],[\"Good's Way, King's Cross\"],[\"Godliman Street, St. Paul's\"],[\"Kings Gate House, Westminster\"],[\"Salmon Lane, Limehouse\"],[\"Pindar Street, Liverpool Street\"],[\"Christopher Street, Liverpool Street\"],[\"Shoreditch High Street, Shoreditch\"],[\"Westminster Pier, Westminster\"],[\"Jubilee Plaza, Canary Wharf\"],[\"St Mary's Hospital, Paddington\"],[\"Serpentine Car Park, Hyde Park\"],[\"Westminster Pier, Westminster\"],[\"Copper Box Arena, Queen Elizabeth Olympic Park\"],[\"One Tower Bridge, Bermondsey\"],[\"Warwick Road, Olympia\"],[\"East Road, Hoxton\"],[\"Bolsover Street, Fitzrovia\"],[\"Belgrave Road, Victoria\"],[\"Tallis Street, Temple\"],[\"Curlew Street, Shad Thames\"],[\"New Fetter Lane, Holborn\"],[\"Princes Square, Bayswater\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Copper Box Arena, Queen Elizabeth Olympic Park\"],[\"Winsland Street, Paddington\"],[\"Little Brook Green, Brook Green\"],[\"Lancaster Gate , Bayswater\"],[\"Crawford Street, Marylebone\"],[\"Baylis Road, Waterloo\"],[\"Knaresborough Place, Earl's Court\"],[\"Albert Gate, Hyde Park\"],[\"Duke Street Hill, London Bridge\"],[\"Commercial Street, Shoreditch\"],[\"Bolsover Street, Fitzrovia\"],[\"St. John's Wood Road, St. John's Wood\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Tallis Street, Temple\"],[\"Broadcasting House, Marylebone\"],[\"Crawford Street, Marylebone\"],[\"Regent's Row , Haggerston \"],[\"Finsbury Leisure Centre, St. Luke's\"],[\"New Fetter Lane, Holborn\"],[\"Belvedere Road 1, South Bank\"],[\"Fanshaw Street, Hoxton\"],[\"Chrisp Street Market, Poplar\"],[\"Hoxton Station, Hoxton\"],[\"Queen's Gate (North), Kensington\"],[\"Claverton Street, Pimlico\"],[\"Fanshaw Street, Hoxton\"],[\"Winsland Street, Paddington\"],[\"Green Park Station, Mayfair\"],[\"River Street , Clerkenwell\"],[\"Kings Gate House, Westminster\"],[\"River Street , Clerkenwell\"],[\"Kensington Gore, Knightsbridge\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Lincoln's Inn Fields, Holborn\"],[\"St. George's Square, Pimlico\"],[\"Windsor Terrace, Hoxton\"],[\"Elizabeth Bridge, Victoria\"],[\"Green Park Station, Mayfair\"],[\"Albany Street, The Regent's Park\"],[\"Abyssinia Close, Clapham Junction\"],[\"Newby Place, Poplar\"],[\"Northington Street , Holborn\"],[\"Godliman Street, St. Paul's\"],[\"Twig Folly Bridge, Mile End\"],[\"Black Lion Gate, Kensington Gardens\"],[\"St. Mary Axe, Aldgate\"],[\"Lambeth North Station, Waterloo\"],[\"Good's Way, King's Cross\"],[\"Manresa Road, Chelsea\"],[\"Belgrove Street , King's Cross\"],[\"Bancroft Road, Bethnal Green\"],[\"Leonard Circus , Shoreditch\"],[\"Albert Gate, Hyde Park\"],[\"Good's Way, King's Cross\"],[\"Crawford Street, Marylebone\"],[\"Westminster University, Marylebone\"],[\"Swan Street, The Borough\"],[\"Binfield Road, Stockwell\"],[\"Montgomery Square, Canary Wharf\"],[\"Green Park Station, Mayfair\"],[\"London Zoo,  The Regent's Park\"],[\"Stratford Station, Stratford\"],[\"Kensington Church Street, Kensington\"],[\"Westferry Circus, Canary Wharf\"],[\"Serpentine Car Park, Hyde Park\"],[\"Handyside Street, King's Cross\"],[\"Montpelier Street, Knightsbridge\"],[\"Knaresborough Place, Earl's Court\"],[\"Cumberland Gate, Hyde Park\"],[\"Clapham Common North Side, Clapham Common\"],[\"Royal Avenue 2, Chelsea\"],[\"Good's Way, King's Cross\"],[\"Bourne Street, Belgravia\"],[\"Fanshaw Street, Hoxton\"],[\"Finsbury Library , Finsbury\"],[\"Tysoe Street, Clerkenwell\"],[\"Northington Street , Holborn\"],[\"Smith Square, Westminster\"],[\"Pancras Road, King's Cross\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Belgrove Street , King's Cross\"],[\"Belgrove Street , King's Cross\"],[\"Shoreditch High Street, Shoreditch\"],[\"Albany Street, The Regent's Park\"],[\"Taviton Street, Bloomsbury\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Handyside Street, King's Cross\"],[\"Binfield Road, Stockwell\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Black Prince Road, Vauxhall\"],[\"Drummond Street , Euston\"],[\"Brunswick Square, Bloomsbury\"],[\"Page Street, Westminster\"],[\"Harcourt Terrace, West Brompton\"],[\"Birkenhead Street, King's Cross\"],[\"Montpelier Street, Knightsbridge\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Ossulston Street, Somers Town\"],[\"Bourne Street, Belgravia\"],[\"Drury Lane, Covent Garden\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Putney Pier, Wandsworth\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Riverlight South, Nine Elms\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Belgrove Street , King's Cross\"],[\"Serpentine Car Park, Hyde Park\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Hereford Road, Bayswater\"],[\"Watney Street, Shadwell\"],[\"Warwick Road, Olympia\"],[\"Binfield Road, Stockwell\"],[\"Portman Square, Marylebone\"],[\"Blackfriars Road, Southwark\"],[\"Rathbone Street, Fitzrovia\"],[\"Lansdowne Walk, Ladbroke Grove\"],[\"Shoreditch High Street, Shoreditch\"],[\"Manresa Road, Chelsea\"],[\"Doric Way , Somers Town\"],[\"Belgrave Road, Victoria\"],[\"Watney Street, Shadwell\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Clarges Street, Mayfair\"],[\"Phillimore Gardens, Kensington\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Lancaster Gate , Bayswater\"],[\"Winsland Street, Paddington\"],[\"Watney Street, Shadwell\"],[\"Rectory Square, Stepney\"],[\"Montgomery Square, Canary Wharf\"],[\"Furze Green, Bow\"],[\"Bolsover Street, Fitzrovia\"],[\"Houndsditch, Aldgate\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Northington Street , Holborn\"],[\"Boston Place, Marylebone\"],[\"St. George's Square, Pimlico\"],[\"Sopwith Way, Battersea Park\"],[\"Shoreditch High Street, Shoreditch\"],[\"Belgrove Street , King's Cross\"],[\"Nesham Street, Wapping\"],[\"Ford Road, Old Ford\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Hoxton Station, Hoxton\"],[\"Lambeth North Station, Waterloo\"],[\"Hereford Road, Bayswater\"],[\"Queensbridge Road, Haggerston\"],[\"Tysoe Street, Clerkenwell\"],[\"Sun Street, Liverpool Street\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Scala Street, Fitzrovia\"],[\"Tysoe Street, Clerkenwell\"],[\"Albert Gate, Hyde Park\"],[\"Tysoe Street, Clerkenwell\"],[\"Birkenhead Street, King's Cross\"],[\"Percival Street, Finsbury\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Regent's Row , Haggerston \"],[\"Ossulston Street, Somers Town\"],[\"Albert Gate, Hyde Park\"],[\"Lansdowne Way Bus Garage, Stockwell\"],[\"Godliman Street, St. Paul's\"],[\"Empire Square, The Borough\"],[\"Belgrave Road, Victoria\"],[\"Goldsmith's Row, Haggerston\"],[\"Albert Square, Stockwell\"],[\"Kingsway, Covent Garden\"],[\"Clinton Road, Mile End\"],[\"Golden Lane, Barbican\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Percival Street, Finsbury\"],[\"Tooley Street, Bermondsey\"],[\"Sandilands Road, Walham Green\"],[\"Shoreditch High Street, Shoreditch\"],[\"Smith Square, Westminster\"],[\"Hereford Road, Bayswater\"],[\"Belvedere Road 2, South Bank\"],[\"Kensington Church Street, Kensington\"],[\"Scala Street, Fitzrovia\"],[\"East Road, Hoxton\"],[\"Belgrove Street , King's Cross\"],[\"Tooley Street, Bermondsey\"],[\"Stratford Station, Stratford\"],[\"Doric Way , Somers Town\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Leonard Circus , Shoreditch\"],[\"Lambeth Palace Road, Waterloo\"],[\"Clapham Road, Lingham Street, Stockwell\"],[\"Westferry Circus, Canary Wharf\"],[\"Naval Row, Blackwall\"],[\"Great Russell Street, Bloomsbury\"],[\"Handyside Street, King's Cross\"],[\"Northington Street , Holborn\"],[\"Hansard Mews, Holland Park\"],[\"Elizabeth Bridge, Victoria\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Imperial Wharf Station\"],[\"Kings Gate House, Westminster\"],[\"Bouverie Street, Temple\"],[\"Albert Gate, Hyde Park\"],[\"Shoreditch High Street, Shoreditch\"],[\"Albany Street, The Regent's Park\"],[\"Driffield Road, Old Ford\"],[\"Regent's Row , Haggerston \"],[\"Belgrave Road, Victoria\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Percival Street, Finsbury\"],[\"New Fetter Lane, Holborn\"],[\"Goldsmith's Row, Haggerston\"],[\"Sopwith Way, Battersea Park\"],[\"Montpelier Street, Knightsbridge\"],[\"Park Street, Bankside\"],[\"Clinton Road, Mile End\"],[\"Belgrove Street , King's Cross\"],[\"Imperial Wharf Station, Sands End\"],[\"Belgrove Street , King's Cross\"],[\"Taviton Street, Bloomsbury\"],[\"Lancaster Gate , Bayswater\"],[\"Empire Square, The Borough\"],[\"Shoreditch High Street, Shoreditch\"],[\"Regent's Row , Haggerston\"],[\"North Wharf Road, Paddington\"],[\"Brunswick Square, Bloomsbury\"],[\"St Mary's Hospital, Westminster\"],[\"Albert Gate, Hyde Park\"],[\"Heron Quays DLR, Canary Wharf\"],[\"Manresa Road, Chelsea\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Regency Street, Westminster\"],[\"Boston Place, Marylebone\"],[\"Elizabeth Bridge, Victoria\"],[\"British Museum, Bloomsbury\"],[\"Hollybush Gardens, Bethnal Green\"],[\"Regent's Row , Haggerston \"],[\"Salmon Lane, Limehouse\"],[\"Nesham Street, Wapping\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Smith Square, Westminster\"],[\"Royal London Hospital, Whitechapel\"],[\"Chrisp Street Market, Poplar\"],[\"British Museum, Bloomsbury\"],[\"Lambeth Palace Road, Waterloo\"],[\"Handyside Street, King's Cross\"],[\"Clinton Road, Mile End\"],[\"De Vere Gardens, Kensington\"],[\"Victoria Rise, Clapham Common\"],[\"Westminster Pier, Westminster\"],[\"St. Chad's Street, King's Cross\"],[\"Battersea Power Station, Battersea Park\"],[\"Bury Place, Holborn\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Malet Street, Bloomsbury\"],[\"Arlington Road, Camden Town\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Albert Square, Stockwell\"],[\"Curlew Street, Shad Thames\"],[\"Stratford Station, Stratford\"],[\"Wenlock Road , Hoxton\"],[\"Wellington Row, Bethnal Green\"],[\"Smith Square, Westminster\"],[\"Crawford Street, Marylebone\"],[\"Sedding Street, Sloane Square\"],[\"Rectory Square, Stepney\"],[\"Pancras Road, King's Cross\"],[\"Taviton Street, Bloomsbury\"],[\"Belvedere Road 2, South Bank\"],[\"St. Chad's Street, King's Cross\"],[\"Tallis Street, Temple\"],[\"St. Chad's Street, King's Cross\"],[\"Green Park Station, Mayfair\"],[\"Brunswick Square, Bloomsbury\"],[\"St. Mary Axe, Aldgate\"],[\"Selby Street, Whitechapel\"],[\"Christopher Street, Liverpool Street\"],[\"Broadwick Street, Soho\"],[\"Swan Street, The Borough\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Charlbert Street, St. John's Wood\"],[\"Regent's Row , Haggerston \"],[\"Regency Street, Westminster\"],[\"Knaresborough Place, Earl's Court\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Tysoe Street, Clerkenwell\"],[\"Watney Market, Stepney\"],[\"Manresa Road, Chelsea\"],[\"Belvedere Road, South Bank\"],[\"Serpentine Car Park, Hyde Park\"],[\"Crawford Street, Marylebone\"],[\"Bolsover Street, Fitzrovia\"],[\"Green Park Station, Mayfair\"],[\"Binfield Road, Stockwell\"],[\"Knaresborough Place, Earl's Court\"],[\"Crawford Street, Marylebone\"],[\"New Globe Walk, Bankside\"],[\"Monier Road, Hackney Wick\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Smith Square, Westminster\"],[\"Somerset House, Strand\"],[\"Cromer Street, Bloomsbury\"],[\"Smith Square, Westminster\"],[\"Hereford Road, Bayswater\"],[\"St. George's Square, Pimlico\"],[\"St. Mark's Road, North Kensington\"],[\"Bolsover Street, Fitzrovia\"],[\"Drury Lane, Covent Garden\"],[\"St. George's Square, Pimlico\"],[\"Belgrave Road, Victoria\"],[\"Abbotsbury Road, Holland Park\"],[\"Bedford Way, Bloomsbury\"],[\"Doric Way , Somers Town\"],[\"St. Mary Axe, Aldgate\"],[\"Finsbury Library , Finsbury\"],[\"Regent's Row , Haggerston\"],[\"Edgware Road Station, Marylebone\"],[\"Christopher Street, Liverpool Street\"],[\"Doric Way , Somers Town\"],[\"Belgrave Road, Victoria\"],[\"Marylebone Lane, Marylebone\"],[\"Regency Street, Westminster\"],[\"Kennington Lane Tesco, Vauxhall\"],[\"Sandilands Road, Walham Green\"],[\"Bouverie Street, Temple\"],[\"Belvedere Road 2, South Bank\"],[\"East Road, Hoxton\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Serpentine Car Park, Hyde Park\"],[\"St. James's Square, St. James's\"],[\"Monier Road, Hackney Wick\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"King Edward Street, St Pauls\"],[\"Belgrove Street , King's Cross\"],[\"Gloucester Avenue, Camden Town\"],[\"Page Street, Westminster\"],[\"Broadwick Street, Soho\"],[\"Page Street, Westminster\"],[\"Pindar Street, Liverpool Street\"],[\"Portman Square, Marylebone\"],[\"Portman Square, Marylebone\"],[\"Monier Road, Hackney Wick\"],[\"Old Montague Street, Whitechapel\"],[\"East Road, Hoxton\"],[\"Charlbert Street, St. John's Wood\"],[\"Bury Place, Holborn\"],[\"Coram Street, Bloomsbury\"],[\"Westferry Circus, Canary Wharf\"],[\"Green Park Station, Mayfair\"],[\"Copper Box Arena, Queen Elizabeth Olympic Park\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Victoria and Albert Museum, Cromwell Road\"],[\"Goldsmith's Row, Haggerston\"],[\"Portman Square, Marylebone\"],[\"Kensington Church Street, Kensington\"],[\"Belgrove Street , King's Cross\"],[\"Albert Gate, Hyde Park\"],[\"Broadcasting House, Marylebone\"],[\"Handyside Street, King's Cross\"],[\"Grafton Street, Mayfair\"],[\"Clapham Road, Lingham Street, Stockwell\"],[\"Penywern Road, Earl's Court\"],[\"Tooley Street, Bermondsey\"],[\"Curlew Street, Shad Thames\"],[\"Hansard Mews, Holland Park\"],[\"Knaresborough Place, Earl's Court\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Sun Street, Liverpool Street\"],[\"Sun Street, Liverpool Street\"],[\"Drury Lane, Covent Garden\"],[\"Hoxton Station, Hoxton\"],[\"Salmon Lane, Limehouse\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Queen's Gate (North), Kensington\"],[\"Phillimore Gardens, Kensington\"],[\"Queen's Gate (North), Kensington\"],[\"Pancras Road, King's Cross\"],[\"Swan Street, The Borough\"],[\"Victoria & Albert Museum, South Kensington\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Clinton Road, Mile End\"],[\"London Zoo,  The Regent's Park\"],[\"One Tower Bridge, Bermondsey\"],[\"Blackfriars Road, Southwark\"],[\"Northington Street , Holborn\"],[\"Broadwick Street, Soho\"],[\"Kensington Church Street, Kensington\"],[\"Bolsover Street, Fitzrovia\"],[\"Twig Folly Bridge, Mile End\"],[\"Malet Street, Bloomsbury\"],[\"Belgrove Street , King's Cross\"],[\"Manresa Road, Chelsea\"],[\"Empire Square, The Borough\"],[\"Serpentine Car Park, Hyde Park\"],[\"Penywern Road, Earl's Court\"],[\"Hereford Road, Bayswater\"],[\"Phillimore Gardens, Kensington\"],[\"Great Russell Street, Bloomsbury\"],[\"Albert Gate, Hyde Park\"],[\"Belgrove Street , King's Cross\"],[\"Smith Square, Westminster\"],[\"Russell Gardens, Olympia\"],[\"Royal London Hospital, Whitechapel\"],[\"Salmon Lane, Limehouse\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Great Russell Street, Bloomsbury\"],[\"British Museum, Bloomsbury\"],[\"Kennington Lane Tesco, Vauxhall\"],[\"Leonard Circus , Shoreditch\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Blackfriars Road, Southwark\"],[\"Clarges Street, Mayfair\"],[\"Belgrove Street , King's Cross\"],[\"Somerset House, Strand\"],[\"St. Chad's Street, King's Cross\"],[\"Baylis Road, Waterloo\"],[\"Handyside Street, King's Cross\"],[\"Tate Modern, Bankside\"],[\"Greyhound Road, Hammersmith\"],[\"Tooley Street, Bermondsey\"],[\"Malet Street, Bloomsbury\"],[\"Clapham Common North Side, Clapham Common\"],[\"Great Russell Street, Bloomsbury\"],[\"Tooley Street, Bermondsey\"],[\"St Mary's Hospital, Paddington\"],[\"Clinton Road, Mile End\"],[\"Windsor Terrace, Hoxton\"],[\"Westminster Bridge Road, Elephant & Castle\"],[\"Leonard Circus , Shoreditch\"],[\"Warwick Road, Olympia\"],[\"Malet Street, Bloomsbury\"],[\"Houghton Street, Strand\"],[\"Victoria & Albert Museum, South Kensington\"],[\"Central House, Aldgate\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Green Park Station, Mayfair\"],[\"Marylebone Lane, Marylebone\"],[\"Butler Place, Westminster\"],[\"Riverlight South, Nine Elms\"],[\"St. George's Square, Pimlico\"],[\"Belgrove Street , King's Cross\"],[\"Royal London Hospital, Whitechapel\"],[\"Paddington Street, Marylebone\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Walworth Square, Walworth\"],[\"Sedding Street, Sloane Square\"],[\"Halford Road, West Kensington\"],[\"Clapham Common North Side, Clapham Common\"],[\"Houndsditch, Aldgate\"],[\"Coram Street, Bloomsbury\"],[\"Red Lion Square, Holborn\"],[\"Belgrave Road, Victoria\"],[\"Broadcasting House, Marylebone\"],[\"Abingdon Villas, Kensington\"],[\"Curlew Street, Shad Thames\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Albert Gate, Hyde Park\"],[\"Westminster Pier, Westminster\"],[\"Twig Folly Bridge, Mile End\"],[\"Broadwick Street, Soho\"],[\"Driffield Road, Old Ford\"],[\"Kensington Olympia Station, Olympia\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Langdon Park, Poplar\"],[\"Belvedere Road 1, South Bank\"],[\"Taviton Street, Bloomsbury\"],[\"Sopwith Way, Battersea Park\"],[\"Russell Gardens, Olympia\"],[\"One Tower Bridge, Bermondsey\"],[\"Central House, Aldgate\"],[\"Regency Street, Westminster\"],[\"Copper Box Arena, Queen Elizabeth Olympic Park\"],[\"Crawford Street, Marylebone\"],[\"Leonard Circus , Shoreditch\"],[\"Page Street, Westminster\"],[\"Watney Market, Stepney\"],[\"Winsland Street, Paddington\"],[\"Monier Road, Hackney Wick\"],[\"Doric Way , Somers Town\"],[\"Curlew Street, Shad Thames\"],[\"Finsbury Library , Finsbury\"],[\"Southwick Street, Paddington\"],[\"Montpelier Street, Knightsbridge\"],[\"Green Park Station, Mayfair\"],[\"Little Brook Green, Brook Green\"],[\"Belgrove Street , King's Cross\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Montpelier Street, Knightsbridge\"],[\"Belgrave Road, Victoria\"],[\"Geraldine Street, Elephant & Castle\"],[\"Godliman Street, St. Paul's\"],[\"Stainsby Road , Poplar\"],[\"North Wharf Road, Paddington\"],[\"Sedding Street, Sloane Square\"],[\"Elizabeth Bridge, Victoria\"],[\"Albert Gate, Hyde Park\"],[\"Serpentine Car Park, Hyde Park\"],[\"Albert Gate, Hyde Park\"],[\"Doric Way , Somers Town\"],[\"Boston Place, Marylebone\"],[\"Maplin Street, Mile End\"],[\"Tate Modern, Bankside\"],[\"Queensbridge Road, Haggerston\"],[\"Clinton Road, Mile End\"],[\"Wenlock Road , Hoxton\"],[\"Empire Square, The Borough\"],[\"Sedding Street, Sloane Square\"],[\"Tate Modern, Bankside\"],[\"Winsland Street, Paddington\"],[\"Albert Gate, Hyde Park\"],[\"Bolsover Street, Fitzrovia\"],[\"Melton Street, Euston\"],[\"Montpelier Street, Knightsbridge\"],[\"River Street , Clerkenwell\"],[\"Belgrove Street , King's Cross\"],[\"Belvedere Road 1, South Bank\"],[\"Marylebone Lane, Marylebone\"],[\"Good's Way, King's Cross\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Sedding Street, Sloane Square\"],[\"Woodstock Grove, Shepherd's Bush\"],[\"British Museum, Bloomsbury\"],[\"Barbican Centre, Barbican\"],[\"Belgrave Road, Victoria\"],[\"Green Park Station, Mayfair\"],[\"Westbourne Park Road, Portobello\"],[\"Godliman Street, St. Paul's\"],[\"Goldsmith's Row, Haggerston\"],[\"Somerset House, Strand\"],[\"East Road, Hoxton\"],[\"Twig Folly Bridge, Mile End\"],[\"Binfield Road, Stockwell\"],[\"Bolsover Street, Fitzrovia\"],[\"One Tower Bridge, Bermondsey\"],[\"Winsland Street, Paddington\"],[\"Grafton Street, Mayfair\"],[\"Pritchard's Road, Bethnal Green\"],[\"Belgrove Street , King's Cross\"],[\"Charlbert Street, St. John's Wood\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Wenlock Road , Hoxton\"],[\"Pritchard's Road, Bethnal Green\"],[\"Aberfeldy Street, Poplar\"],[\"Driffield Road, Old Ford\"],[\"Ladbroke Grove Central, Ladbroke Grove\"],[\"Copper Box Arena, Queen Elizabeth Olympic Park\"],[\"Clapham Road, Lingham Street, Stockwell\"],[\"Leonard Circus , Shoreditch\"],[\"Green Park Station, Mayfair\"],[\"St Mary's Hospital, Paddington\"],[\"Albert Gate, Hyde Park\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"De Vere Gardens, Kensington\"],[\"Queen's Gate (North), Kensington\"],[\"Warwick Road, Olympia\"],[\"Malet Street, Bloomsbury\"],[\"Northington Street , Holborn\"],[\"Shoreditch High Street, Shoreditch\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Windsor Terrace, Hoxton\"],[\"Westminster Bridge Road, Elephant & Castle\"],[\"Albert Gate, Hyde Park\"],[\"Warwick Avenue Station, Maida Vale\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Belvedere Road 2, South Bank\"],[\"Pritchard's Road, Bethnal Green\"],[\"Bevington Road, North Kensington\"],[\"Claverton Street, Pimlico\"],[\"Doric Way , Somers Town\"],[\"Bolsover Street, Fitzrovia\"],[\"Black Prince Road, Vauxhall\"],[\"Red Lion Square, Holborn\"],[\"Ampton Street , Clerkenwell\"],[\"Ashley Place, Victoria\"],[\"Rathbone Street, Fitzrovia\"],[\"Broadwick Street, Soho\"],[\"Portman Square, Marylebone\"],[\"East Road, Hoxton\"],[\"Taviton Street, Bloomsbury\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Houndsditch, Aldgate\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Claverton Street, Pimlico\"],[\"Southwick Street, Paddington\"],[\"British Museum, Bloomsbury\"],[\"Belgrove Street , King's Cross\"],[\"Antill Road, Mile End\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Westminster University, Marylebone\"],[\"Nesham Street, Wapping\"],[\"Imperial Wharf Station, Sands End\"],[\"Bancroft Road, Bethnal Green\"],[\"Halford Road, West Kensington\"],[\"Sedding Street, Sloane Square\"],[\"Belgrove Street , King's Cross\"],[\"Harford Street, Mile End\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Baylis Road, Waterloo\"],[\"Marylebone Lane, Marylebone\"],[\"Godliman Street, St. Paul's\"],[\"Boston Place, Marylebone\"],[\"Belvedere Road 2, South Bank\"],[\"Houghton Street, Strand\"],[\"New Spring Gardens Walk, Vauxhall\"],[\"Houndsditch, Aldgate\"],[\"Pindar Street, Liverpool Street\"],[\"Here East North, Queen Elizabeth Olympic Park\"],[\"Watney Market, Stepney\"],[\"Embankment (Savoy), Strand\"],[\"Lavington Street, Bankside\"],[\"Shoreditch High Street, Shoreditch\"],[\"Malet Street, Bloomsbury\"],[\"Boston Place, Marylebone\"],[\"Page Street, Westminster\"],[\"Teviot Street, Poplar\"],[\"Clinton Road, Mile End\"],[\"Hatton Wall, Holborn\"],[\"Alfreda Street, Battersea Park\"],[\"Smith Square, Westminster\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Shoreditch High Street, Shoreditch\"],[\"Green Park Station, Mayfair\"],[\"Good's Way, King's Cross\"],[\"Pembridge Villas, Notting Hill\"],[\"Drury Lane, Covent Garden\"],[\"Belgrave Road, Victoria\"],[\"Belvedere Road 1, South Bank\"],[\"Pritchard's Road, Bethnal Green\"],[\"Regent's Row , Haggerston \"],[\"Black Lion Gate, Kensington Gardens\"],[\"Gauden Road, Clapham\"],[\"Broadwick Street, Soho\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Coram Street, Bloomsbury\"],[\"Swan Street, The Borough\"],[\"Leonard Circus , Shoreditch\"],[\"Good's Way, King's Cross\"],[\"North Wharf Road, Paddington\"],[\"Belgrove Street , King's Cross\"],[\"Empire Square, The Borough\"],[\"Putney Pier, Wandsworth\"],[\"Lower Thames Street, Monument\"],[\"Northington Street , Holborn\"],[\"Tate Modern, Bankside\"],[\"Lambeth North Station, Waterloo\"],[\"Handyside Street, King's Cross\"],[\"Red Lion Square, Holborn\"],[\"Lavington Street, Bankside\"],[\"Page Street, Westminster\"],[\"Driffield Road, Old Ford\"],[\"Green Park Station, Mayfair\"],[\"Cromer Street, Bloomsbury\"],[\"Albany Street, The Regent's Park\"],[\"Belgrove Street , King's Cross\"],[\"Sedding Street, Sloane Square\"],[\"Marylebone Lane, Marylebone\"],[\"Roscoe Street, St. Luke's\"],[\"Regent's Row , Haggerston \"],[\"Geraldine Street, Elephant & Castle\"],[\"Clapham Road, Lingham Street, Stockwell\"],[\"Belvedere Road 1, South Bank\"],[\"Golden Lane, Barbican\"],[\"Sedding Street, Sloane Square\"],[\"Green Park Station, Mayfair\"],[\"Windsor Terrace, Hoxton\"],[\"Lavington Street, Bankside\"],[\"Embankment (Savoy), Strand\"],[\"Putney Pier, Wandsworth\"],[\"North Wharf Road, Paddington\"],[\"Red Lion Square, Holborn\"],[\"Tate Modern, Bankside\"],[\"Curlew Street, Shad Thames\"],[\"Clarges Street, Mayfair\"],[\"Belgrove Street , King's Cross\"],[\"Taviton Street, Bloomsbury\"],[\"Montpelier Street, Knightsbridge\"],[\"Ford Road, Old Ford\"],[\"Old Montague Street, Whitechapel\"],[\"Green Park Station, Mayfair\"],[\"Geraldine Street, Elephant & Castle\"],[\"Tooley Street, Bermondsey\"],[\"Clarges Street, Mayfair\"],[\"Belvedere Road 2, South Bank\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Hatton Wall, Holborn\"],[\"Belgrave Road, Victoria\"],[\"Baylis Road, Waterloo\"],[\"Serpentine Car Park, Hyde Park\"],[\"Here East South, Queen Elizabeth Olympic Park\"],[\"Belvedere Road 1, South Bank\"],[\"Crawford Street, Marylebone\"],[\"Royal Avenue 2, Chelsea\"],[\"Drury Lane, Covent Garden\"],[\"Clarges Street, Mayfair\"],[\"Shoreditch High Street, Shoreditch\"],[\"Lavington Street, Bankside\"],[\"Red Lion Square, Holborn\"],[\"Godliman Street, St. Paul's\"],[\"De Vere Gardens, Kensington\"],[\"Bevington Road West, North Kensington\"],[\"Hansard Mews, Holland Park\"],[\"Lavington Street, Bankside\"],[\"Montpelier Street, Knightsbridge\"],[\"Windsor Terrace, Hoxton\"],[\"Malet Street, Bloomsbury\"],[\"New Globe Walk, Bankside\"],[\"Wellington Row, Bethnal Green\"],[\"Marylebone Lane, Marylebone\"],[\"Charlbert Street, St. John's Wood\"],[\"Golden Lane, Barbican\"],[\"Shoreditch High Street, Shoreditch\"],[\"Belgrave Road, Victoria\"],[\"St. John's Wood Road, St. John's Wood\"],[\"New North Road 2, Hoxton\"],[\"Driffield Road, Old Ford\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Sopwith Way, Battersea Park\"],[\"Ladbroke Grove Central, Ladbroke Grove\"],[\"Hurlingham Park, Parsons Green\"],[\"Regent's Row , Haggerston \"],[\"Queen's Gate (North), Kensington\"],[\"Montpelier Street, Knightsbridge\"],[\"Belgrove Street , King's Cross\"],[\"Regent's Row , Haggerston \"],[\"Tate Modern, Bankside\"],[\"Great Russell Street, Bloomsbury\"],[\"Riverlight South, Nine Elms\"],[\"Smith Square, Westminster\"],[\"Handyside Street, King's Cross\"],[\"Phillimore Gardens, Kensington\"],[\"Albany Street, The Regent's Park\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Red Lion Square, Holborn\"],[\"Kensington Olympia Station, Olympia\"],[\"Curlew Street, Shad Thames\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Scala Street, Fitzrovia\"],[\"Percival Street, Finsbury\"],[\"Pindar Street, Liverpool Street\"],[\"Lavington Street, Bankside\"],[\"Kingsway, Covent Garden\"],[\"Tallis Street, Temple\"],[\"Rathbone Street, Fitzrovia\"],[\"Royal Avenue 2, Chelsea\"],[\"Doric Way , Somers Town\"],[\"Antill Road, Mile End\"],[\"Christopher Street, Liverpool Street\"],[\"Tooley Street, Bermondsey\"],[\"Red Lion Square, Holborn\"],[\"Battersea Power Station, Battersea Park\"],[\"Lavington Street, Bankside\"],[\"Selby Street, Whitechapel\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Clinton Road, Mile End\"],[\"Cromer Street, Bloomsbury\"],[\"Good's Way, King's Cross\"],[\"Lansdowne Walk, Ladbroke Grove\"],[\"Riverlight South, Nine Elms\"],[\"Brunswick Square, Bloomsbury\"],[\"Doric Way , Somers Town\"],[\"Nesham Street, Wapping\"],[\"Albert Gate, Hyde Park\"],[\"St. Mary Axe, Aldgate\"],[\"Belgrove Street , King's Cross\"],[\"Hampstead Road (Cartmel), Euston\"],[\"Gloucester Avenue, Camden Town\"],[\"Tooley Street, Bermondsey\"],[\"Curlew Street, Shad Thames\"],[\"Kensington Gore, Knightsbridge\"],[\"Drury Lane, Covent Garden\"],[\"Wellington Road, St. John's Wood\"],[\"Drury Lane, Covent Garden\"],[\"Scala Street, Fitzrovia\"],[\"Belgrove Street , King's Cross\"],[\"Sedding Street, Sloane Square\"],[\"Curzon Street, Mayfair\"],[\"East Road, Hoxton\"],[\"Black Lion Gate, Kensington Gardens\"],[\"British Museum, Bloomsbury\"],[\"Windsor Terrace, Hoxton\"],[\"Barbican Centre, Barbican\"],[\"West Smithfield Rotunda, Farringdon\"],[\"Belgrove Street , King's Cross\"],[\"Salmon Lane, Limehouse\"],[\"Embankment (Savoy), Strand\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Addison Road, Holland Park\"],[\"Birkenhead Street, King's Cross\"],[\"Marylebone Lane, Marylebone\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Phillimore Gardens, Kensington\"],[\"Barbican Centre, Barbican\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Albert Gate, Hyde Park\"],[\"Portman Square, Marylebone\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Doric Way , Somers Town\"],[\"Driffield Road, Old Ford\"],[\"Barbican Centre, Barbican\"],[\"Shoreditch High Street, Shoreditch\"],[\"Windsor Terrace, Hoxton\"],[\"Leonard Circus , Shoreditch\"],[\"Blackfriars Road, Southwark\"],[\"Somerset House, Strand\"],[\"Lambeth Palace Road, Waterloo\"],[\"Winsland Street, Paddington\"],[\"Belgrove Street , King's Cross\"],[\"Kensington Church Street, Kensington\"],[\"Black Prince Road, Vauxhall\"],[\"Victoria Rise, Clapham Common\"],[\"Victoria Rise, Clapham Common\"],[\"Fanshaw Street, Hoxton\"],[\"Tate Modern, Bankside\"],[\"St Mary's Hospital, Paddington\"],[\"Battersea Power Station, Battersea Park\"],[\"British Museum, Bloomsbury\"],[\"Tysoe Street, Clerkenwell\"],[\"Belgrave Road, Victoria\"],[\"Sandilands Road, Walham Green\"],[\"Harford Street, Mile End\"],[\"Ford Road, Old Ford\"],[\"Gloucester Avenue, Camden Town\"],[\"Rifle Place, Avondale\"],[\"Stephendale Road, Sands End\"],[\"Watney Market, Stepney\"],[\"Albert Gate, Hyde Park\"],[\"Somerset House, Strand\"],[\"Penywern Road, Earl's Court\"],[\"St. George's Square, Pimlico\"],[\"Goldsmith's Row, Haggerston\"],[\"Good's Way, King's Cross\"],[\"Bolsover Street, Fitzrovia\"],[\"Bermondsey Street, Bermondsey\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Portman Square, Marylebone\"],[\"Regent's Row , Haggerston\"],[\"Abyssinia Close, Clapham Junction\"],[\"North Wharf Road, Paddington\"],[\"Knaresborough Place, Earl's Court\"],[\"Pritchard's Road, Bethnal Green\"],[\"Curlew Street, Shad Thames\"],[\"Binfield Road, Stockwell\"],[\"Blackfriars Road, Southwark\"],[\"Albert Gate, Hyde Park\"],[\"Broadcasting House, Marylebone\"],[\"Baylis Road, Waterloo\"],[\"Bancroft Road, Bethnal Green\"],[\"London Zoo,  The Regent's Park\"],[\"Monier Road, Hackney Wick\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Salmon Lane, Limehouse\"],[\"New Fetter Lane, Holborn\"],[\"Curlew Street, Shad Thames\"],[\"Pritchard's Road, Bethnal Green\"],[\"St. George's Square, Pimlico\"],[\"Brunswick Square, Bloomsbury\"],[\"Great Russell Street, Bloomsbury\"],[\"Belgrove Street , King's Cross\"],[\"Drummond Street , Euston\"],[\"Roscoe Street, St. Luke's\"],[\"Northington Street , Holborn\"],[\"Curlew Street, Shad Thames\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Euston Square Gardens, Euston\"],[\"Finsbury Library , Finsbury\"],[\"Claverton Street, Pimlico\"],[\"Broadwick Street, Soho\"],[\"Westminster Pier, Westminster\"],[\"Old Montague Street, Whitechapel\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Good's Way, King's Cross\"],[\"Bedford Way, Bloomsbury\"],[\"Driffield Road, Old Ford\"],[\"Hatton Wall, Holborn\"],[\"Lambeth North Station, Waterloo\"],[\"Southwick Street, Paddington\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Bevington Road West, North Kensington\"],[\"Somerset House, Strand\"],[\"Red Lion Square, Holborn\"],[\"Belvedere Road, South Bank\"],[\"Houghton Street, Strand\"],[\"Phillimore Gardens, Kensington\"],[\"King Edward Street, St Pauls\"],[\"Broadwick Street, Soho\"],[\"Hoxton Station, Hoxton\"],[\"Doric Way , Somers Town\"],[\"Shoreditch High Street, Shoreditch\"],[\"Monier Road, Hackney Wick\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Northington Street , Holborn\"],[\"Roscoe Street, St. Luke's\"],[\"Old Montague Street, Whitechapel\"],[\"Tooley Street, Bermondsey\"],[\"Queen Street 2, Bank\"],[\"St. Mary Axe, Aldgate\"],[\"Page Street, Westminster\"],[\"Windsor Terrace, Hoxton\"],[\"Shoreditch High Street, Shoreditch\"],[\"Queen's Gate (North), Kensington\"],[\"Gloucester Avenue, Camden Town\"],[\"Green Park Station, Mayfair\"],[\"Tooley Street, Bermondsey\"],[\"Regent's Row , Haggerston \"],[\"Princes Square, Bayswater\"],[\"De Vere Gardens, Kensington\"],[\"Vincent Square, Westminster\"],[\"Wellington Row, Bethnal Green\"],[\"Good's Way, King's Cross\"],[\"Westminster Pier, Westminster\"],[\"Shoreditch High Street, Shoreditch\"],[\"Percival Street, Finsbury\"],[\"Regent's Row , Haggerston\"],[\"Hatton Wall, Holborn\"],[\"Riverlight South, Nine Elms\"],[\"Belvedere Road 2, South Bank\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Southwark Street, Bankside\"],[\"Newgate Street , St. Paul's\"],[\"Portman Square, Marylebone\"],[\"Abingdon Villas, Kensington\"],[\"Albany Street, The Regent's Park\"],[\"Queen's Gate (North), Kensington\"],[\"Ossulston Street, Somers Town\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Winsland Street, Paddington\"],[\"Lavington Street, Bankside\"],[\"Godliman Street, St. Paul's\"],[\"Golden Lane, Barbican\"],[\"Great Russell Street, Bloomsbury\"],[\"Ossulston Street, Somers Town\"],[\"Binfield Road, Stockwell\"],[\"Knaresborough Place, Earl's Court\"],[\"Abingdon Villas, Kensington\"],[\"Tate Modern, Bankside\"],[\"Claverton Street, Pimlico\"],[\"Handyside Street, King's Cross\"],[\"Clinton Road, Mile End\"],[\"Wellington Row, Bethnal Green\"],[\"St. George's Square, Pimlico\"],[\"Red Lion Square, Holborn\"],[\"Barbican Centre, Barbican\"],[\"Battersea Power Station, Battersea Park\"],[\"Barbican Centre, Barbican\"],[\"Bourne Street, Belgravia\"],[\"Southwick Street, Paddington\"],[\"Houndsditch, Aldgate\"],[\"Green Park Station, Mayfair\"],[\"Regency Street, Westminster\"],[\"St. George's Square, Pimlico\"],[\"Baylis Road, Waterloo\"],[\"Marylebone Lane, Marylebone\"],[\"Tysoe Street, Clerkenwell\"],[\"Royal London Hospital, Whitechapel\"],[\"Christopher Street, Liverpool Street\"],[\"Black Prince Road, Vauxhall\"],[\"Park Street, Bankside\"],[\"Bruton Street, Mayfair\"],[\"Birkenhead Street, King's Cross\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Sandilands Road, Walham Green\"],[\"Stratford Station, Stratford\"],[\"Manresa Road, Chelsea\"],[\"Salmon Lane, Limehouse\"],[\"Clapham Common North Side, Clapham Common\"],[\"Hatton Wall, Holborn\"],[\"Serpentine Car Park, Hyde Park\"],[\"Godliman Street, St. Paul's\"],[\"Charlbert Street, St. John's Wood\"],[\"Old Montague Street, Whitechapel\"],[\"Curlew Street, Shad Thames\"],[\"Abbotsbury Road, Holland Park\"],[\"New Globe Walk, Bankside\"],[\"Sandilands Road, Walham Green\"],[\"Wellington Row, Bethnal Green\"],[\"Westminster Pier, Westminster\"],[\"Crawford Street, Marylebone\"],[\"Winsland Street, Paddington\"],[\"Doric Way , Somers Town\"],[\"Kensington Olympia Station, Olympia\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Albert Gate, Hyde Park\"],[\"Wellington Row, Bethnal Green\"],[\"Finsbury Library , Finsbury\"],[\"Belvedere Road 2, South Bank\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Phillimore Gardens, Kensington\"],[\"Albert Gate, Hyde Park\"],[\"Charlbert Street, St. John's Wood\"],[\"King Edward Street, St Pauls\"],[\"New Globe Walk, Bankside\"],[\"Baylis Road, Waterloo\"],[\"Bevington Road West, North Kensington\"],[\"Lambeth Palace Road, Waterloo\"],[\"Queensbridge Road, Haggerston\"],[\"Southwark Street, Bankside\"],[\"St. Chad's Street, King's Cross\"],[\"Somerset House, Strand\"],[\"Queensbridge Road, Haggerston\"],[\"Belvedere Road 1, South Bank\"],[\"Page Street, Westminster\"],[\"Somerset House, Strand\"],[\"Bancroft Road, Bethnal Green\"],[\"Hoxton Station, Hoxton\"],[\"London Zoo,  The Regent's Park\"],[\"Riverlight South, Nine Elms\"],[\"Belvedere Road 1, South Bank\"],[\"Bolsover Street, Fitzrovia\"],[\"Monier Road, Hackney Wick\"],[\"Doric Way , Somers Town\"],[\"Bouverie Street, Temple\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Tallis Street, Temple\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Ford Road, Old Ford\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Charlbert Street, St. John's Wood\"],[\"Binfield Road, Stockwell\"],[\"Belgrove Street , King's Cross\"],[\"Regency Street, Westminster\"],[\"Empire Square, The Borough\"],[\"Bruton Street, Mayfair\"],[\"Montpelier Street, Knightsbridge\"],[\"Stratford Station, Stratford\"],[\"Montpelier Street, Knightsbridge\"],[\"Selby Street, Whitechapel\"],[\"Fanshaw Street, Hoxton\"],[\"Belgrove Street , King's Cross\"],[\"Great Russell Street, Bloomsbury\"],[\"Leonard Circus , Shoreditch\"],[\"Park Road (Baker Street), The Regent's Park\"],[\"Albert Gate, Hyde Park\"],[\"Northington Street , Holborn\"],[\"River Street , Clerkenwell\"],[\"Rathbone Street, Fitzrovia\"],[\"Fanshaw Street, Hoxton\"],[\"Belgrove Street , King's Cross\"],[\"St. John's Wood Road, St. John's Wood\"],[\"St Mary's Hospital, Paddington\"],[\"Blackfriars Road, Southwark\"],[\"Phillimore Gardens, Kensington\"],[\"Wellington Row, Bethnal Green\"],[\"Royal London Hospital, Whitechapel\"],[\"Albert Gate, Hyde Park\"],[\"Elizabeth Bridge, Victoria\"],[\"Baylis Road, Waterloo\"],[\"Page Street, Westminster\"],[\"Green Park Station, Mayfair\"],[\"Parsons Green Station, Parsons Green\"],[\"Great Russell Street, Bloomsbury\"],[\"Old Montague Street, Whitechapel\"],[\"Goldsmith's Row, Haggerston\"],[\"Victory Place, Walworth\"],[\"Euston Square Gardens, Euston\"],[\"Lancaster Gate , Bayswater\"],[\"Belgrove Street , King's Cross\"],[\"Sedding Street, Sloane Square\"],[\"Empire Square, The Borough\"],[\"Pritchard's Road, Bethnal Green\"],[\"Southwick Street, Paddington\"],[\"Albert Gate, Hyde Park\"],[\"Harford Street, Mile End\"],[\"Lambeth Palace Road, Waterloo\"],[\"Marylebone Lane, Marylebone\"],[\"East Road, Hoxton\"],[\"Malet Street, Bloomsbury\"],[\"Christopher Street, Liverpool Street\"],[\"Pritchard's Road, Bethnal Green\"],[\"Bolsover Street, Fitzrovia\"],[\"Melton Street, Euston\"],[\"Page Street, Westminster\"],[\"Stratford Station, Stratford\"],[\"Southwark Street, Bankside\"],[\"Aberfeldy Street, Poplar\"],[\"Import Dock, Canary Wharf\"],[\"Geraldine Street, Elephant & Castle\"],[\"Bouverie Street, Temple\"],[\"Kings Gate House, Westminster\"],[\"North Wharf Road, Paddington\"],[\"Belgrove Street , King's Cross\"],[\"Parsons Green Station, Parsons Green\"],[\"Selby Street, Whitechapel\"],[\"Tooley Street, Bermondsey\"],[\"Imperial Wharf Station, Sands End\"],[\"Hatton Wall, Holborn\"],[\"Westferry Circus, Canary Wharf\"],[\"Nesham Street, Wapping\"],[\"Blackfriars Road, Southwark\"],[\"Southwark Street, Bankside\"],[\"Phillimore Gardens, Kensington\"],[\"Tate Modern, Bankside\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Watney Street, Shadwell\"],[\"Vincent Square, Westminster\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Tooley Street, Bermondsey\"],[\"Olympia Way, Olympia\"],[\"Shoreditch High Street, Shoreditch\"],[\"Drury Lane, Covent Garden\"],[\"Commercial Street, Shoreditch\"],[\"Maida Vale, Maida Vale\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Albert Gate, Hyde Park\"],[\"Belvedere Road 2, South Bank\"],[\"Fanshaw Street, Hoxton\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Black Prince Road, Vauxhall\"],[\"Imperial Wharf Station, Sands End\"],[\"Bourne Street, Belgravia\"],[\"Clapham Common North Side, Clapham Common\"],[\"Westferry Circus, Canary Wharf\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Good's Way, King's Cross\"],[\"Manresa Road, Chelsea\"],[\"London Zoo,  The Regent's Park\"],[\"Long Lane , Bermondsey\"],[\"Halford Road, West Kensington\"],[\"Southwick Street, Paddington\"],[\"Sopwith Way, Battersea Park\"],[\"Hurlingham Park, Parsons Green\"],[\"Binfield Road, Stockwell\"],[\"The Metropolitan, Portobello\"],[\"Broadwick Street, Soho\"],[\"Imperial Wharf Station, Sands End\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Central House, Aldgate\"],[\"Gloucester Avenue, Camden Town\"],[\"Belgrove Street , King's Cross\"],[\"Westminster Pier, Westminster\"],[\"Green Park Station, Mayfair\"],[\"Barbican Centre, Barbican\"],[\"Bourne Street, Belgravia\"],[\"Westferry Circus, Canary Wharf\"],[\"Gauden Road, Clapham\"],[\"Albert Gate, Hyde Park\"],[\"Serpentine Car Park, Hyde Park\"],[\"Claverton Street, Pimlico\"],[\"Leonard Circus , Shoreditch\"],[\"Drury Lane, Covent Garden\"],[\"Regent's Row , Haggerston \"],[\"King Edward Street, St Pauls\"],[\"Central House, Aldgate\"],[\"Broadwick Street, Soho\"],[\"Rifle Place, Avondale\"],[\"Southwark Street, Bankside\"],[\"Nesham Street, Wapping\"],[\"Clinton Road, Mile End\"],[\"Good's Way, King's Cross\"],[\"Royal London Hospital, Whitechapel\"],[\"Simpson Street, Clapham Junction\"],[\"Knaresborough Place, Earl's Court\"],[\"Imperial Wharf Station, Sands End\"],[\"South Audley Street, Mayfair\"],[\"Stratford Station, Stratford\"],[\"Bouverie Street, Temple\"],[\"Royal Avenue 2, Chelsea\"],[\"Driffield Road, Old Ford\"],[\"Bancroft Road, Bethnal Green\"],[\"Somerset House, Strand\"],[\"Belgrove Street , King's Cross\"],[\"De Vere Gardens, Kensington\"],[\"Queensbridge Road, Haggerston\"],[\"Lambeth Palace Road, Waterloo\"],[\"British Museum, Bloomsbury\"],[\"Sun Street, Liverpool Street\"],[\"William IV Street, Strand\"],[\"Queen's Gate (North), Kensington\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Malet Street, Bloomsbury\"],[\"Kensington Church Street, Kensington\"],[\"Pindar Street, Liverpool Street\"],[\"Baylis Road, Waterloo\"],[\"St. Chad's Street, King's Cross\"],[\"Hartington Road, Stockwell\"],[\"New Fetter Lane, Holborn\"],[\"Northington Street , Holborn\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Roscoe Street, St. Luke's\"],[\"New Fetter Lane, Holborn\"],[\"Queen's Gate (North), Kensington\"],[\"Belgrove Street , King's Cross\"],[\"Belgrove Street , King's Cross\"],[\"Godliman Street, St. Paul's\"],[\"Birkenhead Street, King's Cross\"],[\"Central House, Aldgate\"],[\"Belgrove Street , King's Cross\"],[\"Sun Street, Liverpool Street\"],[\"Godliman Street, St. Paul's\"],[\"Tooley Street, Bermondsey\"],[\"Warwick Road, Olympia\"],[\"Taviton Street, Bloomsbury\"],[\"Import Dock, Canary Wharf\"],[\"Tallis Street, Temple\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Regent's Row , Haggerston \"],[\"Bruton Street, Mayfair\"],[\"Drury Lane, Covent Garden\"],[\"Central House, Aldgate\"],[\"Crawford Street, Marylebone\"],[\"Baylis Road, Waterloo\"],[\"Albert Gate, Hyde Park\"],[\"Barbican Centre, Barbican\"],[\"Coram Street, Bloomsbury\"],[\"Southwick Street, Paddington\"],[\"Bolsover Street, Fitzrovia\"],[\"Tysoe Street, Clerkenwell\"],[\"Tate Modern, Bankside\"],[\"Harford Street, Mile End\"],[\"Drummond Street , Euston\"],[\"Elizabeth Bridge, Victoria\"],[\"Hardwick Street, Clerkenwell\"],[\"Malet Street, Bloomsbury\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Belgrove Street , King's Cross\"],[\"Westminster University, Marylebone\"],[\"Broadwick Street, Soho\"],[\"Phillimore Gardens, Kensington\"],[\"Somerset House, Strand\"],[\"Shoreditch High Street, Shoreditch\"],[\"Geraldine Street, Elephant & Castle\"],[\"Claverton Street, Pimlico\"],[\"Doric Way , Somers Town\"],[\"Albert Gate, Hyde Park\"],[\"Pritchard's Road, Bethnal Green\"],[\"Serpentine Car Park, Hyde Park\"],[\"New Globe Walk, Bankside\"],[\"Empire Square, The Borough\"],[\"Cromer Street, Bloomsbury\"],[\"Bouverie Street, Temple\"],[\"Salmon Lane, Limehouse\"],[\"Malet Street, Bloomsbury\"],[\"Binfield Road, Stockwell\"],[\"London Zoo,  The Regent's Park\"],[\"New Fetter Lane, Holborn\"],[\"Fanshaw Street, Hoxton\"],[\"Embankment (Savoy), Strand\"],[\"Kennington Lane Tesco, Vauxhall\"],[\"Drummond Street , Euston\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Abyssinia Close, Clapham Junction\"],[\"Windsor Terrace, Hoxton\"],[\"Green Park Station, Mayfair\"],[\"Clapham Common North Side, Clapham Common\"],[\"Albert Gate, Hyde Park\"],[\"Phillimore Gardens, Kensington\"],[\"Westminster Pier, Westminster\"],[\"Somerset House, Strand\"],[\"Binfield Road, Stockwell\"],[\"Swan Street, The Borough\"],[\"Broadcasting House, Marylebone\"],[\"Hollybush Gardens, Bethnal Green\"],[\"London Street, Paddington\"],[\"Hereford Road, Bayswater\"],[\"Imperial Wharf Station, Sands End\"],[\"Somerset House, Strand\"],[\"Albert Gate, Hyde Park\"],[\"Shoreditch High Street, Shoreditch\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Royal Avenue 2, Chelsea\"],[\"Crawford Street, Marylebone\"],[\"Belgrave Road, Victoria\"],[\"Regent's Row , Haggerston \"],[\"Clinton Road, Mile End\"],[\"Import Dock, Canary Wharf\"],[\"Lower Thames Street, Monument\"],[\"Drury Lane, Covent Garden\"],[\"Serpentine Car Park, Hyde Park\"],[\"Montgomery Square, Canary Wharf\"],[\"Wellington Row, Bethnal Green\"],[\"Royal Avenue 2, Chelsea\"],[\"Albert Gate, Hyde Park\"],[\"Nesham Street, Wapping\"],[\"Tallis Street, Temple\"],[\"Somerset House, Strand\"],[\"St. Mary Axe, Aldgate\"],[\"Doric Way , Somers Town\"],[\"East Road, Hoxton\"],[\"Battersea Church Road, Battersea\"],[\"British Museum, Bloomsbury\"],[\"Birkenhead Street, King's Cross\"],[\"Leonard Circus , Shoreditch\"],[\"Belvedere Road, South Bank\"],[\"Winsland Street, Paddington\"],[\"Bourne Street, Belgravia\"],[\"Red Lion Square, Holborn\"],[\"Southwick Street, Paddington\"],[\"Clinton Road, Mile End\"],[\"Monier Road, Hackney Wick\"],[\"Malet Street, Bloomsbury\"],[\"Blythe Road, Olympia\"],[\"Warwick Road, Olympia\"],[\"Coram Street, Bloomsbury\"],[\"Binfield Road, Stockwell\"],[\"Ossulston Street, Somers Town\"],[\"Regent's Row , Haggerston \"],[\"South Audley Street, Mayfair\"],[\"British Museum, Bloomsbury\"],[\"One Tower Bridge, Bermondsey\"],[\"Baylis Road, Waterloo\"],[\"Regent's Row , Haggerston \"],[\"Claverton Street, Pimlico\"],[\"London Zoo,  The Regent's Park\"],[\"Roscoe Street, St. Luke's\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Leonard Circus , Shoreditch\"],[\"Imperial Wharf Station, Sands End\"],[\"Crawford Street, Marylebone\"],[\"Arlington Road, Camden Town\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Tysoe Street, Clerkenwell\"],[\"Godliman Street, St. Paul's\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Leonard Circus , Shoreditch\"],[\"Sedding Street, Sloane Square\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Gloucester Avenue, Camden Town\"],[\"Clinton Road, Mile End\"],[\"Brunswick Square, Bloomsbury\"],[\"Lower Thames Street, Monument\"],[\"Tysoe Street, Clerkenwell\"],[\"Teviot Street, Poplar\"],[\"Swan Street, The Borough\"],[\"Bell Lane, Liverpool Street\"],[\"Monier Road, Hackney Wick\"],[\"Doric Way , Somers Town\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"De Vere Gardens, Kensington\"],[\"River Street , Clerkenwell\"],[\"Brunswick Square, Bloomsbury\"],[\"Finsbury Library , Finsbury\"],[\"Handyside Street, King's Cross\"],[\"Queen's Gate (North), Kensington\"],[\"Abbotsbury Road, Holland Park\"],[\"Curlew Street, Shad Thames\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Serpentine Car Park, Hyde Park\"],[\"Albany Street, The Regent's Park\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Good's Way, King's Cross\"],[\"Queensbridge Road, Haggerston\"],[\"Tooley Street, Bermondsey\"],[\"Drummond Street , Euston\"],[\"Roscoe Street, St. Luke's\"],[\"Putney Pier, Wandsworth\"],[\"Ford Road, Old Ford\"],[\"Gwendwr Road, West Kensington\"],[\"Great Russell Street, Bloomsbury\"],[\"Malet Street, Bloomsbury\"],[\"Bancroft Road, Bethnal Green\"],[\"Watney Market, Stepney\"],[\"Lancaster Gate , Bayswater\"],[\"Putney Pier, Wandsworth\"],[\"Belgrove Street , King's Cross\"],[\"Smith Square, Westminster\"],[\"Shoreditch High Street, Shoreditch\"],[\"Regent's Row , Haggerston \"],[\"New Globe Walk, Bankside\"],[\"Doric Way , Somers Town\"],[\"East India DLR, Blackwall\"],[\"St. Mary Axe, Aldgate\"],[\"Gauden Road, Clapham\"],[\"Royal London Hospital, Whitechapel\"],[\"Albert Gate, Hyde Park\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Good's Way, King's Cross\"],[\"Arlington Road, Camden Town\"],[\"Westminster University, Marylebone\"],[\"Lancaster Drive, Blackwall\"],[\"British Museum, Bloomsbury\"],[\"Royal Avenue 2, Chelsea\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Baylis Road, Waterloo\"],[\"Albert Square, Stockwell\"],[\"Westferry Circus, Canary Wharf\"],[\"Bouverie Street, Temple\"],[\"Embankment (Savoy), Strand\"],[\"Geraldine Street, Elephant & Castle\"],[\"Albany Street, The Regent's Park\"],[\"One Tower Bridge, Bermondsey\"],[\"Belgrove Street , King's Cross\"],[\"Royal Avenue 2, Chelsea\"],[\"Belgrave Road, Victoria\"],[\"Tooley Street, Bermondsey\"],[\"Bourne Street, Belgravia\"],[\"Smith Square, Westminster\"],[\"Golden Lane, Barbican\"],[\"Ampton Street , Clerkenwell\"],[\"Kensington Church Street, Kensington\"],[\"Commercial Street, Shoreditch\"],[\"Halford Road, West Kensington\"],[\"Percival Street, Finsbury\"],[\"Portman Square, Marylebone\"],[\"Imperial Wharf Station, Sands End\"],[\"Regent's Row , Haggerston \"],[\"Rathbone Street, Fitzrovia\"],[\"Euston Square Gardens, Euston\"],[\"Tysoe Street, Clerkenwell\"],[\"Bury Place, Holborn\"],[\"Belvedere Road 2, South Bank\"],[\"Belgrove Street , King's Cross\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Empire Square, The Borough\"],[\"Southwick Street, Paddington\"],[\"Black Prince Road, Vauxhall\"],[\"Taviton Street, Bloomsbury\"],[\"Belgrove Street , King's Cross\"],[\"Clinton Road, Mile End\"],[\"East Road, Hoxton\"],[\"Gauden Road, Clapham\"],[\"Belgrave Road, Victoria\"],[\"Brunswick Square, Bloomsbury\"],[\"Heron Quays DLR, Canary Wharf\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Christopher Street, Liverpool Street\"],[\"Lambeth Palace Road, Waterloo\"],[\"Imperial Wharf Station, Sands End\"],[\"New Spring Gardens Walk, Vauxhall\"],[\"Southwick Street, Paddington\"],[\"Southwick Street, Paddington\"],[\"Northington Street , Holborn\"],[\"Westferry Circus, Canary Wharf\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Lancaster Gate , Bayswater\"],[\"Harrington Square 1, Camden Town\"],[\"Tallis Street, Temple\"],[\"Drury Lane, Covent Garden\"],[\"St Mary's Hospital, Paddington\"],[\"Lavington Street, Bankside\"],[\"Royal London Hospital, Whitechapel\"],[\"Claverton Street, Pimlico\"],[\"Victory place, Walworth\"],[\"Albert Gate, Hyde Park\"],[\"Park Street, Bankside\"],[\"Northington Street , Holborn\"],[\"Tooley Street, Bermondsey\"],[\"Regent's Row , Haggerston \"],[\"Bedford Way, Bloomsbury\"],[\"Royal London Hospital, Whitechapel\"],[\"Bolsover Street, Fitzrovia\"],[\"Riverlight South, Nine Elms\"],[\"Royal London Hospital, Whitechapel\"],[\"Bolsover Street, Fitzrovia\"],[\"Battersea Power Station, Battersea Park\"],[\"Drury Lane, Covent Garden\"],[\"Goldsmith's Row, Haggerston\"],[\"Goldsmith's Row, Haggerston\"],[\"Bury Place, Holborn\"],[\"Putney Pier, Wandsworth\"],[\"Preston's Road, Cubitt Town\"],[\"Nesham Street, Wapping\"],[\"Regent's Row , Haggerston \"],[\"Black Lion Gate, Kensington Gardens\"],[\"Nesham Street, Wapping\"],[\"Halford Road, West Kensington\"],[\"Commercial Street, Shoreditch\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Belgrove Street , King's Cross\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Birkenhead Street, King's Cross\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Phillimore Gardens, Kensington\"],[\"Broadcasting House, Marylebone\"],[\"Albert Gate, Hyde Park\"],[\"Tooley Street, Bermondsey\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Bolsover Street, Fitzrovia\"],[\"Lansdowne Walk, Ladbroke Grove\"],[\"Broadwick Street, Soho\"],[\"Drury Lane, Covent Garden\"],[\"Malet Street, Bloomsbury\"],[\"Bruton Street, Mayfair\"],[\"New Fetter Lane, Holborn\"],[\"Taviton Street, Bloomsbury\"],[\"Curlew Street, Shad Thames\"],[\"Embankment (Savoy), Strand\"],[\"Stratford Station, Stratford\"],[\"Broadcasting House, Marylebone\"],[\"Belgrave Road, Victoria\"],[\"Brunswick Square, Bloomsbury\"],[\"Victoria Rise, Clapham Common\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Pritchard's Road, Bethnal Green\"],[\"Leonard Circus , Shoreditch\"],[\"Serpentine Car Park, Hyde Park\"],[\"Royal Avenue 2, Chelsea\"],[\"Langdon Park, Poplar\"],[\"Belgrave Road, Victoria\"],[\"St. Mary Axe, Aldgate\"],[\"Doric Way , Somers Town\"],[\"Belgrove Street , King's Cross\"],[\"Golden Lane, Barbican\"],[\"Birkenhead Street, King's Cross\"],[\"Curzon Street, Mayfair\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Tysoe Street, Clerkenwell\"],[\"Belgrove Street , King's Cross\"],[\"Kensington Gore, Knightsbridge\"],[\"Pancras Road, King's Cross\"],[\"Queen's Gate (North), Kensington\"],[\"Aldersgate Street, Barbican\"],[\"Sopwith Way, Battersea Park\"],[\"Pritchard's Road, Bethnal Green\"],[\"Belgrove Street , King's Cross\"],[\"Page Street, Westminster\"],[\"Belvedere Road 2, South Bank\"],[\"Gwendwr Road, West Kensington\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"East Road, Hoxton\"],[\"Green Park Station, Mayfair\"],[\"Sandilands Road, Walham Green\"],[\"St. George's Square, Pimlico\"],[\"Goldsmith's Row, Haggerston\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Doric Way , Somers Town\"],[\"Boston Place, Marylebone\"],[\"Royal Avenue 2, Chelsea\"],[\"Imperial Wharf Station, Sands End\"],[\"Serpentine Car Park, Hyde Park\"],[\"Gwendwr Road, West Kensington\"],[\"Good's Way, King's Cross\"],[\"Boston Place, Marylebone\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Bancroft Road, Bethnal Green\"],[\"Embankment (Savoy), Strand\"],[\"Harford Street, Mile End\"],[\"Baylis Road, Waterloo\"],[\"Teviot Street, Poplar\"],[\"King Edward Street, St Pauls\"],[\"Wellington Row, Bethnal Green\"],[\"Sun Street, Liverpool Street\"],[\"Good's Way, King's Cross\"],[\"Rectory Square, Stepney\"],[\"De Vere Gardens, Kensington\"],[\"Binfield Road, Stockwell\"],[\"Nesham Street, Wapping\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Great Russell Street, Bloomsbury\"],[\"Handyside Street, King's Cross\"],[\"Sopwith Way, Battersea Park\"],[\"Wellington Row, Bethnal Green\"],[\"Tysoe Street, Clerkenwell\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"St. George's Square, Pimlico\"],[\"Hoxton Station, Hoxton\"],[\"New Globe Walk, Bankside\"],[\"Montgomery Square, Canary Wharf\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Tate Modern, Bankside\"],[\"Broadwick Street, Soho\"],[\"Halford Road, West Kensington\"],[\"Lancaster Gate , Bayswater\"],[\"Clinton Road, Mile End\"],[\"Finsbury Library , Finsbury\"],[\"Little Brook Green, Brook Green\"],[\"New Spring Gardens Walk, Vauxhall\"],[\"Great Russell Street, Bloomsbury\"],[\"Page Street, Westminster\"],[\"Ford Road, Old Ford\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Lancaster Gate , Bayswater\"],[\"Shoreditch High Street, Shoreditch\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Princes Square, Bayswater\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Green Park Station, Mayfair\"],[\"Great Russell Street, Bloomsbury\"],[\"Hatton Wall, Holborn\"],[\"Central House, Aldgate\"],[\"Scala Street, Fitzrovia\"],[\"Hatton Wall, Holborn\"],[\"St. Chad's Street, King's Cross\"],[\"Claverton Street, Pimlico\"],[\"Twig Folly Bridge, Mile End\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"North Wharf Road, Paddington\"],[\"Westfield Ariel Way, White City\"],[\"Ampton Street , Clerkenwell\"],[\"Abingdon Villas, Kensington\"],[\"St. Chad's Street, King's Cross\"],[\"Tooley Street, Bermondsey\"],[\"Godliman Street, St. Paul's\"],[\"Great Russell Street, Bloomsbury\"],[\"Claverton Street, Pimlico\"],[\"British Museum, Bloomsbury\"],[\"Clapham Common North Side, Clapham Common\"],[\"Warwick Avenue Station, Maida Vale\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Regent's Row , Haggerston \"],[\"Embankment (Horse Guards), Westminster\"],[\"Royal Avenue 2, Chelsea\"],[\"Regent's Row , Haggerston \"],[\"Broadcasting House, Marylebone\"],[\"Sopwith Way, Battersea Park\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Belgrove Street , King's Cross\"],[\"Princes Square, Bayswater\"],[\"Windsor Terrace, Hoxton\"],[\"Twig Folly Bridge, Mile End\"],[\"Wenlock Road , Hoxton\"],[\"Maida Vale, Maida Vale\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Binfield Road, Stockwell\"],[\"Bevington Road West, North Kensington\"],[\"Regency Street, Westminster\"],[\"Stockwell Roundabout, Stockwell\"],[\"Ford Road, Old Ford\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Barbican Centre, Barbican\"],[\"Nesham Street, Wapping\"],[\"Brunswick Square, Bloomsbury\"],[\"Tower Gardens , Tower\"],[\"St. George's Square, Pimlico\"],[\"Albert Gate, Hyde Park\"],[\"Doric Way , Somers Town\"],[\"Malet Street, Bloomsbury\"],[\"Belgrave Road, Victoria\"],[\"Green Park Station, Mayfair\"],[\"Drury Lane, Covent Garden\"],[\"Here East North, Queen Elizabeth Olympic Park\"],[\"Doric Way , Somers Town\"],[\"Belgrove Street , King's Cross\"],[\"British Museum, Bloomsbury\"],[\"Marylebone Lane, Marylebone\"],[\"River Street , Clerkenwell\"],[\"Shoreditch High Street, Shoreditch\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Tysoe Street, Clerkenwell\"],[\"Monier Road, Hackney Wick\"],[\"Crawford Street, Marylebone\"],[\"Westferry Circus, Canary Wharf\"],[\"Doric Way , Somers Town\"],[\"Houndsditch, Aldgate\"],[\"Baylis Road, Waterloo\"],[\"Manresa Road, Chelsea\"],[\"Westminster Pier, Westminster\"],[\"Drury Lane, Covent Garden\"],[\"Kennington Lane Tesco, Vauxhall\"],[\"Long Lane , Bermondsey\"],[\"North Wharf Road, Paddington\"],[\"Curlew Street, Shad Thames\"],[\"Belgrave Road, Victoria\"],[\"Kensington Church Street, Kensington\"],[\"Imperial Wharf Station, Sands End\"],[\"St. Mary Axe, Aldgate\"],[\"Pritchard's Road, Bethnal Green\"],[\"Driffield Road, Old Ford\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Empire Square, The Borough\"],[\"Westminster University, Marylebone\"],[\"Commercial Street, Shoreditch\"],[\"Doric Way , Somers Town\"],[\"Somerset House, Strand\"],[\"Claverton Street, Pimlico\"],[\"Christopher Street, Liverpool Street\"],[\"Eaton Square, Belgravia\"],[\"East India DLR, Blackwall\"],[\"Black Lion Gate, Kensington Gardens\"],[\"River Street , Clerkenwell\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Abbotsbury Road, Holland Park\"],[\"Good's Way, King's Cross\"],[\"Smith Square, Westminster\"],[\"Park Lane , Hyde Park\"],[\"Belgrove Street , King's Cross\"],[\"Drummond Street , Euston\"],[\"Hereford Road, Bayswater\"],[\"Old Street Station, St. Luke's\"],[\"One Tower Bridge, Bermondsey\"],[\"Crawford Street, Marylebone\"],[\"Clinton Road, Mile End\"],[\"Little Brook Green, Brook Green\"],[\"Chrisp Street Market, Poplar\"],[\"Fanshaw Street, Hoxton\"],[\"Lancaster Gate , Bayswater\"],[\"Elizabeth Bridge, Victoria\"],[\"Ampton Street , Clerkenwell\"],[\"Royal Avenue 2, Chelsea\"],[\"Watney Street, Shadwell\"],[\"Leonard Circus , Shoreditch\"],[\"Kingsway, Covent Garden\"],[\"One Tower Bridge, Bermondsey\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Snowsfields, London Bridge\"],[\"Tooley Street, Bermondsey\"],[\"Tysoe Street, Clerkenwell\"],[\"Tooley Street, Bermondsey\"],[\"Belgrove Street , King's Cross\"],[\"St. Mary Axe, Aldgate\"],[\"Montpelier Street, Knightsbridge\"],[\"Westminster University, Marylebone\"],[\"Albert Square, Stockwell\"],[\"Doric Way , Somers Town\"],[\"Belvedere Road 1, South Bank\"],[\"Cromer Street, Bloomsbury\"],[\"Tate Modern, Bankside\"],[\"Curlew Street, Shad Thames\"],[\"Victoria & Albert Museum, South Kensington\"],[\"Monier Road, Hackney Wick\"],[\"Serpentine Car Park, Hyde Park\"],[\"Bouverie Street, Temple\"],[\"Roscoe Street, St. Luke's\"],[\"Southwick Street, Paddington\"],[\"Victoria & Albert Museum, South Kensington\"],[\"Serpentine Car Park, Hyde Park\"],[\"Goldsmith's Row, Haggerston\"],[\"St. Mary Axe, Aldgate\"],[\"Swan Street, The Borough\"],[\"Little Brook Green, Brook Green\"],[\"Taviton Street, Bloomsbury\"],[\"Lambeth Palace Road, Waterloo\"],[\"Driffield Road, Old Ford\"],[\"Ampton Street , Clerkenwell\"],[\"De Vere Gardens, Kensington\"],[\"Shoreditch High Street, Shoreditch\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Godliman Street, St. Paul's\"],[\"Elizabeth Bridge, Victoria\"],[\"Claverton Street, Pimlico\"],[\"Black Prince Road, Vauxhall\"],[\"Green Park Station, Mayfair\"],[\"Great Russell Street, Bloomsbury\"],[\"Royal Avenue 2, Chelsea\"],[\"Halford Road, West Kensington\"],[\"Antill Road, Mile End\"],[\"Golden Lane, Barbican\"],[\"Regent's Row , Haggerston \"],[\"Penywern Road, Earl's Court\"],[\"Westminster Bridge Road, Elephant & Castle\"],[\"Royal London Hospital, Whitechapel\"],[\"Charlbert Street, St. John's Wood\"],[\"Imperial Wharf Station, Sands End\"],[\"Malet Street, Bloomsbury\"],[\"Marylebone Lane, Marylebone\"],[\"Belgrove Street , King's Cross\"],[\"Northington Street , Holborn\"],[\"Green Park Station, Mayfair\"],[\"British Museum, Bloomsbury\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Tallis Street, Temple\"],[\"Queen's Gate (North), Kensington\"],[\"Belgrove Street , King's Cross\"],[\"New Spring Gardens Walk, Vauxhall\"],[\"Binfield Road, Stockwell\"],[\"Serpentine Car Park, Hyde Park\"],[\"Lambeth Palace Road, Waterloo\"],[\"Manresa Road, Chelsea\"],[\"Godliman Street, St. Paul's\"],[\"Lambeth Palace Road, Waterloo\"],[\"Bolsover Street, Fitzrovia\"],[\"Seville Street, Knightsbridge\"],[\"Barbican Centre, Barbican\"],[\"Duke Street Hill, London Bridge\"],[\"Westferry Circus, Canary Wharf\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Lancaster Gate , Bayswater\"],[\"Northington Street , Holborn\"],[\"Black Prince Road, Vauxhall\"],[\"Christopher Street, Liverpool Street\"],[\"Belgrove Street , King's Cross\"],[\"Teviot Street, Poplar\"],[\"Belgrove Street , King's Cross\"],[\"Imperial Wharf Station, Sands End\"],[\"Tate Modern, Bankside\"],[\"Hatton Wall, Holborn\"],[\"Wenlock Road , Hoxton\"],[\"Broadcasting House, Marylebone\"],[\"British Museum, Bloomsbury\"],[\"Albert Gate, Hyde Park\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"De Vere Gardens, Kensington\"],[\"Westminster Bridge Road, Elephant & Castle\"],[\"Great Russell Street, Bloomsbury\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Riverlight South, Nine Elms\"],[\"Victoria & Albert Museum, South Kensington\"],[\"Bolsover Street, Fitzrovia\"],[\"Duke Street Hill, London Bridge\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Warwick Road, Olympia\"],[\"Maida Vale, Maida Vale\"],[\"Shoreditch High Street, Shoreditch\"],[\"Nesham Street, Wapping\"],[\"Black Prince Road, Vauxhall\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Geraldine Street, Elephant & Castle\"],[\"Malet Street, Bloomsbury\"],[\"Page Street, Westminster\"],[\"Crawford Street, Marylebone\"],[\"Tysoe Street, Clerkenwell\"],[\"Tysoe Street, Clerkenwell\"],[\"Import Dock, Canary Wharf\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Manresa Road, Chelsea\"],[\"Ossulston Street, Somers Town\"],[\"De Vere Gardens, Kensington\"],[\"Goldsmith's Row, Haggerston\"],[\"Russell Gardens, Olympia\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Belgrove Street , King's Cross\"],[\"Stockwell Roundabout, Stockwell\"],[\"Bouverie Street, Temple\"],[\"Regency Street, Westminster\"],[\"Bolsover Street, Fitzrovia\"],[\"Park Street, Bankside\"],[\"Maida Vale, Maida Vale\"],[\"Malet Street, Bloomsbury\"],[\"Drummond Street , Euston\"],[\"Page Street, Westminster\"],[\"Lower Thames Street, Monument\"],[\"Westferry Circus, Canary Wharf\"],[\"New Globe Walk, Bankside\"],[\"Gloucester Avenue, Camden Town\"],[\"Commercial Street, Shoreditch\"],[\"Albert Gate, Hyde Park\"],[\"Pritchard's Road, Bethnal Green\"],[\"Shoreditch High Street, Shoreditch\"],[\"Shoreditch High Street, Shoreditch\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Barbican Centre, Barbican\"],[\"Belgrove Street , King's Cross\"],[\"Bevington Road West, North Kensington\"],[\"North Wharf Road, Paddington\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Hatton Wall, Holborn\"],[\"Tate Modern, Bankside\"],[\"Watney Street, Shadwell\"],[\"Regent's Row , Haggerston \"],[\"Crawford Street, Marylebone\"],[\"Smith Square, Westminster\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Clinton Road, Mile End\"],[\"Broadcasting House, Marylebone\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Rectory Square, Stepney\"],[\"Regent's Row , Haggerston \"],[\"Rifle Place, Avondale\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Green Park Station, Mayfair\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Smith Square, Westminster\"],[\"Smith Square, Westminster\"],[\"Watney Market, Stepney\"],[\"Tallis Street, Temple\"],[\"New Globe Walk, Bankside\"],[\"Red Lion Square, Holborn\"],[\"Shoreditch Park, Hoxton\"],[\"Drury Lane, Covent Garden\"],[\"Belgrave Road, Victoria\"],[\"Sun Street, Liverpool Street\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"North Wharf Road, Paddington\"],[\"Belgrove Street , King's Cross\"],[\"Tysoe Street, Clerkenwell\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Bolsover Street, Fitzrovia\"],[\"Rathbone Street, Fitzrovia\"],[\"Tallis Street, Temple\"],[\"Clapham Common North Side, Clapham Common\"],[\"Bouverie Street, Temple\"],[\"Clinton Road, Mile End\"],[\"Abingdon Villas, Kensington\"],[\"Kingsway, Covent Garden\"],[\"Drury Lane, Covent Garden\"],[\"Salmon Lane, Limehouse\"],[\"Doric Way , Somers Town\"],[\"Knaresborough Place, Earl's Court\"],[\"Drury Lane, Covent Garden\"],[\"New Globe Walk, Bankside\"],[\"Manresa Road, Chelsea\"],[\"Twig Folly Bridge, Mile End\"],[\"Montpelier Street, Knightsbridge\"],[\"Penywern Road, Earl's Court\"],[\"Rathbone Street, Fitzrovia\"],[\"St Mary's Hospital, Paddington\"],[\"Broadwick Street, Soho\"],[\"Antill Road, Mile End\"],[\"Charlbert Street, St. John's Wood\"],[\"Lansdowne Walk, Ladbroke Grove\"],[\"Queen's Gate (North), Kensington\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Albert Gate, Hyde Park\"],[\"Finsbury Library , Finsbury\"],[\"Godliman Street, St. Paul's\"],[\"De Vere Gardens, Kensington\"],[\"Gwendwr Road, West Kensington\"],[\"Southwick Street, Paddington\"],[\"Albert Gate, Hyde Park\"],[\"Tooley Street, Bermondsey\"],[\"Great Russell Street, Bloomsbury\"],[\"Penywern Road, Earl's Court\"],[\"Nesham Street, Wapping\"],[\"Imperial Wharf Station, Sands End\"],[\"Elizabeth Bridge, Victoria\"],[\"Knaresborough Place, Earl's Court\"],[\"Christopher Street, Liverpool Street\"],[\"Hatton Wall, Holborn\"],[\"Bancroft Road, Bethnal Green\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Windsor Terrace, Hoxton\"],[\"Sopwith Way, Battersea Park\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"South Audley Street, Mayfair\"],[\"De Vere Gardens, Kensington\"],[\"Southwark Street, Bankside\"],[\"Victoria & Albert Museum, South Kensington\"],[\"Blackfriars Road, Southwark\"],[\"Regent's Row , Haggerston\"],[\"St. James's Square, St. James's\"],[\"Goldsmith's Row, Haggerston\"],[\"Euston Square Gardens, Euston\"],[\"Percival Street, Finsbury\"],[\"Belgrave Road, Victoria\"],[\"Abingdon Villas, Kensington\"],[\"Battersea Power Station, Battersea Park\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Bolsover Street, Fitzrovia\"],[\"Gloucester Avenue, Camden Town\"],[\"Abbotsbury Road, Holland Park\"],[\"Winsland Street, Paddington\"],[\"Percival Street, Finsbury\"],[\"Battersea Power Station, Battersea Park\"],[\"Phillimore Gardens, Kensington\"],[\"Pindar Street, Liverpool Street\"],[\"Houndsditch, Aldgate\"],[\"Lavington Street, Bankside\"],[\"Long Lane , Bermondsey\"],[\"Clinton Road, Mile End\"],[\"Limburg Road, Clapham Junction\"],[\"Copper Box Arena, Queen Elizabeth Olympic Park\"],[\"Serpentine Car Park, Hyde Park\"],[\"North Wharf Road, Paddington\"],[\"Taviton Street, Bloomsbury\"],[\"Finsbury Library , Finsbury\"],[\"Pindar Street, Liverpool Street\"],[\"Blackfriars Road, Southwark\"],[\"Nesham Street, Wapping\"],[\"Portman Square, Marylebone\"],[\"Clinton Road, Mile End\"],[\"St. Chad's Street, King's Cross\"],[\"Regent's Row , Haggerston \"],[\"Good's Way, King's Cross\"],[\"Green Park Station, Mayfair\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Good's Way, King's Cross\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Page Street, Westminster\"],[\"Fanshaw Street, Hoxton\"],[\"Watney Street, Shadwell\"],[\"North Wharf Road, Paddington\"],[\"Curlew Street, Shad Thames\"],[\"Lambeth Palace Road, Waterloo\"],[\"Lancaster Gate , Bayswater\"],[\"Roscoe Street, St. Luke's\"],[\"Penywern Road, Earl's Court\"],[\"Rectory Square, Stepney\"],[\"Cumberland Gate, Hyde Park\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Taviton Street, Bloomsbury\"],[\"Austin Road, Battersea Park\"],[\"East India DLR, Blackwall\"],[\"Black Prince Road, Vauxhall\"],[\"St. George's Square, Pimlico\"],[\"Regency Street, Westminster\"],[\"Sedding Street, Sloane Square\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Smith Square, Westminster\"],[\"Gloucester Avenue, Camden Town\"],[\"Curlew Street, Shad Thames\"],[\"Wellington Row, Bethnal Green\"],[\"Belvedere Road 2, South Bank\"],[\"Regent's Row , Haggerston \"],[\"Selby Street, Whitechapel\"],[\"Knaresborough Place, Earl's Court\"],[\"Broadcasting House, Marylebone\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Old Montague Street, Whitechapel\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Princes Square, Bayswater\"],[\"Baylis Road, Waterloo\"],[\"Queen's Gate (North), Kensington\"],[\"Twig Folly Bridge, Mile End\"],[\"Sandilands Road, Walham Green\"],[\"Finsbury Library , Finsbury\"],[\"Albert Gate, Hyde Park\"],[\"Northington Street , Holborn\"],[\"Russell Gardens, Olympia\"],[\"Empire Square, The Borough\"],[\"Lambeth Palace Road, Waterloo\"],[\"Albert Gate, Hyde Park\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Goldsmith's Row, Haggerston\"],[\"Drury Lane, Covent Garden\"],[\"Pritchard's Road, Bethnal Green\"],[\"Westminster University, Marylebone\"],[\"Black Prince Road, Vauxhall\"],[\"Twig Folly Bridge, Mile End\"],[\"Manresa Road, Chelsea\"],[\"Finsbury Library , Finsbury\"],[\"St. George's Square, Pimlico\"],[\"Lancaster Drive, Blackwall\"],[\"New Globe Walk, Bankside\"],[\"East India DLR, Blackwall\"],[\"Regent's Row , Haggerston\"],[\"East Road, Hoxton\"],[\"Royal London Hospital, Whitechapel\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Portman Square, Marylebone\"],[\"Lansdowne Walk, Ladbroke Grove\"],[\"Ampton Street , Clerkenwell\"],[\"Salmon Lane, Limehouse\"],[\"Royal Avenue 2, Chelsea\"],[\"Lambeth Palace Road, Waterloo\"],[\"Drury Lane, Covent Garden\"],[\"Belgrove Street , King's Cross\"],[\"Broadwick Street, Soho\"],[\"Red Lion Square, Holborn\"],[\"Belgrove Street , King's Cross\"],[\"Serpentine Car Park, Hyde Park\"],[\"Lavington Street, Bankside\"],[\"Coram Street, Bloomsbury\"],[\"Belgrove Street , King's Cross\"],[\"Heron Quays DLR, Canary Wharf\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Ossulston Street, Somers Town\"],[\"Leonard Circus , Shoreditch\"],[\"Commercial Street, Shoreditch\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Somerset House, Strand\"],[\"Sun Street, Liverpool Street\"],[\"Albert Square, Stockwell\"],[\"Central House, Aldgate\"],[\"Crawford Street, Marylebone\"],[\"Lower Thames Street, Monument\"],[\"Crawford Street, Marylebone\"],[\"Copper Box Arena, Queen Elizabeth Olympic Park\"],[\"Shoreditch High Street, Shoreditch\"],[\"Halford Road, West Kensington\"],[\"Bancroft Road, Bethnal Green\"],[\"Baylis Road, Waterloo\"],[\"Albert Gate, Hyde Park\"],[\"Belgrove Street , King's Cross\"],[\"Binfield Road, Stockwell\"],[\"Commercial Street, Shoreditch\"],[\"Salmon Lane, Limehouse\"],[\"St. Chad's Street, King's Cross\"],[\"Battersea Power Station, Battersea Park\"],[\"Southwick Street, Paddington\"],[\"Clapham Common North Side, Clapham Common\"],[\"Drury Lane, Covent Garden\"],[\"Pritchard's Road, Bethnal Green\"],[\"Somerset House, Strand\"],[\"Page Street, Westminster\"],[\"Ford Road, Old Ford\"],[\"Leonard Circus , Shoreditch\"],[\"Rectory Square, Stepney\"],[\"Embankment (Savoy), Strand\"],[\"Shoreditch High Street, Shoreditch\"],[\"Bevington Road West, North Kensington\"],[\"Langdon Park, Poplar\"],[\"Goldsmith's Row, Haggerston\"],[\"Tallis Street, Temple\"],[\"Kensington Olympia Station, Olympia\"],[\"Bevington Road West, North Kensington\"],[\"Albert Gate, Hyde Park\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Central House, Aldgate\"],[\"Golden Lane, Barbican\"],[\"Taviton Street, Bloomsbury\"],[\"North Wharf Road, Paddington\"],[\"New Globe Walk, Bankside\"],[\"Tate Modern, Bankside\"],[\"Here East North, Queen Elizabeth Olympic Park\"],[\"Montpelier Street, Knightsbridge\"],[\"Wapping High Street, Wapping\"],[\"Somerset House, Strand\"],[\"Belgrove Street , King's Cross\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Fanshaw Street, Hoxton\"],[\"Malet Street, Bloomsbury\"],[\"Albany Street, The Regent's Park\"],[\"Crawford Street, Marylebone\"],[\"Finsbury Library , Finsbury\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Newby Place, Poplar\"],[\"Maida Vale, Maida Vale\"],[\"Albert Gate, Hyde Park\"],[\"Birkenhead Street, King's Cross\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Royal Avenue 2, Chelsea\"],[\"Albert Gate, Hyde Park\"],[\"Fanshaw Street, Hoxton\"],[\"Geraldine Street, Elephant & Castle\"],[\"Albert Gate, Hyde Park\"],[\"Albert Gate, Hyde Park\"],[\"Serpentine Car Park, Hyde Park\"],[\"Ravenscourt Park Station, Hammersmith\"],[\"Boston Place, Marylebone\"],[\"Grafton Street, Mayfair\"],[\"Imperial Wharf Station\"],[\"Albert Gate, Hyde Park\"],[\"Goldsmith's Row, Haggerston\"],[\"North Wharf Road, Paddington\"],[\"One Tower Bridge, Bermondsey\"],[\"Belgrove Street , King's Cross\"],[\"Driffield Road, Old Ford\"],[\"Baylis Road, Waterloo\"],[\"Hansard Mews, Shepherds Bush\"],[\"Nesham Street, Wapping\"],[\"Victoria & Albert Museum, South Kensington\"],[\"Park Street, Bankside\"],[\"Regent's Row , Haggerston \"],[\"Belgrove Street , King's Cross\"],[\"Regent's Row , Haggerston \"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Princes Square, Bayswater\"],[\"Great Russell Street, Bloomsbury\"],[\"Wellington Row, Bethnal Green\"],[\"Leonard Circus , Shoreditch\"],[\"Sopwith Way, Battersea Park\"],[\"Godliman Street, St. Paul's\"],[\"Long Lane , Bermondsey\"],[\"Charles II Street, West End\"],[\"North Wharf Road, Paddington\"],[\"Wenlock Road , Hoxton\"],[\"Lambeth Palace Road, Waterloo\"],[\"Commercial Street, Shoreditch\"],[\"Lambeth Palace Road, Waterloo\"],[\"Regent's Row , Haggerston\"],[\"Bouverie Street, Temple\"],[\"Abyssinia Close, Clapham Junction\"],[\"North Wharf Road, Paddington\"],[\"Copper Box Arena, Queen Elizabeth Olympic Park\"],[\"Birkenhead Street, King's Cross\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Belgrove Street , King's Cross\"],[\"Regent's Row , Haggerston\"],[\"Marylebone Lane, Marylebone\"],[\"New Globe Walk, Bankside\"],[\"Percival Street, Finsbury\"],[\"St. George's Square, Pimlico\"],[\"Watney Market, Stepney\"],[\"Clinton Road, Mile End\"],[\"Albert Gate, Hyde Park\"],[\"Malet Street, Bloomsbury\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Melton Street, Euston\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Sedding Street, Sloane Square\"],[\"Royal London Hospital, Whitechapel\"],[\"Green Park Station, Mayfair\"],[\"Blackfriars Road, Southwark\"],[\"Battersea Power Station, Battersea Park\"],[\"Victoria & Albert Museum, South Kensington\"],[\"Rectory Square, Stepney\"],[\"Green Park Station, Mayfair\"],[\"Halford Road, West Kensington\"],[\"Lambeth North Station, Waterloo\"],[\"Ossulston Street, Somers Town\"],[\"Bedford Way, Bloomsbury\"],[\"Rectory Square, Stepney\"],[\"Lambeth Palace Road, Waterloo\"],[\"Crawford Street, Marylebone\"],[\"Penywern Road, Earl's Court\"],[\"Albert Gate, Hyde Park\"],[\"Belvedere Road 1, South Bank\"],[\"Belvedere Road 1, South Bank\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Abingdon Villas, Kensington\"],[\"Wellington Row, Bethnal Green\"],[\"Rathbone Street, Fitzrovia\"],[\"Lancaster Gate , Bayswater\"],[\"Penywern Road, Earl's Court\"],[\"Belgrove Street , King's Cross\"],[\"Commercial Street, Shoreditch\"],[\"Lambeth Palace Road, Waterloo\"],[\"Gauden Road, Clapham\"],[\"Belgrove Street , King's Cross\"],[\"Bedford Way, Bloomsbury\"],[\"Coram Street, Bloomsbury\"],[\"Tooley Street, Bermondsey\"],[\"Golden Lane, Barbican\"],[\"Commercial Street, Shoreditch\"],[\"Doric Way , Somers Town\"],[\"Gauden Road, Clapham\"],[\"British Museum, Bloomsbury\"],[\"Aberfeldy Street, Poplar\"],[\"Drury Lane, Covent Garden\"],[\"Hatton Wall, Holborn\"],[\"Golden Lane, Barbican\"],[\"Albany Street, The Regent's Park\"],[\"Southwark Street, Bankside\"],[\"Belgrave Road, Victoria\"],[\"Shoreditch High Street, Shoreditch\"],[\"Halford Road, West Kensington\"],[\"Hatton Wall, Holborn\"],[\"Antill Road, Mile End\"],[\"Brunswick Square, Bloomsbury\"],[\"Malet Street, Bloomsbury\"],[\"Roscoe Street, St. Luke's\"],[\"Battersea Power Station, Battersea Park\"],[\"St. Chad's Street, King's Cross\"],[\"Somerset House, Strand\"],[\"Malet Street, Bloomsbury\"],[\"North Wharf Road, Paddington\"],[\"Grafton Street, Mayfair\"],[\"Great Suffolk Street, The Borough\"],[\"Broadcasting House, Marylebone\"],[\"Baylis Road, Waterloo\"],[\"Kensington Olympia Station, Olympia\"],[\"Albert Gate, Hyde Park\"],[\"Charlbert Street, St. John's Wood\"],[\"Wren Street, Holborn\"],[\"Boston Place, Marylebone\"],[\"Bevington Road West, North Kensington\"],[\"Drury Lane, Covent Garden\"],[\"River Street , Clerkenwell\"],[\"Cromer Street, Bloomsbury\"],[\"Penywern Road, Earl's Court\"],[\"Northington Street , Holborn\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Sedding Street, Sloane Square\"],[\"Tooley Street, Bermondsey\"],[\"Malet Street, Bloomsbury\"],[\"Somerset House, Strand\"],[\"Twig Folly Bridge, Mile End\"],[\"Leonard Circus , Shoreditch\"],[\"Shoreditch High Street, Shoreditch\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Regent's Row , Haggerston \"],[\"Albany Street, The Regent's Park\"],[\"Good's Way, King's Cross\"],[\"Wellington Row, Bethnal Green\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Queen's Gate (North), Kensington\"],[\"Tallis Street, Temple\"],[\"Taviton Street, Bloomsbury\"],[\"Blackfriars Road, Southwark\"],[\"Windsor Terrace, Hoxton\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Empire Square, The Borough\"],[\"Montpelier Street, Knightsbridge\"],[\"St. Chad's Street, King's Cross\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"St. John's Wood Road, St. John's Wood\"],[\"St. Mary Axe, Aldgate\"],[\"Leonard Circus , Shoreditch\"],[\"Gwendwr Road, West Kensington\"],[\"The Metropolitan, Portobello\"],[\"Southwark Street, Bankside\"],[\"Sopwith Way, Battersea Park\"],[\"Westminster Pier, Westminster\"],[\"Boston Place, Marylebone\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Christopher Street, Liverpool Street\"],[\"Ranelagh Gardens, Fulham\"],[\"Halford Road, West Kensington\"],[\"Lambeth Palace Road, Waterloo\"],[\"Portman Square, Marylebone\"],[\"Binfield Road, Stockwell\"],[\"Belgrove Street , King's Cross\"],[\"London Zoo,  The Regent's Park\"],[\"Elizabeth Bridge, Victoria\"],[\"Shoreditch High Street, Shoreditch\"],[\"Tooley Street, Bermondsey\"],[\"Manresa Road, Chelsea\"],[\"Westferry Circus, Canary Wharf\"],[\"Sun Street, Liverpool Street\"],[\"Aberfeldy Street, Poplar\"],[\"Central House, Aldgate\"],[\"Heron Quays DLR, Canary Wharf\"],[\"Clapham Common North Side, Clapham Common\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Pritchard's Road, Bethnal Green\"],[\"De Vere Gardens, Kensington\"],[\"Cumberland Gate, Hyde Park\"],[\"Westferry Circus, Canary Wharf\"],[\"Abyssinia Close, Clapham Junction\"],[\"Finsbury Leisure Centre, St. Luke's\"],[\"Albert Gate, Hyde Park\"],[\"Broadwick Street, Soho\"],[\"Clinton Road, Mile End\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Shoreditch High Street, Shoreditch\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Albert Square, Stockwell\"],[\"Wenlock Road , Hoxton\"],[\"Embankment (Savoy), Strand\"],[\"Imperial Wharf Station\"],[\"Black Prince Road, Vauxhall\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Central House, Aldgate\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Cromer Street, Bloomsbury\"],[\"Houndsditch, Aldgate\"],[\"Commercial Street, Shoreditch\"],[\"Salmon Lane, Limehouse\"],[\"Salmon Lane, Limehouse\"],[\"Twig Folly Bridge, Mile End\"],[\"Finsbury Library , Finsbury\"],[\"Crabtree Lane, Fulham\"],[\"Malet Street, Bloomsbury\"],[\"Albert Gate, Hyde Park\"],[\"Riverlight South, Nine Elms\"],[\"Bouverie Street, Temple\"],[\"Nesham Street, Wapping\"],[\"Sopwith Way, Battersea Park\"],[\"King Edward Street, St Pauls\"],[\"Battersea Power Station, Battersea Park\"],[\"Broadwick Street, Soho\"],[\"Curlew Street, Shad Thames\"],[\"Clapham Road, Lingham Street, Stockwell\"],[\"Baylis Road, Waterloo\"],[\"Houndsditch, Aldgate\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"British Museum, Bloomsbury\"],[\"Russell Gardens, Olympia\"],[\"Winsland Street, Paddington\"],[\"Houndsditch, Aldgate\"],[\"Clapham Common North side, Clapham Common\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Hatton Wall, Holborn\"],[\"Penywern Road, Earl's Court\"],[\"Westferry Circus, Canary Wharf\"],[\"Blackfriars Road, Southwark\"],[\"Lancaster Drive, Blackwall\"],[\"Serpentine Car Park, Hyde Park\"],[\"Barbican Centre, Barbican\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Newby Place, Poplar\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Somerset House, Strand\"],[\"Imperial Wharf Station, Sands End\"],[\"Ampton Street , Clerkenwell\"],[\"Elizabeth Bridge, Victoria\"],[\"Sedding Street, Sloane Square\"],[\"Albert Gate, Hyde Park\"],[\"Rectory Square, Stepney\"],[\"Warwick Road, Olympia\"],[\"Bedford Way, Bloomsbury\"],[\"Wells Street, Fitzrovia\"],[\"Battersea Power Station, Battersea Park\"],[\"Doric Way , Somers Town\"],[\"Percival Street, Finsbury\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Winsland Street, Paddington\"],[\"River Street , Clerkenwell\"],[\"Rathbone Street, Fitzrovia\"],[\"Westminster Pier, Westminster\"],[\"Battersea Power Station, Battersea Park\"],[\"Manresa Road, Chelsea\"],[\"Arlington Road, Camden Town\"],[\"Serpentine Car Park, Hyde Park\"],[\"Elizabeth Bridge, Victoria\"],[\"Drury Lane, Covent Garden\"],[\"Kennington Lane Tesco, Vauxhall\"],[\"Swan Street, The Borough\"],[\"Bevington Road West, North Kensington\"],[\"Kingsway, Covent Garden\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Nesham Street, Wapping\"],[\"Tysoe Street, Clerkenwell\"],[\"Calshot Street , King's Cross\"],[\"Belgrove Street , King's Cross\"],[\"Empire Square, The Borough\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Paddington Street, Marylebone\"],[\"Watney Market, Stepney\"],[\"Lambeth Palace Road, Waterloo\"],[\"Godliman Street, St. Paul's\"],[\"Sun Street, Liverpool Street\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Bouverie Street, Temple\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Finsbury Leisure Centre, St. Luke's\"],[\"Handyside Street, King's Cross\"],[\"Boston Place, Marylebone\"],[\"Christopher Street, Liverpool Street\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Sopwith Way, Battersea Park\"],[\"Embankment (Savoy), Strand\"],[\"Great Russell Street, Bloomsbury\"],[\"Gloucester Avenue, Camden Town\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Hereford Road, Bayswater\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Gwendwr Road, West Kensington\"],[\"Page Street, Westminster\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Regent's Row , Haggerston \"],[\"Black Lion Gate, Kensington Gardens\"],[\"Winsland Street, Paddington\"],[\"St. Mary Axe, Aldgate\"],[\"Cromer Street, Bloomsbury\"],[\"Albert Gate, Hyde Park\"],[\"Drury Lane, Covent Garden\"],[\"Crawford Street, Marylebone\"],[\"Wenlock Road , Hoxton\"],[\"Shoreditch High Street, Shoreditch\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Princes Square, Bayswater\"],[\"Victoria Rise, Clapham Common\"],[\"Clapham Road, Lingham Street, Stockwell\"],[\"Belgrove Street , King's Cross\"],[\"Crawford Street, Marylebone\"],[\"Broadcasting House, Marylebone\"],[\"British Museum, Bloomsbury\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Tallis Street, Temple\"],[\"Lambeth Palace Road, Waterloo\"],[\"Empire Square, The Borough\"],[\"St. Chad's Street, King's Cross\"],[\"Wapping High Street, Wapping\"],[\"Ford Road, Old Ford\"],[\"Abingdon Villas, Kensington\"],[\"Finsbury Library , Finsbury\"],[\"Twig Folly Bridge, Mile End\"],[\"Malet Street, Bloomsbury\"],[\"Serpentine Car Park, Hyde Park\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Monier Road, Hackney Wick\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Blackfriars Road, Southwark\"],[\"Belgrove Street , King's Cross\"],[\"Bedford Way, Bloomsbury\"],[\"Watney Street, Shadwell\"],[\"Hatton Wall, Holborn\"],[\"Twig Folly Bridge, Mile End\"],[\"Houghton Street, Strand\"],[\"Sedding Street, Sloane Square\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Bouverie Street, Temple\"],[\"Clapham Common North Side, Clapham Common\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Windsor Terrace, Hoxton\"],[\"Lower Thames Street, Monument\"],[\"Twig Folly Bridge, Mile End\"],[\"Montpelier Street, Knightsbridge\"],[\"Sun Street, Liverpool Street\"],[\"Stockwell Roundabout, Stockwell\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Clinton Road, Mile End\"],[\"Old Street Station, St. Luke's\"],[\"Houndsditch, Aldgate\"],[\"Monier Road, Hackney Wick\"],[\"Bancroft Road, Bethnal Green\"],[\"Hansard Mews, Holland Park\"],[\"Scala Street, Fitzrovia\"],[\"Osiers Road, Wandsworth\"],[\"Maida Vale, Maida Vale\"],[\"Elizabeth Bridge, Victoria\"],[\"Abyssinia Close, Clapham Junction\"],[\"Belgrove Street , King's Cross\"],[\"Wenlock Road , Hoxton\"],[\"Mile End Stadium, Mile End\"],[\"Barbican Centre, Barbican\"],[\"Vincent Square, Westminster\"],[\"Claverton Street, Pimlico\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Somerset House, Strand\"],[\"Abyssinia Close, Clapham Junction\"],[\"Belgrove Street , King's Cross\"],[\"Swan Street, The Borough\"],[\"Lower Thames Street, Monument\"],[\"Windsor Terrace, Hoxton\"],[\"St. George's Square, Pimlico\"],[\"Albert Gate, Hyde Park\"],[\"Golden Lane, Barbican\"],[\"Antill Road, Mile End\"],[\"Bourne Street, Belgravia\"],[\"Tooley Street, Bermondsey\"],[\"Barbican Centre, Barbican\"],[\"Curlew Street, Shad Thames\"],[\"Windsor Terrace, Hoxton\"],[\"Pritchard's Road, Bethnal Green\"],[\"Regent's Row , Haggerston\"],[\"Grafton Street, Mayfair\"],[\"Gauden Road, Clapham\"],[\"Shoreditch High Street, Shoreditch\"],[\"Maplin Street, Mile End\"],[\"Winsland Street, Paddington\"],[\"Snowsfields, London Bridge\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Bolsover Street, Fitzrovia\"],[\"North Wharf Road, Paddington\"],[\"Drury Lane, Covent Garden\"],[\"Broadwick Street, Soho\"],[\"Driffield Road, Old Ford\"],[\"St. Mary Axe, Aldgate\"],[\"Albert Gate, Hyde Park\"],[\"Serpentine Car Park, Hyde Park\"],[\"Good's Way, King's Cross\"],[\"Serpentine Car Park, Hyde Park\"],[\"Marylebone Lane, Marylebone\"],[\"Woodstock Street, Mayfair\"],[\"Westminster University, Marylebone\"],[\"Kennington Lane Tesco, Vauxhall\"],[\"River Street , Clerkenwell\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Clinton Road, Mile End\"],[\"Broadwick Street, Soho\"],[\"Fanshaw Street, Hoxton\"],[\"Birkenhead Street, King's Cross\"],[\"Goldsmiths Row, Haggerston\"],[\"Lambeth Palace Road, Waterloo\"],[\"Belgrove Street , King's Cross\"],[\"Pancras Road, King's Cross\"],[\"Wellington Row, Bethnal Green\"],[\"Smith Square, Westminster\"],[\"Ossulston Street, Somers Town\"],[\"Barbican Centre, Barbican\"],[\"Jubilee Plaza, Canary Wharf\"],[\"De Vere Gardens, Kensington\"],[\"Warwick Road, Olympia\"],[\"Sedding Street, Sloane Square\"],[\"Tysoe Street, Clerkenwell\"],[\"Sandilands Road, Walham Green\"],[\"Hansard Mews, Holland Park\"],[\"Hereford Road, Bayswater\"],[\"Vincent Square, Westminster\"],[\"De Vere Gardens, Kensington\"],[\"Bouverie Street, Temple\"],[\"Bolsover Street, Fitzrovia\"],[\"Belgrave Road, Victoria\"],[\"Park Lane , Hyde Park\"],[\"Manresa Road, Chelsea\"],[\"North Wharf Road, Paddington\"],[\"Claverton Street, Pimlico\"],[\"Tooley Street, Bermondsey\"],[\"Page Street, Westminster\"],[\"Shepherd's Bush Road North, Shepherd's Bush\"],[\"Percival Street, Finsbury\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Central House, Aldgate\"],[\"Nesham Street, Wapping\"],[\"Malet Street, Bloomsbury\"],[\"Ravenscourt Park Station, Hammersmith\"],[\"Marylebone Lane, Marylebone\"],[\"Sopwith Way, Battersea Park\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Serpentine Car Park, Hyde Park\"],[\"Royal London Hospital, Whitechapel\"],[\"Malet Street, Bloomsbury\"],[\"Falkirk Street, Hoxton\"],[\"Leonard Circus , Shoreditch\"],[\"Albert Gate, Hyde Park\"],[\"Goldsmith's Row, Haggerston\"],[\"Shepherd's Bush Road North, Shepherd's Bush\"],[\"Manresa Road, Chelsea\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Battersea Power Station, Battersea Park\"],[\"Godliman Street, St. Paul's\"],[\"Red Lion Square, Holborn\"],[\"Cumberland Gate, Hyde Park\"],[\"Wenlock Road , Hoxton\"],[\"Sedding Street, Sloane Square\"],[\"Here East North, Queen Elizabeth Olympic Park\"],[\"Brunswick Square, Bloomsbury\"],[\"Bouverie Street, Temple\"],[\"Lancaster Gate , Bayswater\"],[\"North Wharf Road, Paddington\"],[\"Portman Square, Marylebone\"],[\"Finsbury Library , Finsbury\"],[\"St. Mary Axe, Aldgate\"],[\"Commercial Street, Shoreditch\"],[\"Pritchard's Road, Bethnal Green\"],[\"Knaresborough Place, Earl's Court\"],[\"New Fetter Lane, Holborn\"],[\"Nesham Street, Wapping\"],[\"Brunswick Square, Bloomsbury\"],[\"Green Park Station, Mayfair\"],[\"Great Russell Street, Bloomsbury\"],[\"Baylis Road, Waterloo\"],[\"Wenlock Road , Hoxton\"],[\"Curlew Street, Shad Thames\"],[\"Regent's Row , Haggerston\"],[\"Wenlock Road , Hoxton\"],[\"North Wharf Road, Paddington\"],[\"Belgrove Street , King's Cross\"],[\"Baylis Road, Waterloo\"],[\"Drury Lane, Covent Garden\"],[\"Central House, Aldgate\"],[\"Bolsover Street, Fitzrovia\"],[\"North Wharf Road, Paddington\"],[\"Red Lion Square, Holborn\"],[\"Riverlight South, Nine Elms\"],[\"Baylis Road, Waterloo\"],[\"Hoxton Station, Hoxton\"],[\"St. Chad's Street, King's Cross\"],[\"Belgrove Street , King's Cross\"],[\"Belvedere Road 1, South Bank\"],[\"Sun Street, Liverpool Street\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Euston Square Gardens, Euston\"],[\"Belgrove Street , King's Cross\"],[\"Belgrove Street , King's Cross\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Long Lane , Bermondsey\"],[\"Limburg Road, Clapham Junction\"],[\"Leonard Circus , Shoreditch\"],[\"Crawford Street, Marylebone\"],[\"Serpentine Car Park, Hyde Park\"],[\"Victoria & Albert Museum, South Kensington\"],[\"Pindar Street, Liverpool Street\"],[\"Victoria & Albert Museum, South Kensington\"],[\"Blackfriars Road, Southwark\"],[\"Curlew Street, Shad Thames\"],[\"Central House, Aldgate\"],[\"Green Park Station, Mayfair\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Regent's Row , Haggerston \"],[\"Belgrave Road, Victoria\"],[\"Black Prince Road, Vauxhall\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Commercial Street, Shoreditch\"],[\"Watney Market, Stepney\"],[\"Tooley Street, Bermondsey\"],[\"Sun Street, Liverpool Street\"],[\"Albany Street, The Regent's Park\"],[\"St Mary's Hospital, Paddington\"],[\"Driffield Road, Old Ford\"],[\"Lavington Street, Bankside\"],[\"Boston Place, Marylebone\"],[\"Percival Street, Finsbury\"],[\"Melton Street, Euston\"],[\"Import Dock, Canary Wharf\"],[\"Grafton Street, Mayfair\"],[\"Old Montague Street, Whitechapel\"],[\"Tysoe Street, Clerkenwell\"],[\"Christopher Street, Liverpool Street\"],[\"Monier Road, Hackney Wick\"],[\"Westminster Pier, Westminster\"],[\"Broadcasting House, Marylebone\"],[\"Red Lion Square, Holborn\"],[\"Taviton Street, Bloomsbury\"],[\"Great Russell Street, Bloomsbury\"],[\"Gaywood  Street, Elephant & Castle\"],[\"North Wharf Road, Paddington\"],[\"Selby Street, Whitechapel\"],[\"Newby Place, Poplar\"],[\"Drury Lane, Covent Garden\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Fanshaw Street, Hoxton\"],[\"Ford Road, Old Ford\"],[\"Southwick Street, Paddington\"],[\"Royal London Hospital, Whitechapel\"],[\"Putney Pier, Wandsworth\"],[\"Serpentine Car Park, Hyde Park\"],[\"Broadcasting House, Marylebone\"],[\"Baylis Road, Waterloo\"],[\"Imperial Wharf Station, Sands End\"],[\"Albany Street, The Regent's Park\"],[\"Broadwick Street, Soho\"],[\"Albert Square, Stockwell\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Page Street, Westminster\"],[\"Malet Street, Bloomsbury\"],[\"Long Lane , Bermondsey\"],[\"Taviton Street, Bloomsbury\"],[\"Boston Place, Marylebone\"],[\"Maida Vale, Maida Vale\"],[\"Wellington Row, Bethnal Green\"],[\"One Tower Bridge, Bermondsey\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Belgrove Street , King's Cross\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Clinton Road, Mile End\"],[\"Fulham Broadway, Walham Green\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Lancaster Gate , Bayswater\"],[\"Hurlingham Park, Parsons Green\"],[\"Hampstead Road (Cartmel), Euston\"],[\"Ampton Street , Clerkenwell\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Tallis Street, Temple\"],[\"Nesham Street, Wapping\"],[\"Lambeth Palace Road, Waterloo\"],[\"Imperial Wharf Station, Sands End\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Houghton Street, Strand\"],[\"Abyssinia Close, Clapham Junction\"],[\"Watney Street, Shadwell\"],[\"Black Prince Road, Vauxhall\"],[\"River Street , Clerkenwell\"],[\"Nesham Street, Wapping\"],[\"Sopwith Way, Battersea Park\"],[\"Serpentine Car Park, Hyde Park\"],[\"Tate Modern, Bankside\"],[\"Elizabeth Bridge, Victoria\"],[\"Commercial Street, Shoreditch\"],[\"Marylebone Lane, Marylebone\"],[\"Great Russell Street, Bloomsbury\"],[\"New Fetter Lane, Holborn\"],[\"Handyside Street, King's Cross\"],[\"The Metropolitan, Portobello\"],[\"Tate Modern, Bankside\"],[\"Nesham Street, Wapping\"],[\"St. George's Square, Pimlico\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Regent's Row , Haggerston \"],[\"St. Mary Axe, Aldgate\"],[\"Manresa Road, Chelsea\"],[\"Bourne Street, Belgravia\"],[\"Warwick Road, Olympia\"],[\"Albert Gate, Hyde Park\"],[\"River Street , Clerkenwell\"],[\"Ossulston Street, Somers Town\"],[\"Hatton Wall, Holborn\"],[\"Goldsmith's Row, Haggerston\"],[\"Hatton Wall, Holborn\"],[\"Royal Avenue 2, Chelsea\"],[\"Clapham Road, Lingham Street, Stockwell\"],[\"Tate Modern, Bankside\"],[\"Ford Road, Old Ford\"],[\"Driffield Road, Old Ford\"],[\"Twig Folly Bridge, Mile End\"],[\"Imperial Wharf Station, Sands End\"],[\"Euston Square Gardens, Euston\"],[\"Winsland Street, Paddington\"],[\"Bolsover Street, Fitzrovia\"],[\"Montpelier Street, Knightsbridge\"],[\"South Audley Street, Mayfair\"],[\"Belgrove Street , King's Cross\"],[\"Lavington Street, Bankside\"],[\"Regent's Row , Haggerston\"],[\"Long Lane , Bermondsey\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Knaresborough Place, Earl's Court\"],[\"Tooley Street, Bermondsey\"],[\"Sedding Street, Sloane Square\"],[\"Drury Lane, Covent Garden\"],[\"Battersea Power Station, Battersea Park\"],[\"St. George's Square, Pimlico\"],[\"Fanshaw Street, Hoxton\"],[\"Boston Place, Marylebone\"],[\"Victoria Rise, Clapham Common\"],[\"Cromer Street, Bloomsbury\"],[\"Battersea Power Station, Battersea Park\"],[\"Lambeth Palace Road, Waterloo\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Driffield Road, Old Ford\"],[\"Baylis Road, Waterloo\"],[\"Brunswick Square, Bloomsbury\"],[\"De Vere Gardens, Kensington\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Serpentine Car Park, Hyde Park\"],[\"Hatton Wall, Holborn\"],[\"Aldersgate Street, Barbican\"],[\"New Fetter Lane, Holborn\"],[\"Birkenhead Street, King's Cross\"],[\"Park Street, Bankside\"],[\"Nesham Street, Wapping\"],[\"Taviton Street, Bloomsbury\"],[\"Charlbert Street, St. John's Wood\"],[\"New Fetter Lane, Holborn\"],[\"Westminster Pier, Westminster\"],[\"Belvedere Road 1, South Bank\"],[\"East Road, Hoxton\"],[\"Bolsover Street, Fitzrovia\"],[\"Leonard Circus , Shoreditch\"],[\"Roscoe Street, St. Luke's\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Kensington Gore, Knightsbridge\"],[\"Houghton Street, Strand\"],[\"Green Park Station, Mayfair\"],[\"Bouverie Street, Temple\"],[\"Russell Gardens, Olympia\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Pancras Road, King's Cross\"],[\"Percival Street, Finsbury\"],[\"Belgrove Street , King's Cross\"],[\"Good's Way, King's Cross\"],[\"St. Mary Axe, Aldgate\"],[\"St Mary's Hospital, Paddington\"],[\"Binfield Road, Stockwell\"],[\"Royal Avenue 2, Chelsea\"],[\"Green Park Station, Mayfair\"],[\"Broadcasting House, Marylebone\"],[\"Great Russell Street, Bloomsbury\"],[\"Winsland Street, Paddington\"],[\"Old Montague Street, Whitechapel\"],[\"Phillimore Gardens, Kensington\"],[\"Old Montague Street, Whitechapel\"],[\"Imperial Wharf Station, Sands End\"],[\"Marylebone Lane, Marylebone\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Tooley Street, Bermondsey\"],[\"Tate Modern, Bankside\"],[\"Bolsover Street, Fitzrovia\"],[\"Somerset House, Strand\"],[\"Blackfriars Road, Southwark\"],[\"Westferry Circus, Canary Wharf\"],[\"Hatton Wall, Holborn\"],[\"Pritchard's Road, Bethnal Green\"],[\"Clapham Common North Side, Clapham Common\"],[\"Northington Street , Holborn\"],[\"Clapham Common North Side, Clapham Common\"],[\"Royal Avenue 2, Chelsea\"],[\"Lancaster Gate , Bayswater\"],[\"Lambeth Palace Road, Waterloo\"],[\"Maida Vale, Maida Vale\"],[\"Belgrove Street , King's Cross\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"New Fetter Lane, Holborn\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"De Vere Gardens, Kensington\"],[\"Goldsmith's Row, Haggerston\"],[\"Old Montague Street, Whitechapel\"],[\"Naval Row, Blackwall\"],[\"Bolsover Street, Fitzrovia\"],[\"St. George's Square, Pimlico\"],[\"Westminster Pier, Westminster\"],[\"Lots Road, West Chelsea\"],[\"Finsbury Library , Finsbury\"],[\"Twig Folly Bridge, Mile End\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Commercial Street, Shoreditch\"],[\"Claverton Street, Pimlico\"],[\"Claverton Street, Pimlico\"],[\"Albert Gate, Hyde Park\"],[\"Taviton Street, Bloomsbury\"],[\"Bolsover Street, Fitzrovia\"],[\"Riverlight South, Nine Elms\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Doric Way , Somers Town\"],[\"Taviton Street, Bloomsbury\"],[\"Ford Road, Old Ford\"],[\"Belgrave Road, Victoria\"],[\"Westferry Circus, Canary Wharf\"],[\"Albert Gate, Hyde Park\"],[\"Drury Lane, Covent Garden\"],[\"St. George's Square, Pimlico\"],[\"St. Mary Axe, Aldgate\"],[\"Commercial Street, Shoreditch\"],[\"Birkenhead Street, King's Cross\"],[\"Golden Lane, Barbican\"],[\"Battersea Power Station, Battersea Park\"],[\"Ampton Street , Clerkenwell\"],[\"Ford Road, Old Ford\"],[\"Taviton Street, Bloomsbury\"],[\"Nesham Street, Wapping\"],[\"Tate Modern, Bankside\"],[\"Ossulston Street, Somers Town\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Westminster University, Marylebone\"],[\"Monier Road, Hackney Wick\"],[\"Serpentine Car Park, Hyde Park\"],[\"Fanshaw Street, Hoxton\"],[\"Salmon Lane, Limehouse\"],[\"Albert Gate, Hyde Park\"],[\"Somerset House, Strand\"],[\"Tysoe Street, Clerkenwell\"],[\"Hatton Wall, Holborn\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Baylis Road, Waterloo\"],[\"Belgrove Street , King's Cross\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Handyside Street, King's Cross\"],[\"Grafton Street, Mayfair\"],[\"Belgrove Street , King's Cross\"],[\"Percival Street, Finsbury\"],[\"Aylward Street, Stepney\"],[\"Fanshaw Street, Hoxton\"],[\"Imperial Wharf Station, Sands End\"],[\"Red Lion Square, Holborn\"],[\"Hurlingham Park, Parsons Green\"],[\"London Zoo,  The Regent's Park\"],[\"Curlew Street, Shad Thames\"],[\"Westminster University, Marylebone\"],[\"Selby Street, Whitechapel\"],[\"Rathbone Street, Fitzrovia\"],[\"Arlington Road, Camden Town\"],[\"Central House, Aldgate\"],[\"Albany Street, The Regent's Park\"],[\"Belgrave Road, Victoria\"],[\"Belgrave Road, Victoria\"],[\"Belgrove Street , King's Cross\"],[\"Westminster Pier, Westminster\"],[\"Nesham Street, Wapping\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Serpentine Car Park, Hyde Park\"],[\"Sedding Street, Sloane Square\"],[\"Hoxton Station, Hoxton\"],[\"Bouverie Street, Temple\"],[\"Windsor Terrace, Hoxton\"],[\"Black Lion Gate, Kensington Gardens\"],[\"One Tower Bridge, Bermondsey\"],[\"Nesham Street, Wapping\"],[\"Goldsmith's Row, Haggerston\"],[\"Malet Street, Bloomsbury\"],[\"Tate Modern, Bankside\"],[\"Hatton Wall, Holborn\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Tate Modern, Bankside\"],[\"Somerset House, Strand\"],[\"Baylis Road, Waterloo\"],[\"Montpelier Street, Knightsbridge\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Little Brook Green, Brook Green\"],[\"Hatton Wall, Holborn\"],[\"Boston Place, Marylebone\"],[\"Kensington Church Street, Kensington\"],[\"Hansard Mews, Holland Park\"],[\"Pindar Street, Liverpool Street\"],[\"Pritchard's Road, Bethnal Green\"],[\"Baylis Road, Waterloo\"],[\"Houndsditch, Aldgate\"],[\"Nesham Street, Wapping\"],[\"Tooley Street, Bermondsey\"],[\"Drury Lane, Covent Garden\"],[\"Drury Lane, Covent Garden\"],[\"Christopher Street, Liverpool Street\"],[\"Kensington Olympia Station, Olympia\"],[\"Percival Street, Finsbury\"],[\"Northington Street , Holborn\"],[\"Serpentine Car Park, Hyde Park\"],[\"Brunswick Square, Bloomsbury\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Somerset House, Strand\"],[\"Binfield Road, Stockwell\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Vincent Square, Westminster\"],[\"Sandilands Road, Walham Green\"],[\"Sedding Street, Sloane Square\"],[\"Broadcasting House, Marylebone\"],[\"Kensington Olympia Station, Olympia\"],[\"Hatton Wall, Holborn\"],[\"Battersea Power Station, Battersea Park\"],[\"Green Park Station, Mayfair\"],[\"Drury Lane, Covent Garden\"],[\"Phillimore Gardens, Kensington\"],[\"Kennington Lane Tesco, Vauxhall\"],[\"Northington Street , Holborn\"],[\"Albany Street, The Regent's Park\"],[\"Page Street, Westminster\"],[\"Chrisp Street Market, Poplar\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Abbotsbury Road, Holland Park\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Halford Road, West Kensington\"],[\"Gwendwr Road, West Kensington\"],[\"Belvedere Road 1, South Bank\"],[\"Penywern Road, Earl's Court\"],[\"Royal Avenue 2, Chelsea\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Battersea Power Station, Battersea Park\"],[\"Gaywood  Street, Elephant & Castle\"],[\"East Road, Hoxton\"],[\"Long Lane , Bermondsey\"],[\"Green Park Station, Mayfair\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Southwark Street, Bankside\"],[\"Hereford Road, Bayswater\"],[\"Belvedere Road 1, South Bank\"],[\"Handyside Street, King's Cross\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Kensington Church Street, Kensington\"],[\"Baylis Road, Waterloo\"],[\"Finsbury Library , Finsbury\"],[\"Belgrove Street , King's Cross\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Warwick Avenue Station, Maida Vale\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"The Vale, Chelsea\"],[\"Doric Way , Somers Town\"],[\"Sun Street, Liverpool Street\"],[\"Lancaster Gate , Bayswater\"],[\"Roscoe Street, St. Luke's\"],[\"South Audley Street, Mayfair\"],[\"Ford Road, Old Ford\"],[\"Long Lane , Bermondsey\"],[\"Park Lane , Hyde Park\"],[\"Hereford Road, Bayswater\"],[\"Abingdon Villas, Kensington\"],[\"Sun Street, Liverpool Street\"],[\"One Tower Bridge, Bermondsey\"],[\"Godliman Street, St. Paul's\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Houghton Street, Strand\"],[\"Curzon Street, Mayfair\"],[\"Drury Lane, Covent Garden\"],[\"Stephendale Road, Sands End\"],[\"Ossulston Street, Somers Town\"],[\"Godliman Street, St. Paul's\"],[\"Wenlock Road , Hoxton\"],[\"Royal London Hospital, Whitechapel\"],[\"River Street , Clerkenwell\"],[\"Fanshaw Street, Hoxton\"],[\"Fanshaw Street, Hoxton\"],[\"Clerkenwell Green, Clerkenwell\"],[\"Hansard Mews, Holland Park\"],[\"Belgrove Street , King's Cross\"],[\"Houndsditch, Aldgate\"],[\"Salmon Lane, Limehouse\"],[\"Bouverie Street, Temple\"],[\"Shoreditch High Street, Shoreditch\"],[\"Driffield Road, Old Ford\"],[\"Houndsditch, Aldgate\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Drummond Street , Euston\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Hatton Wall, Holborn\"],[\"Windsor Terrace, Hoxton\"],[\"Houghton Street, Strand\"],[\"Battersea Power Station, Battersea Park\"],[\"Good's Way, King's Cross\"],[\"Brushfield Street, Liverpool Street\"],[\"Victoria & Albert Museum, South Kensington\"],[\"Bruton Street, Mayfair\"],[\"Westminster Bridge Road, Elephant & Castle\"],[\"Christopher Street, Liverpool Street\"],[\"Royal Avenue 2, Chelsea\"],[\"Swan Street, The Borough\"],[\"Albert Gate, Hyde Park\"],[\"Belgrove Street , King's Cross\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Sandilands Road, Walham Green\"],[\"Antill Road, Mile End\"],[\"Malet Street, Bloomsbury\"],[\"Wellington Row, Bethnal Green\"],[\"Sopwith Way, Battersea Park\"],[\"Gwendwr Road, West Kensington\"],[\"Central House, Aldgate\"],[\"Belvedere Road, South Bank\"],[\"Bury Place, Holborn\"],[\"Watney Street, Shadwell\"],[\"Clapham Road, Lingham Street, Stockwell\"],[\"Malet Street, Bloomsbury\"],[\"Broadwick Street, Soho\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Albany Street, The Regent's Park\"],[\"Battersea Power Station, Battersea Park\"],[\"Abbotsbury Road, Holland Park\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Red Lion Square, Holborn\"],[\"Clarges Street, Mayfair\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Antill Road, Mile End\"],[\"Malet Street, Bloomsbury\"],[\"Marylebone Lane, Marylebone\"],[\"De Vere Gardens, Kensington\"],[\"Baylis Road, Waterloo\"],[\"Black Prince Road, Vauxhall\"],[\"Shoreditch High Street, Shoreditch\"],[\"Bury Place, Holborn\"],[\"Cromer Street, Bloomsbury\"],[\"Commercial Street, Shoreditch\"],[\"Claverton Street, Pimlico\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Ladbroke Grove Central, Ladbroke Grove\"],[\"Roscoe Street, St. Luke's\"],[\"Malet Street, Bloomsbury\"],[\"New Fetter Lane, Holborn\"],[\"Fanshaw Street, Hoxton\"],[\"Southwick Street, Paddington\"],[\"New Globe Walk, Bankside\"],[\"Tooley Street, Bermondsey\"],[\"Ossulston Street, Somers Town\"],[\"Kensington Church Street, Kensington\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Clarges Street, Mayfair\"],[\"Sedding Street, Sloane Square\"],[\"Tooley Street, Bermondsey\"],[\"Sun Street, Liverpool Street\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Belvedere Road, South Bank\"],[\"Page Street, Westminster\"],[\"Drummond Street , Euston\"],[\"North Wharf Road, Paddington\"],[\"Ossulston Street, Somers Town\"],[\"Broadcasting House, Marylebone\"],[\"Malet Street, Bloomsbury\"],[\"Rathbone Street, Fitzrovia\"],[\"Serpentine Car Park, Hyde Park\"],[\"Brunswick Square, Bloomsbury\"],[\"Bancroft Road, Bethnal Green\"],[\"Belgrave Road, Victoria\"],[\"Wellington Row, Bethnal Green\"],[\"Nesham Street, Wapping\"],[\"Hereford Road, Bayswater\"],[\"Queen's Gate (North), Kensington\"],[\"Windsor Terrace, Hoxton\"],[\"Maida Vale, Maida Vale\"],[\"Somerset House, Strand\"],[\"Broadwick Street, Soho\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Fanshaw Street, Hoxton\"],[\"Clapham Common North Side, Clapham Common\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Curzon Street, Mayfair\"],[\"Manresa Road, Chelsea\"],[\"Bouverie Street, Temple\"],[\"Handyside Street, King's Cross\"],[\"Brunswick Square, Bloomsbury\"],[\"Great Russell Street, Bloomsbury\"],[\"Rathbone Street, Fitzrovia\"],[\"Golden Lane, Barbican\"],[\"Lincoln's Inn Fields, Holborn\"],[\"One Tower Bridge, Bermondsey\"],[\"Greenberry Street, St.John's Wood\"],[\"Serpentine Car Park, Hyde Park\"],[\"Portman Square, Marylebone\"],[\"Somerset House, Strand\"],[\"Phillimore Gardens, Kensington\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Warwick Road, Olympia\"],[\"Pritchard's Road, Bethnal Green\"],[\"Watney Street, Shadwell\"],[\"Pancras Road, King's Cross\"],[\"Aberfeldy Street, Poplar\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Marylebone Lane, Marylebone\"],[\"Broadcasting House, Marylebone\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Albert Gate, Hyde Park\"],[\"Malet Street, Bloomsbury\"],[\"Here East South, Queen Elizabeth Olympic Park\"],[\"Christopher Street, Liverpool Street\"],[\"King Edward Street, St Pauls\"],[\"Houghton Street, Strand\"],[\"Gwendwr Road, West Kensington\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Westferry Circus, Canary Wharf\"],[\"Commercial Street, Shoreditch\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Westminster University, Marylebone\"],[\"Westfield Ariel Way, White City\"],[\"Page Street, Westminster\"],[\"St Mary's Hospital, Paddington\"],[\"Lavington Street, Bankside\"],[\"Baylis Road, Waterloo\"],[\"Manresa Road, Chelsea\"],[\"Drummond Street , Euston\"],[\"Marylebone Lane, Marylebone\"],[\"Maida Vale, Maida Vale\"],[\"Bouverie Street, Temple\"],[\"Curlew Street, Shad Thames\"],[\"Tallis Street, Temple\"],[\"Battersea Power Station, Battersea Park\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Kensington Olympia Station, Olympia\"],[\"Here East North, Queen Elizabeth Olympic Park\"],[\"Birkenhead Street, King's Cross\"],[\"Royal London Hospital, Whitechapel\"],[\"Lambeth Palace Road, Waterloo\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Northington Street , Holborn\"],[\"Old Montague Street, Whitechapel\"],[\"Bancroft Road, Bethnal Green\"],[\"Baylis Road, Waterloo\"],[\"Gloucester Avenue, Camden Town\"],[\"Boston Place, Marylebone\"],[\"New Globe Walk, Bankside\"],[\"Montpelier Street, Knightsbridge\"],[\"Halford Road, West Kensington\"],[\"Twig Folly Bridge, Mile End\"],[\"Montpelier Street, Knightsbridge\"],[\"Godliman Street, St. Paul's\"],[\"Regent's Row , Haggerston \"],[\"Bruton Street, Mayfair\"],[\"Regency Street, Westminster\"],[\"Tallis Street, Temple\"],[\"Tysoe Street, Clerkenwell\"],[\"Brunswick Square, Bloomsbury\"],[\"Kensington Church Street, Kensington\"],[\"Tate Modern, Bankside\"],[\"Wenlock Road , Hoxton\"],[\"Southwark Street, Bankside\"],[\"Page Street, Westminster\"],[\"Curlew Street, Shad Thames\"],[\"Tallis Street, Temple\"],[\"Malet Street, Bloomsbury\"],[\"Somerset House, Strand\"],[\"Shoreditch High Street, Shoreditch\"],[\"Vincent Square, Westminster\"],[\"Leonard Circus , Shoreditch\"],[\"Manresa Road, Chelsea\"],[\"Kingsway, Covent Garden\"],[\"Gaywood  Street, Elephant & Castle\"],[\"The Metropolitan, Portobello\"],[\"Brunswick Square, Bloomsbury\"],[\"Clinton Road, Mile End\"],[\"Preston's Road, Cubitt Town\"],[\"Marylebone Lane, Marylebone\"],[\"Warwick Road, Olympia\"],[\"Tooley Street, Bermondsey\"],[\"Serpentine Car Park, Hyde Park\"],[\"British Museum, Bloomsbury\"],[\"Tallis Street, Temple\"],[\"St. Mary Axe, Aldgate\"],[\"Belgrove Street , King's Cross\"],[\"Imperial Wharf Station, Sands End\"],[\"Westminster Pier, Westminster\"],[\"Central House, Aldgate\"],[\"Baylis Road, Waterloo\"],[\"Belvedere Road, South Bank\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Watney Street, Shadwell\"],[\"Shoreditch High Street, Shoreditch\"],[\"Limburg Road, Clapham Junction\"],[\"Waterloo Station 3, Waterloo\"],[\"Black Prince Road, Vauxhall\"],[\"Great Russell Street, Bloomsbury\"],[\"Bolsover Street, Fitzrovia\"],[\"Belvedere Road, South Bank\"],[\"Drury Lane, Covent Garden\"],[\"Shoreditch High Street, Shoreditch\"],[\"Belgrove Street , King's Cross\"],[\"Handyside Street, King's Cross\"],[\"Russell Gardens, Olympia\"],[\"Upper Richmond Road, Putney\"],[\"Regency Street, Westminster\"],[\"Malet Street, Bloomsbury\"],[\"De Vere Gardens, Kensington\"],[\"Farm Street, Mayfair\"],[\"Import Dock, Canary Wharf\"],[\"Baylis Road, Waterloo\"],[\"Godliman Street, St. Paul's\"],[\"Drury Lane, Covent Garden\"],[\"Phillimore Gardens, Kensington\"],[\"Green Park Station, Mayfair\"],[\"Birkenhead Street, King's Cross\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Blackfriars Road, Southwark\"],[\"Bedford Way, Bloomsbury\"],[\"Royal Avenue 2, Chelsea\"],[\"Bury Place, Holborn\"],[\"Sedding Street, Sloane Square\"],[\"Greyhound Road, Hammersmith\"],[\"Little Brook Green, Brook Green\"],[\"Regent's Row , Haggerston\"],[\"Euston Square Gardens, Euston\"],[\"Elizabeth Bridge, Victoria\"],[\"Here East North, Queen Elizabeth Olympic Park\"],[\"Smith Square, Westminster\"],[\"Serpentine Car Park, Hyde Park\"],[\"Bedford Way, Bloomsbury\"],[\"Somerset House, Strand\"],[\"Sopwith Way, Battersea Park\"],[\"East India DLR, Blackwall\"],[\"Albert Square, Stockwell\"],[\"Tooley Street, Bermondsey\"],[\"North Wharf Road, Paddington\"],[\"Crawford Street, Marylebone\"],[\"Rathbone Street, Fitzrovia\"],[\"Regency Street, Westminster\"],[\"Kensington Church Street, Kensington\"],[\"Green Park Station, Mayfair\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Old Montague Street, Whitechapel\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Bolsover Street, Fitzrovia\"],[\"Maplin Street, Mile End\"],[\"Roscoe Street, St. Luke's\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Drury Lane, Covent Garden\"],[\"Red Lion Square, Holborn\"],[\"Leonard Circus , Shoreditch\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Hoxton Station, Hoxton\"],[\"Portman Square, Marylebone\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Windsor Terrace, Hoxton\"],[\"Salmon Lane, Limehouse\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Abingdon Villas, Kensington\"],[\"New Fetter Lane, Holborn\"],[\"Taviton Street, Bloomsbury\"],[\"Goldsmith's Row, Haggerston\"],[\"Golden Lane, Barbican\"],[\"Boston Place, Marylebone\"],[\"Barbican Centre, Barbican\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Broadcasting House, Marylebone\"],[\"De Vere Gardens, Kensington\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Ampton Street , Clerkenwell\"],[\"Albany Street, The Regent's Park\"],[\"Malet Street, Bloomsbury\"],[\"Grafton Street, Mayfair\"],[\"Bourne Street, Belgravia\"],[\"St. George's Square, Pimlico\"],[\"Black Prince Road, Vauxhall\"],[\"Malet Street, Bloomsbury\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Belgrove Street , King's Cross\"],[\"Gauden Road, Clapham\"],[\"Wenlock Road , Hoxton\"],[\"Green Park Station, Mayfair\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Pritchard's Road, Bethnal Green\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Albany Street, The Regent's Park\"],[\"Phillimore Gardens, Kensington\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Stratford Station, Stratford\"],[\"Wendon Street, Old Ford\"],[\"St Mary's Hospital, Paddington\"],[\"Bruton Street, Mayfair\"],[\"Golden Lane, Barbican\"],[\"Kensington Olympia Station, Olympia\"],[\"Binfield Road, Stockwell\"],[\"Wenlock Road , Hoxton\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Leonard Circus , Shoreditch\"],[\"Wenlock Road , Hoxton\"],[\"Battersea Power Station, Battersea Park\"],[\"Binfield Road, Stockwell\"],[\"Green Park Station, Mayfair\"],[\"Smith Square, Westminster\"],[\"Crawford Street, Marylebone\"],[\"Barbican Centre, Barbican\"],[\"Black Lion Gate, Kensington Gardens\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Riverlight South, Nine Elms\"],[\"Nesham Street, Wapping\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Rathbone Street, Fitzrovia\"],[\"Wendon Street, Old Ford\"],[\"Clinton Road, Mile End\"],[\"Parson's Green , Parson's Green\"],[\"Binfield Road, Stockwell\"],[\"Christopher Street, Liverpool Street\"],[\"St. Mary Axe, Aldgate\"],[\"Finsbury Library , Finsbury\"],[\"Sedding Street, Sloane Square\"],[\"Arlington Road, Camden Town\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Ford Road, Old Ford\"],[\"Charlbert Street, St. John's Wood\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Christopher Street, Liverpool Street\"],[\"Lambeth North Station, Waterloo\"],[\"Belgrove Street , King's Cross\"],[\"Houndsditch, Aldgate\"],[\"Marylebone Lane, Marylebone\"],[\"Ladbroke Grove Central, Ladbroke Grove\"],[\"Tysoe Street, Clerkenwell\"],[\"Barbican Centre, Barbican\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"St. Mary Axe, Aldgate\"],[\"Sandilands Road, Walham Green\"],[\"Belgrave Road, Victoria\"],[\"Taviton Street, Bloomsbury\"],[\"Fulham Park Road, Fulham\"],[\"Goldsmith's Row, Haggerston\"],[\"Christopher Street, Liverpool Street\"],[\"Westminster Pier, Westminster\"],[\"Belgrove Street , King's Cross\"],[\"Hoxton Station, Hoxton\"],[\"Imperial Wharf Station, Sands End\"],[\"Hammersmith Road, Hammersmith\"],[\"River Street , Clerkenwell\"],[\"Shoreditch High Street, Shoreditch\"],[\"Arlington Road, Camden Town\"],[\"Goldsmith's Row, Haggerston\"],[\"Warwick Road, Olympia\"],[\"St. Chad's Street, King's Cross\"],[\"Westferry Circus, Canary Wharf\"],[\"Taviton Street, Bloomsbury\"],[\"Royal London Hospital, Whitechapel\"],[\"Albert Gate, Hyde Park\"],[\"Southwick Street, Paddington\"],[\"Golden Lane, Barbican\"],[\"Tysoe Street, Clerkenwell\"],[\"Wenlock Road , Hoxton\"],[\"Good's Way, King's Cross\"],[\"Albany Street, The Regent's Park\"],[\"Binfield Road, Stockwell\"],[\"Broadcasting House, Marylebone\"],[\"Park Street, Bankside\"],[\"Westfield Ariel Way, White City\"],[\"Northington Street , Holborn\"],[\"Green Park Station, Mayfair\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Imperial Wharf Station, Sands End\"],[\"Shoreditch High Street, Shoreditch\"],[\"Lambeth North Station, Waterloo\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Sun Street, Liverpool Street\"],[\"Great Russell Street, Bloomsbury\"],[\"Regent's Row , Haggerston \"],[\"Doric Way , Somers Town\"],[\"Kensington Olympia Station, Olympia\"],[\"Green Park Station, Mayfair\"],[\"Abingdon Villas, Kensington\"],[\"Malet Street, Bloomsbury\"],[\"Royal Avenue 2, Chelsea\"],[\"Northington Street , Holborn\"],[\"Boston Place, Marylebone\"],[\"Bourne Street, Belgravia\"],[\"Broadcasting House, Marylebone\"],[\"Handyside Street, King's Cross\"],[\"Winsland Street, Paddington\"],[\"Phillimore Gardens, Kensington\"],[\"Little Brook Green, Brook Green\"],[\"Warwick Road, Olympia\"],[\"De Vere Gardens, Kensington\"],[\"Albany Street, The Regent's Park\"],[\"Great Russell Street, Bloomsbury\"],[\"Arlington Road, Camden Town\"],[\"Shoreditch High Street, Shoreditch\"],[\"Portman Square, Marylebone\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Northington Street , Holborn\"],[\"Royal Avenue 2, Chelsea\"],[\"Belvedere Road 2, South Bank\"],[\"Kensington Church Street, Kensington\"],[\"Tysoe Street, Clerkenwell\"],[\"Serpentine Car Park, Hyde Park\"],[\"Regent's Row , Haggerston \"],[\"Flamborough Street, Limehouse\"],[\"Drury Lane, Covent Garden\"],[\"Langdon Park, Poplar\"],[\"Tallis Street, Temple\"],[\"Godliman Street, St. Paul's\"],[\"Euston Square Gardens, Euston\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Albert Square, Stockwell\"],[\"Bevington Road West, North Kensington\"],[\"Commercial Street, Shoreditch\"],[\"New Spring Gardens Walk, Vauxhall\"],[\"St Mary's Hospital, Paddington\"],[\"Bruton Street, Mayfair\"],[\"Green Park Station, Mayfair\"],[\"Good's Way, King's Cross\"],[\"Westminster Pier, Westminster\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Salmon Lane, Limehouse\"],[\"Antill Road, Mile End\"],[\"Kensington Church Street, Kensington\"],[\"Roscoe Street, St. Luke's\"],[\"Abbotsbury Road, Holland Park\"],[\"Watney Street, Shadwell\"],[\"Victoria Rise, Clapham Common\"],[\"Sandilands Road, Walham Green\"],[\"Albert Gate, Hyde Park\"],[\"Albert Gate, Hyde Park\"],[\"Baylis Road, Waterloo\"],[\"River Street , Clerkenwell\"],[\"Belgrove Street , King's Cross\"],[\"Belgrave Road, Victoria\"],[\"Kensington Gore, Knightsbridge\"],[\"Houndsditch, Aldgate\"],[\"Marylebone Lane, Marylebone\"],[\"British Museum, Bloomsbury\"],[\"Finsbury Library , Finsbury\"],[\"Belgrove Street , King's Cross\"],[\"Bevington Road West, North Kensington\"],[\"Wenlock Road , Hoxton\"],[\"Godliman Street, St. Paul's\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Embankment (Savoy), Strand\"],[\"Fanshaw Street, Hoxton\"],[\"Salmon Lane, Limehouse\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Belgrave Road, Victoria\"],[\"Broadcasting House, Marylebone\"],[\"Rathbone Street, Fitzrovia\"],[\"Bouverie Street, Temple\"],[\"Blackfriars Road, Southwark\"],[\"Pancras Road, King's Cross\"],[\"Hurlingham Park, Parsons Green\"],[\"Tysoe Street, Clerkenwell\"],[\"Wenlock Road , Hoxton\"],[\"St. Mary Axe, Aldgate\"],[\"Ampton Street , Clerkenwell\"],[\"St. Chad's Street, King's Cross\"],[\"Clapham Road, Lingham Street, Stockwell\"],[\"Westminster Pier, Westminster\"],[\"Imperial Wharf Station, Sands End\"],[\"Bolsover Street, Fitzrovia\"],[\"St Mary's Hospital, Paddington\"],[\"Kensington Gore, Knightsbridge\"],[\"Harford Street, Mile End\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Godliman Street, St. Paul's\"],[\"Shoreditch High Street, Shoreditch\"],[\"Serpentine Car Park, Hyde Park\"],[\"Regent's Row , Haggerston \"],[\"Bevington Road West, North Kensington\"],[\"Commercial Street, Shoreditch\"],[\"Melton Street, Euston\"],[\"Melton Street, Euston\"],[\"Birkenhead Street, King's Cross\"],[\"Hatton Wall, Holborn\"],[\"Blackfriars Road, Southwark\"],[\"Hurlingham Park, Parsons Green\"],[\"Kensington Olympia Station, Olympia\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Victory place, Walworth\"],[\"Marylebone Lane, Marylebone\"],[\"Regent's Row , Haggerston \"],[\"Southwick Street, Paddington\"],[\"Battersea Power Station, Battersea Park\"],[\"New Spring Gardens Walk, Vauxhall\"],[\"Embankment (Savoy), Strand\"],[\"Westminster Pier, Westminster\"],[\"New Globe Walk, Bankside\"],[\"Baylis Road, Waterloo\"],[\"Albert Gate, Hyde Park\"],[\"Royal London Hospital, Whitechapel\"],[\"Somerset House, Strand\"],[\"Serpentine Car Park, Hyde Park\"],[\"Montpelier Street, Knightsbridge\"],[\"Hatton Wall, Holborn\"],[\"Kensington Gore, Knightsbridge\"],[\"Bevington Road West, North Kensington\"],[\"Goldsmith's Row, Haggerston\"],[\"King Edward Street, St Pauls\"],[\"Crawford Street, Marylebone\"],[\"Tooley Street, Bermondsey\"],[\"North Wharf Road, Paddington\"],[\"Elizabeth Bridge, Victoria\"],[\"Tooley Street, Bermondsey\"],[\"Lambeth Palace Road, Waterloo\"],[\"Royal Avenue 2, Chelsea\"],[\"Sedding Street, Sloane Square\"],[\"Hatton Wall, Holborn\"],[\"Finsbury Library , Finsbury\"],[\"Grafton Street, Mayfair\"],[\"Regent's Row , Haggerston\"],[\"Royal London Hospital, Whitechapel\"],[\"Bourne Street, Belgravia\"],[\"Hatton Wall, Holborn\"],[\"Tysoe Street, Clerkenwell\"],[\"Curlew Street, Shad Thames\"],[\"Binfield Road, Stockwell\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Euston Square Gardens, Euston\"],[\"Bury Place, Holborn\"],[\"Westferry Circus, Canary Wharf\"],[\"Regent's Row , Haggerston \"],[\"Wellington Row, Bethnal Green\"],[\"Watney Market, Stepney\"],[\"Clapham Common North Side, Clapham Common\"],[\"Serpentine Car Park, Hyde Park\"],[\"Tooley Street, Bermondsey\"],[\"Belgrove Street , King's Cross\"],[\"Wellington Row, Bethnal Green\"],[\"Belgrove Street , King's Cross\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Hereford Road, Bayswater\"],[\"Sopwith Way, Battersea Park\"],[\"Rathbone Street, Fitzrovia\"],[\"Knaresborough Place, Earl's Court\"],[\"Rectory Square, Stepney\"],[\"New Spring Gardens Walk, Vauxhall\"],[\"Cumberland Gate, Hyde Park\"],[\"Warwick Road, Olympia\"],[\"Malet Street, Bloomsbury\"],[\"De Vere Gardens, Kensington\"],[\"Belgrove Street , King's Cross\"],[\"Winsland Street, Paddington\"],[\"Gloucester Avenue, Camden Town\"],[\"Percival Street, Finsbury\"],[\"Salmon Lane, Limehouse\"],[\"Stratford Station, Stratford\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Tysoe Street, Clerkenwell\"],[\"Wenlock Road , Hoxton\"],[\"Phillimore Gardens, Kensington\"],[\"Regency Street, Westminster\"],[\"Westminster Pier, Westminster\"],[\"Long Lane , Bermondsey\"],[\"Green Park Station, Mayfair\"],[\"Phillimore Gardens, Kensington\"],[\"Hatton Wall, Holborn\"],[\"Ladbroke Grove Central, Ladbroke Grove\"],[\"Broadwick Street, Soho\"],[\"Lancaster Drive, Blackwall\"],[\"Barbican Centre, Barbican\"],[\"Leonard Circus , Shoreditch\"],[\"Westferry Circus, Canary Wharf\"],[\"Queensbridge Road, Haggerston\"],[\"Pindar Street, Liverpool Street\"],[\"Baylis Road, Waterloo\"],[\"Good's Way, King's Cross\"],[\"Belgrove Street , King's Cross\"],[\"Riverlight South, Nine Elms\"],[\"Imperial Wharf Station, Sands End\"],[\"Tate Modern, Bankside\"],[\"Belgrave Road, Victoria\"],[\"Good's Way, King's Cross\"],[\"Abingdon Villas, Kensington\"],[\"Phillimore Gardens, Kensington\"],[\"Crawford Street, Marylebone\"],[\"Finsbury Library , Finsbury\"],[\"Bancroft Road, Bethnal Green\"],[\"Winsland Street, Paddington\"],[\"Antill Road, Mile End\"],[\"Hatton Wall, Holborn\"],[\"Manresa Road, Chelsea\"],[\"Carnegie Street, King's Cross\"],[\"Roscoe Street, St. Luke's\"],[\"New Globe Walk, Bankside\"],[\"Halford Road, West Kensington\"],[\"Lambeth North Station, Waterloo\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Harford Street, Mile End\"],[\"Belgrove Street , King's Cross\"],[\"Battersea Power Station, Battersea Park\"],[\"Copper Box Arena, Queen Elizabeth Olympic Park\"],[\"King Edward Street, St Pauls\"],[\"Fanshaw Street, Hoxton\"],[\"Embankment (Savoy), Strand\"],[\"Bedford Way, Bloomsbury\"],[\"Vincent Square, Westminster\"],[\"Belgrave Road, Victoria\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Montgomery Square, Canary Wharf\"],[\"Hoxton Station, Hoxton\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Gwendwr Road, West Kensington\"],[\"Belvedere Road 1, South Bank\"],[\"Princes Square, Bayswater\"],[\"Westminster Pier, Westminster\"],[\"Belgrave Road, Victoria\"],[\"Imperial Wharf Station, Sands End\"],[\"Southwark Street, Bankside\"],[\"Fanshaw Street, Hoxton\"],[\"New Fetter Lane, Holborn\"],[\"Langdon Park, Poplar\"],[\"Preston's Road, Cubitt Town\"],[\"Lancaster Gate , Bayswater\"],[\"Twig Folly Bridge, Mile End\"],[\"One Tower Bridge, Bermondsey\"],[\"Houndsditch, Aldgate\"],[\"Fanshaw Street, Hoxton\"],[\"Binfield Road, Stockwell\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Royal Avenue 2, Chelsea\"],[\"St. Mary Axe, Aldgate\"],[\"Putney Pier, Wandsworth\"],[\"Somerset House, Strand\"],[\"Taviton Street, Bloomsbury\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Elizabeth Bridge, Victoria\"],[\"Malet Street, Bloomsbury\"],[\"Long Lane , Bermondsey\"],[\"Nesham Street, Wapping\"],[\"Wellington Row, Bethnal Green\"],[\"Tate Modern, Bankside\"],[\"Nesham Street, Wapping\"],[\"Wellington Row, Bethnal Green\"],[\"Victoria & Albert Museum, South Kensington\"],[\"Shoreditch High Street, Shoreditch\"],[\"British Museum, Bloomsbury\"],[\"St. George's Square, Pimlico\"],[\"Northington Street , Holborn\"],[\"Clarges Street, Mayfair\"],[\"Malet Street, Bloomsbury\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Page Street, Westminster\"],[\"Tysoe Street, Clerkenwell\"],[\"Scala Street, Fitzrovia\"],[\"Leonard Circus , Shoreditch\"],[\"Bruton Street, Mayfair\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Bevington Road West, North Kensington\"],[\"Finsbury Library , Finsbury\"],[\"Ampton Street , Clerkenwell\"],[\"Lambeth Palace Road, Waterloo\"],[\"British Museum, Bloomsbury\"],[\"Green Park Station, Mayfair\"],[\"Winsland Street, Paddington\"],[\"Green Park Station, Mayfair\"],[\"Curlew Street, Shad Thames\"],[\"Warwick Road, Olympia\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Lambeth North Station, Waterloo\"],[\"Russell Gardens, Olympia\"],[\"Manresa Road, Chelsea\"],[\"Nesham Street, Wapping\"],[\"Westminster University, Marylebone\"],[\"Nesham Street, Wapping\"],[\"Bedford Way, Bloomsbury\"],[\"Russell Gardens, Olympia\"],[\"Clapham Common North Side, Clapham Common\"],[\"Bouverie Street, Temple\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Albert Gate, Hyde Park\"],[\"Tooley Street, Bermondsey\"],[\"Watney Street, Shadwell\"],[\"St Mary's Hospital, Paddington\"],[\"Albert Square, Stockwell\"],[\"Queen's Gate (North), Kensington\"],[\"Barbican Centre, Barbican\"],[\"De Vere Gardens, Kensington\"],[\"East India DLR, Blackwall\"],[\"Green Park Station, Mayfair\"],[\"Tooley Street, Bermondsey\"],[\"Kensington Church Street, Kensington\"],[\"Battersea Power Station, Battersea Park\"],[\"Pritchard's Road, Bethnal Green\"],[\"Curzon Street, Mayfair\"],[\"Belgrave Road, Victoria\"],[\"New Spring Gardens Walk, Vauxhall\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Cumberland Gate, Hyde Park\"],[\"Malet Street, Bloomsbury\"],[\"Elizabeth Bridge, Victoria\"],[\"Curzon Street, Mayfair\"],[\"Christopher Street, Liverpool Street\"],[\"Bolsover Street, Fitzrovia\"],[\"Halford Road, West Kensington\"],[\"Prince of Wales Drive, Battersea Park\"],[\"Lambeth Palace Road, Waterloo\"],[\"Southwick Street, Paddington\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Doric Way , Somers Town\"],[\"Tysoe Street, Clerkenwell\"],[\"Tooley Street, Bermondsey\"],[\"East Road, Hoxton\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Albert Square, Stockwell\"],[\"Claverton Street, Pimlico\"],[\"Taviton Street, Bloomsbury\"],[\"Albert Gate, Hyde Park\"],[\"Curzon Street, Mayfair\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Blackfriars Road, Southwark\"],[\"Euston Square Gardens, Euston\"],[\"Drury Lane, Covent Garden\"],[\"Victory Place, Walworth\"],[\"Southwark Street, Bankside\"],[\"Belgrove Street , King's Cross\"],[\"Bevington Road West, North Kensington\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Sun Street, Liverpool Street\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Elizabeth Bridge, Victoria\"],[\"Here East North, Queen Elizabeth Olympic Park\"],[\"Kings Gate House, Westminster\"],[\"St. George's Square, Pimlico\"],[\"Harford Street, Mile End\"],[\"Chrisp Street Market, Poplar\"],[\"Taviton Street, Bloomsbury\"],[\"Hatton Wall, Holborn\"],[\"East Road, Hoxton\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Old Montague Street, Whitechapel\"],[\"Drury Lane, Covent Garden\"],[\"Warwick Avenue Station, Maida Vale\"],[\"New Fetter Lane, Holborn\"],[\"Binfield Road, Stockwell\"],[\"Driffield Road, Old Ford\"],[\"Halford Road, West Kensington\"],[\"Serpentine Car Park, Hyde Park\"],[\"Empire Square, The Borough\"],[\"Melton Street, Euston\"],[\"Belgrove Street , King's Cross\"],[\"Eaton Square, Belgravia\"],[\"Handyside Street, King's Cross\"],[\"Commercial Street, Shoreditch\"],[\"Bruton Street, Mayfair\"],[\"Swan Street, The Borough\"],[\"Serpentine Car Park, Hyde Park\"],[\"Drury Lane, Covent Garden\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Kensington Olympia Station, Olympia\"],[\"Belgrove Street , King's Cross\"],[\"Somerset House, Strand\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Good's Way, King's Cross\"],[\"Warwick Road, Olympia\"],[\"Somerset House, Strand\"],[\"New Fetter Lane, Holborn\"],[\"Hansard Mews, Holland Park\"],[\"British Museum, Bloomsbury\"],[\"Windsor Terrace, Hoxton\"],[\"Drury Lane, Covent Garden\"],[\"Barbican Centre, Barbican\"],[\"Twig Folly Bridge, Mile End\"],[\"Serpentine Car Park, Hyde Park\"],[\"Green Park Station, Mayfair\"],[\"Drury Lane, Covent Garden\"],[\"Rectory Square, Stepney\"],[\"Old Montague Street, Whitechapel\"],[\"Commercial Street, Shoreditch\"],[\"Lincoln's Inn Fields, Holborn\"],[\"London Zoo,  The Regent's Park\"],[\"Belgrove Street , King's Cross\"],[\"Elizabeth Bridge, Victoria\"],[\"Broadwick Street, Soho\"],[\"Halford Road, West Kensington\"],[\"Fanshaw Street, Hoxton\"],[\"Albert Gate, Hyde Park\"],[\"East Road, Hoxton\"],[\"Riverlight South, Nine Elms\"],[\"Elizabeth Bridge, Victoria\"],[\"Belgrove Street , King's Cross\"],[\"St. George's Square, Pimlico\"],[\"Shoreditch High Street, Shoreditch\"],[\"River Street , Clerkenwell\"],[\"Swan Street, The Borough\"],[\"Albert Gate, Hyde Park\"],[\"Belgrove Street , King's Cross\"],[\"Portman Square, Marylebone\"],[\"Sedding Street, Sloane Square\"],[\"Blackfriars Road, Southwark\"],[\"Putney Pier, Wandsworth\"],[\"Belgrove Street , King's Cross\"],[\"Belgrove Street , King's Cross\"],[\"Twig Folly Bridge, Mile End\"],[\"Driffield Road, Old Ford\"],[\"St. George's Square, Pimlico\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Penywern Road, Earl's Court\"],[\"Pritchard's Road, Bethnal Green\"],[\"Albert Gate, Hyde Park\"],[\"Broadley Terrace, Marylebone\"],[\"Knaresborough Place, Earl's Court\"],[\"Godliman Street, St. Paul's\"],[\"Imperial Wharf Station, Sands End\"],[\"Belgrove Street , King's Cross\"],[\"Tate Modern, Bankside\"],[\"Percival Street, Finsbury\"],[\"Bancroft Road, Bethnal Green\"],[\"London Zoo,  The Regent's Park\"],[\"Old Montague Street, Whitechapel\"],[\"Euston Road, Euston\"],[\"St Mary's Hospital, Paddington\"],[\"Westminster Pier, Westminster\"],[\"Barbican Centre, Barbican\"],[\"Westferry Circus, Canary Wharf\"],[\"Vincent Square, Westminster\"],[\"Clarges Street, West End\"],[\"Aberfeldy Street, Poplar\"],[\"Golden Lane, Barbican\"],[\"Shoreditch High Street, Shoreditch\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Twig Folly Bridge, Mile End\"],[\"Naval Row, Blackwall\"],[\"Bridge Avenue, Hammersmith\"],[\"Antill Road, Mile End\"],[\"Regent's Row , Haggerston \"],[\"Imperial Wharf Station, Sands End\"],[\"Monier Road, Hackney Wick\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Albert Gate, Hyde Park\"],[\"Wellington Row, Bethnal Green\"],[\"Bouverie Street, Temple\"],[\"Lavington Street, Bankside\"],[\"Ossulston Street, Somers Town\"],[\"Regent's Row , Haggerston \"],[\"Swan Street, The Borough\"],[\"One Tower Bridge, Bermondsey\"],[\"Kensington Church Street, Kensington\"],[\"Northington Street , Holborn\"],[\"Royal London Hospital, Whitechapel\"],[\"Baylis Road, Waterloo\"],[\"Serpentine Car Park, Hyde Park\"],[\"Southwick Street, Paddington\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Tysoe Street, Clerkenwell\"],[\"Green Park Station, Mayfair\"],[\"Geraldine Street, Elephant & Castle\"],[\"Curlew Street, Shad Thames\"],[\"Albert Gate, Hyde Park\"],[\"Southwick Street, Paddington\"],[\"Kensington Church Street, Kensington\"],[\"Red Lion Square, Holborn\"],[\"Nesham Street, Wapping\"],[\"Bevington Road West, North Kensington\"],[\"Empire Square, The Borough\"],[\"Regency Street, Westminster\"],[\"Wenlock Road , Hoxton\"],[\"St Mary's Hospital, Paddington\"],[\"Albert Gate, Hyde Park\"],[\"Drury Lane, Covent Garden\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Fanshaw Street, Hoxton\"],[\"Broadwick Street, Soho\"],[\"Imperial Wharf Station, Sands End\"],[\"Serpentine Car Park, Hyde Park\"],[\"Nesham Street, Wapping\"],[\"Old Montague Street, Whitechapel\"],[\"Knaresborough Place, Earl's Court\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Empire Square, The Borough\"],[\"Green Park Station, Mayfair\"],[\"Windsor Terrace, Hoxton\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Battersea Power Station, Battersea Park\"],[\"Belvedere Road 1, South Bank\"],[\"Page Street, Westminster\"],[\"South Audley Street, Mayfair\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Albert Square, Stockwell\"],[\"St. Peter's Terrace, Fulham\"],[\"Lancaster Gate , Bayswater\"],[\"Riverlight South, Nine Elms\"],[\"Tallis Street, Temple\"],[\"Antill Road, Mile End\"],[\"Lodge Road, St. John's Wood\"],[\"Smith Square, Westminster\"],[\"Leonard Circus , Shoreditch\"],[\"Royal London Hospital, Whitechapel\"],[\"Monier Road, Hackney Wick\"],[\"Queensbridge Road, Haggerston\"],[\"Lancaster Gate , Bayswater\"],[\"Belgrave Road, Victoria\"],[\"Swan Street, The Borough\"],[\"Broadcasting House, Marylebone\"],[\"Lancaster Drive, Blackwall\"],[\"Regent's Row , Haggerston\"],[\"St Mary's Hospital, Paddington\"],[\"Geraldine Street, Elephant & Castle\"],[\"Bouverie Street, Temple\"],[\"De Vere Gardens, Kensington\"],[\"Boston Place, Marylebone\"],[\"Goldsmith's Row, Haggerston\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Roscoe Street, St. Luke's\"],[\"Heron Quays DLR, Canary Wharf\"],[\"Tysoe Street, Clerkenwell\"],[\"Kings Gate House, Westminster\"],[\"Tysoe Street, Clerkenwell\"],[\"Rathbone Street, Fitzrovia\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Imperial Wharf Station, Sands End\"],[\"Hop Exchange, The Borough\"],[\"Lambeth North Station, Waterloo\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Here East North, Queen Elizabeth Olympic Park\"],[\"Tooley Street, Bermondsey\"],[\"Pancras Road, King's Cross\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Walworth Square, Walworth\"],[\"Kennington Lane Tesco, Vauxhall\"],[\"River Street , Clerkenwell\"],[\"Embankment (Savoy), Strand\"],[\"British Museum, Bloomsbury\"],[\"River Street , Clerkenwell\"],[\"Watney Street, Shadwell\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Belgrove Street , King's Cross\"],[\"Abingdon Villas, Kensington\"],[\"Pritchard's Road, Bethnal Green\"],[\"Cumberland Gate, Hyde Park\"],[\"Albert Gate, Hyde Park\"],[\"Coram Street, Bloomsbury\"],[\"Doric Way , Somers Town\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Belgrove Street , King's Cross\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"De Vere Gardens, Kensington\"],[\"Shoreditch High Street, Shoreditch\"],[\"Victoria Rise, Clapham Common\"],[\"Tysoe Street, Clerkenwell\"],[\"Doric Way , Somers Town\"],[\"Drury Lane, Covent Garden\"],[\"Northington Street , Holborn\"],[\"Scala Street, Fitzrovia\"],[\"North Wharf Road, Paddington\"],[\"Grafton Street, Mayfair\"],[\"Nesham Street, Wapping\"],[\"Broadwick Street, Soho\"],[\"Godliman Street, St. Paul's\"],[\"Belgrove Street , King's Cross\"],[\"Birkenhead Street, King's Cross\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Black Lion Gate, Kensington Gardens\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Page Street, Westminster\"],[\"Antill Road, Mile End\"],[\"Lambeth Palace Road, Waterloo\"],[\"Battersea Power Station, Battersea Park\"],[\"Hatton Wall, Holborn\"],[\"New Fetter Lane, Holborn\"],[\"Charlbert Street, St. John's Wood\"],[\"Driffield Road, Old Ford\"],[\"Queen's Gate (North), Kensington\"],[\"Vincent Square, Westminster\"],[\"Knaresborough Place, Earl's Court\"],[\"Kensington Church Street, Kensington\"],[\"Kennington Lane Rail Bridge, Vauxhall\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Tooley Street, Bermondsey\"],[\"Sandilands Road, Walham Green\"],[\"Green Park Station, Mayfair\"],[\"King Edward Street, St Pauls\"],[\"Westminster Pier, Westminster\"],[\"De Vere Gardens, Kensington\"],[\"Clarges Street, Mayfair\"],[\"Hatton Wall, Holborn\"],[\"Wenlock Road , Hoxton\"],[\"Southwick Street, Paddington\"],[\"Godliman Street, St. Paul's\"],[\"Doric Way , Somers Town\"],[\"Hansard Mews, Holland Park\"],[\"Bancroft Road, Bethnal Green\"],[\"Golden Lane, Barbican\"],[\"Arlington Road, Camden Town\"],[\"Baylis Road, Waterloo\"],[\"Commercial Street, Shoreditch\"],[\"Warwick Road, Olympia\"],[\"New Fetter Lane, Holborn\"],[\"Tooley Street, Bermondsey\"],[\"Leonard Circus , Shoreditch\"],[\"Marylebone Lane, Marylebone\"],[\"Arlington Road, Camden Town\"],[\"Maida Vale, Maida Vale\"],[\"Hatton Wall, Holborn\"],[\"Battersea Power Station, Battersea Park\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Percival Street, Finsbury\"],[\"Windsor Terrace, Hoxton\"],[\"Bury Place, Holborn\"],[\"Kensington Church Street, Kensington\"],[\"Sandilands Road, Walham Green\"],[\"Clapham Common Northside, Clapham Common\"],[\"Ford Road, Old Ford\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Leonard Circus , Shoreditch\"],[\"Houndsditch, Aldgate\"],[\"Import Dock, Canary Wharf\"],[\"Albert Bridge Road, Battersea Park\"],[\"Cumberland Gate, Hyde Park\"],[\"Handyside Street, King's Cross\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Belvedere Road, South Bank\"],[\"Sedding Street, Sloane Square\"],[\"Curlew Street, Shad Thames\"],[\"Fulham Broadway, Walham Green\"],[\"Halford Road, West Kensington\"],[\"Belgrove Street , King's Cross\"],[\"Royal London Hospital, Whitechapel\"],[\"Kennington Lane Tesco, Vauxhall\"],[\"Clarges Street, Mayfair\"],[\"Clapham Common North Side, Clapham Common\"],[\"Jubilee Plaza, Canary Wharf\"],[\"Percival Street, Finsbury\"],[\"British Museum, Bloomsbury\"],[\"Belgrove Street , King's Cross\"],[\"Manresa Road, Chelsea\"],[\"Charlbert Street, St. John's Wood\"],[\"Broadcasting House, Marylebone\"],[\"Bedford Way, Bloomsbury\"],[\"Lavington Street, Bankside\"],[\"Harford Street, Mile End\"],[\"Green Park Station, West End\"],[\"Drury Lane, Covent Garden\"],[\"Battersea Power Station, Battersea Park\"],[\"Queen's Gate (North), Kensington\"],[\"Malet Street, Bloomsbury\"],[\"New Globe Walk, Bankside\"],[\"Abyssinia Close, Clapham Junction\"],[\"Elizabeth Bridge, Victoria\"],[\"Chrisp Street Market, Poplar\"],[\"Winsland Street, Paddington\"],[\"Princes Square, Bayswater\"],[\"Ford Road, Old Ford\"],[\"Clarges Street, Mayfair\"],[\"Broadwick Street, Soho\"],[\"Taviton Street, Bloomsbury\"],[\"East India DLR, Blackwall\"],[\"Northington Street , Holborn\"],[\"Bourne Street, Belgravia\"],[\"Binfield Road, Stockwell\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Battersea Power Station, Battersea Park\"],[\"Old Montague Street, Whitechapel\"],[\"Westminster Bridge Road, Elephant & Castle\"],[\"Arlington Road, Camden Town\"],[\"Albert Gate, Hyde Park\"],[\"St Mary's Hospital, Paddington\"],[\"Marylebone Lane, Marylebone\"],[\"St. Chad's Street, King's Cross\"],[\"Castlehaven Road, Camden Town\"],[\"Belgrove Street , King's Cross\"],[\"Nesham Street, Wapping\"],[\"Phillimore Gardens, Kensington\"],[\"Imperial Wharf Station, Sands End\"],[\"Fanshaw Street, Hoxton\"],[\"Brunswick Square, Bloomsbury\"],[\"Embankment (Savoy), Strand\"],[\"Victoria Rise, Clapham Common\"],[\"Regency Street, Westminster\"],[\"Knaresborough Place, Earl's Court\"],[\"Tooley Street, Bermondsey\"],[\"Sun Street, Liverpool Street\"],[\"Belvedere Road, South Bank\"],[\"Riverlight South, Nine Elms\"],[\"Lower Thames Street, Monument\"],[\"The Guildhall, Guildhall\"],[\"Curlew Street, Shad Thames\"],[\"Bancroft Road, Bethnal Green\"],[\"Rectory Square, Stepney\"],[\"Albert Gate, Hyde Park\"],[\"Houghton Street, Strand\"],[\"Curzon Street, Mayfair\"],[\"Drummond Street , Euston\"],[\"Doric Way , Somers Town\"],[\"Bouverie Street, Temple\"],[\"Leonard Circus , Shoreditch\"],[\"South Parade, Chelsea\"],[\"Geraldine Street, Elephant & Castle\"],[\"Hampstead Road (Cartmel), Euston\"],[\"Sopwith Way, Battersea Park\"],[\"Binfield Road, Stockwell\"],[\"Abbotsbury Road, Holland Park\"],[\"Christopher Street, Liverpool Street\"],[\"Royal London Hospital, Whitechapel\"],[\"Broadwick Street, Soho\"],[\"Royal London Hospital, Whitechapel\"],[\"Kensington Church Street, Kensington\"],[\"Serpentine Car Park, Hyde Park\"],[\"Vincent Square, Westminster\"],[\"Westminster Pier, Westminster\"],[\"Stephendale Road, Sands End\"],[\"Malet Street, Bloomsbury\"],[\"Arlington Road, Camden Town\"],[\"Abyssinia Close, Clapham Junction\"],[\"Sopwith Way, Battersea Park\"],[\"Vincent Square, Westminster\"],[\"Drury Lane, Covent Garden\"],[\"Ossulston Street, Somers Town\"],[\"Knaresborough Place, Earl's Court\"],[\"Russell Gardens, Olympia\"],[\"Christopher Street, Liverpool Street\"],[\"Leonard Circus , Shoreditch\"],[\"Curzon Street, Mayfair\"],[\"Tysoe Street, Clerkenwell\"],[\"Naval Row, Blackwall\"],[\"St. Mary Axe, Aldgate\"],[\"Drury Lane, Covent Garden\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Regent's Row , Haggerston\"],[\"Abbotsbury Road, Holland Park\"],[\"Embankment (Savoy), Strand\"],[\"Green Park Station, Mayfair\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"East India DLR, Blackwall\"],[\"Tooley Street, Bermondsey\"],[\"Belgrove Street , King's Cross\"],[\"Woodstock Street, Mayfair\"],[\"Belvedere Road 1, South Bank\"],[\"Princes Square, Bayswater\"],[\"Elizabeth Bridge, Victoria\"],[\"Curlew Street, Shad Thames\"],[\"Queensbridge Road, Haggerston\"],[\"Montpelier Street, Knightsbridge\"],[\"Portman Square, Marylebone\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Bancroft Road, Bethnal Green\"],[\"Gaywood  Street, Elephant & Castle\"],[\"Montpelier Street, Knightsbridge\"],[\"Lancaster Gate , Bayswater\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"St. George's Square, Pimlico\"],[\"Hampstead Road (Cartmel), Euston\"],[\"Serpentine Car Park, Hyde Park\"],[\"Empire Square, The Borough\"],[\"Northington Street , Holborn\"],[\"Bolsover Street, Fitzrovia\"],[\"Binfield Road, Stockwell\"],[\"Manresa Road, Chelsea\"],[\"Shoreditch High Street, Shoreditch\"],[\"Bruton Street, Mayfair\"],[\"Knaresborough Place, Earl's Court\"],[\"Bruton Street, Mayfair\"],[\"Empire Square, The Borough\"],[\"Sandilands Road, Walham Green\"],[\"Tate Modern, Bankside\"],[\"Harford Street, Mile End\"],[\"Queen's Gate (North), Kensington\"],[\"Blackfriars Road, Southwark\"],[\"Arlington Road, Camden Town\"],[\"West Smithfield Rotunda, Farringdon\"],[\"Fanshaw Street, Hoxton\"],[\"Royal London Hospital, Whitechapel\"],[\"Wellington Row, Bethnal Green\"],[\"Old Montague Street, Whitechapel\"],[\"Wenlock Road , Hoxton\"],[\"New Globe Walk, Bankside\"],[\"Belgrove Street , King's Cross\"],[\"Goldsmith's Row, Haggerston\"],[\"Albert Gate, Hyde Park\"],[\"Gloucester Avenue, Camden Town\"],[\"Queensbridge Road, Haggerston\"],[\"Curlew Street, Shad Thames\"],[\"St. Chad's Street, King's Cross\"],[\"Knaresborough Place, Earl's Court\"],[\"Scala Street, Fitzrovia\"],[\"Page Street, Westminster\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Albert Gate, Hyde Park\"],[\"Sandilands Road, Walham Green\"],[\"St. George's Square, Pimlico\"],[\"Imperial Wharf Station\"],[\"Montgomery Square, Canary Wharf\"],[\"Pindar Street, Liverpool Street\"],[\"Lambeth Palace Road, Waterloo\"],[\"Doric Way , Somers Town\"],[\"Bouverie Street, Temple\"],[\"Westfield Ariel Way, White City\"],[\"Shoreditch High Street, Shoreditch\"],[\"Doric Way , Somers Town\"],[\"Smith Square, Westminster\"],[\"Belgrove Street , King's Cross\"],[\"Hereford Road, Bayswater\"],[\"The Metropolitan, Portobello\"],[\"British Museum, Bloomsbury\"],[\"Lancaster Gate , Bayswater\"],[\"Kingsway, Covent Garden\"],[\"Pancras Road, King's Cross\"],[\"Kensington Church Street, Kensington\"],[\"Maida Vale, Maida Vale\"],[\"Leonard Circus , Shoreditch\"],[\"Ossulston Street, Somers Town\"],[\"Montpelier Street, Knightsbridge\"],[\"Belgrave Road, Victoria\"],[\"Leonard Circus , Shoreditch\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Kings Gate House, Westminster\"],[\"Scala Street, Fitzrovia\"],[\"Black Prince Road, Vauxhall\"],[\"Sedding Street, Sloane Square\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Belgrave Road, Victoria\"],[\"Tysoe Street, Clerkenwell\"],[\"Taviton Street, Bloomsbury\"],[\"Harcourt Terrace, West Brompton\"],[\"Albert Square, Stockwell\"],[\"British Museum, Bloomsbury\"],[\"Bury Place, Holborn\"],[\"New Fetter Lane, Holborn\"],[\"Broadwick Street, Soho\"],[\"Blackfriars Road, Southwark\"],[\"Roscoe Street, St. Luke's\"],[\"Commercial Street, Shoreditch\"],[\"Belgrove Street , King's Cross\"],[\"Rectory Square, Stepney\"],[\"Heron Quays DLR, Canary Wharf\"],[\"Curlew Street, Shad Thames\"],[\"Black Prince Road, Vauxhall\"],[\"Commercial Street, Shoreditch\"],[\"Serpentine Car Park, Hyde Park\"],[\"Coram Street, Bloomsbury\"],[\"New Spring Gardens Walk, Vauxhall\"],[\"Belvedere Road 1, South Bank\"],[\"Wenlock Road , Hoxton\"],[\"Royal Avenue 2, Chelsea\"],[\"Stratford Station, Stratford\"],[\"Wellington Row, Bethnal Green\"],[\"Tysoe Street, Clerkenwell\"],[\"Clinton Road, Mile End\"],[\"Grafton Street, Mayfair\"],[\"New Fetter Lane, Holborn\"],[\"St. John's Wood Road, St. John's Wood\"],[\"Finsbury Leisure Centre, St. Luke's\"],[\"Harford Street, Mile End\"],[\"Royal Avenue 2, Chelsea\"],[\"Crosswall, Tower\"],[\"Sun Street, Liverpool Street\"],[\"Park Street, Bankside\"],[\"Winsland Street, Paddington\"],[\"Rectory Square, Stepney\"],[\"Tooley Street, Bermondsey\"],[\"Lambeth Palace Road, Waterloo\"],[\"Godliman Street, St. Paul's\"],[\"Scala Street, Fitzrovia\"],[\"One Tower Bridge, Bermondsey\"],[\"Serpentine Car Park, Hyde Park\"],[\"Museum of London, Barbican\"],[\"Boston Place, Marylebone\"],[\"Gwendwr Road, West Kensington\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Bourne Street, Belgravia\"],[\"Clinton Road, Mile End\"],[\"Shoreditch High Street, Shoreditch\"],[\"Heron Quays DLR, Canary Wharf\"],[\"Wellington Row, Bethnal Green\"],[\"De Vere Gardens, Kensington\"],[\"Lavington Street, Bankside\"],[\"Walnut Tree Walk, Vauxhall\"],[\"Royal Avenue 2, Chelsea\"],[\"Regency Street, Westminster\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Bruton Street, Mayfair\"],[\"Russell Gardens, Olympia\"],[\"Rathbone Street, Fitzrovia\"],[\"St. Mary Axe, Aldgate\"],[\"Melton Street, Euston\"],[\"Gwendwr Road, West Kensington\"],[\"Riverlight South, Nine Elms\"],[\"Lavington Street, Bankside\"],[\"Boston Place, Marylebone\"],[\"Southwark Street, Bankside\"],[\"Malet Street, Bloomsbury\"],[\"Penywern Road, Earl's Court\"],[\"Hoxton Station, Hoxton\"],[\"Serpentine Car Park, Hyde Park\"],[\"Stockwell Roundabout, Stockwell\"],[\"Langdon Park, Poplar\"],[\"Smith Square, Westminster\"],[\"Portman Square, Marylebone\"],[\"Blackfriars Road, Southwark\"],[\"Long Lane , Bermondsey\"],[\"River Street , Clerkenwell\"],[\"Watney Street, Shadwell\"],[\"New Fetter Lane, Holborn\"],[\"Clapham Common North Side, Clapham Common\"],[\"Clapham Common North Side, Clapham Common\"],[\"Clarges Street, Mayfair\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Birkenhead Street, King's Cross\"],[\"Drummond Street , Euston\"],[\"Clapham Common North Side, Clapham Common\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Stockwell Roundabout, Stockwell\"],[\"Phillimore Gardens, Kensington\"],[\"Bevington Road West, North Kensington\"],[\"Belgrove Street , King's Cross\"],[\"Crawford Street, Marylebone\"],[\"Curlew Street, Shad Thames\"],[\"Marylebone Lane, Marylebone\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Page Street, Westminster\"],[\"Golden Lane, Barbican\"],[\"Harford Street, Mile End\"],[\"Crawford Street, Marylebone\"],[\"Warwick Road, Olympia\"],[\"Riverlight South, Nine Elms\"],[\"Imperial Wharf Station, Sands End\"],[\"Golden Lane, Barbican\"],[\"Belgrave Road, Victoria\"],[\"Hatton Wall, Holborn\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Somerset House, Strand\"],[\"Tallis Street, Temple\"],[\"Shoreditch High Street, Shoreditch\"],[\"Belgrove Street , King's Cross\"],[\"Westminster Pier, Westminster\"],[\"Manresa Road, Chelsea\"],[\"Red Lion Square, Holborn\"],[\"Lee Valley VeloPark, Queen Elizabeth Olympic Park\"],[\"Belgrove Street , King's Cross\"],[\"St. Mary Axe, Aldgate\"],[\"St. Mary Axe, Aldgate\"],[\"Golden Lane, Barbican\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Blackfriars Road, Southwark\"],[\"Marylebone Lane, Marylebone\"],[\"Tallis Street, Temple\"],[\"Binfield Road, Stockwell\"],[\"Arlington Road, Camden Town\"],[\"Albany Street, The Regent's Park\"],[\"Regent's Row , Haggerston\"],[\"Empire Square, The Borough\"],[\"Belvedere Road 1, South Bank\"],[\"Victoria & Albert Museum, South Kensington\"],[\"Phillimore Gardens, Kensington\"],[\"Princes Square, Bayswater\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Battersea Power Station, Battersea Park\"],[\"Belvedere Road 2, South Bank\"],[\"Embankment (Savoy), Strand\"],[\"Binfield Road, Stockwell\"],[\"Wellington Row, Bethnal Green\"],[\"Belgrave Road, Victoria\"],[\"Shoreditch High Street, Shoreditch\"],[\"Leonard Circus , Shoreditch\"],[\"Belgrave Road, Victoria\"],[\"Broadcasting House, Marylebone\"],[\"Belgrove Street , King's Cross\"],[\"Watney Market, Stepney\"],[\"Red Lion Square, Holborn\"],[\"Percival Street, Finsbury\"],[\"Belgrave Road, Victoria\"],[\"Smith Square, Westminster\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Hatton Wall, Holborn\"],[\"Sopwith Way, Battersea Park\"],[\"Northington Street , Holborn\"],[\"Monier Road, Hackney Wick\"],[\"Belgrove Street , King's Cross\"],[\"Smith Square, Westminster\"],[\"Maida Vale, Maida Vale\"],[\"Bolsover Street, Fitzrovia\"],[\"Crawford Street, Marylebone\"],[\"Naval Row, Blackwall\"],[\"Belvedere Road 1, South Bank\"],[\"Lambeth Palace Road, Waterloo\"],[\"Limburg Road, Clapham Junction\"],[\"Lancaster Gate , Bayswater\"],[\"Southwark Street, Bankside\"],[\"Doric Way , Somers Town\"],[\"Red Lion Square, Holborn\"],[\"Phillimore Gardens, Kensington\"],[\"Godliman Street, St. Paul's\"],[\"Coram Street, Bloomsbury\"],[\"Malet Street, Bloomsbury\"],[\"Swan Street, The Borough\"],[\"Brushfield Street, Liverpool Street\"],[\"Albert Gate, Hyde Park\"],[\"Riverlight South, Nine Elms\"],[\"Stratford Station, Stratford\"],[\"Lancaster Gate , Bayswater\"],[\"Kensington Church Street, Kensington\"],[\"Page Street, Westminster\"],[\"Princes Square, Bayswater\"],[\"Lincoln's Inn Fields, Holborn\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Golden Lane, Barbican\"],[\"De Vere Gardens, Kensington\"],[\"Goldsmith's Row, Haggerston\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Montgomery Square, Canary Wharf\"],[\"St. George's Square, Pimlico\"],[\"Royal London Hospital, Whitechapel\"],[\"Great Russell Street, Bloomsbury\"],[\"Wellington Row, Bethnal Green\"],[\"Nesham Street, Wapping\"],[\"The Vale, Chelsea\"],[\"Geraldine Street, Elephant & Castle\"],[\"Penywern Road, Earl's Court\"],[\"Bruton Street, Mayfair\"],[\"Westferry Circus, Canary Wharf\"],[\"Monier Road, Hackney Wick\"],[\"Brunswick Square, Bloomsbury\"],[\"Watney Market, Stepney\"],[\"Finsbury Library , Finsbury\"],[\"Serpentine Car Park, Hyde Park\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Malet Street, Bloomsbury\"],[\"Finsbury Library , Finsbury\"],[\"Page Street, Westminster\"],[\"Albert Gate, Hyde Park\"],[\"British Museum, Bloomsbury\"],[\"Grafton Street, Mayfair\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Sandilands Road, Walham Green\"],[\"Pritchard's Road, Bethnal Green\"],[\"Arlington Road, Camden Town\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Regent's Row , Haggerston \"],[\"Bouverie Street, Temple\"],[\"British Museum, Bloomsbury\"],[\"Regent's Row , Haggerston \"],[\"Queensbridge Road, Haggerston\"],[\"Belgrove Street , King's Cross\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Shoreditch High Street, Shoreditch\"],[\"St. James's Square, St. James's\"],[\"Park Lane , Hyde Park\"],[\"Maida Vale, Maida Vale\"],[\"Elizabeth Bridge, Victoria\"],[\"Westminster Pier, Westminster\"],[\"Rectory Square, Stepney\"],[\"Curzon Street, Mayfair\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Golden Lane, Barbican\"],[\"Elizabeth Bridge, Victoria\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Albany Street, The Regent's Park\"],[\"Melton Street, Euston\"],[\"Grafton Street, Mayfair\"],[\"Broadwick Street, Soho\"],[\"Watney Market, Stepney\"],[\"Tate Modern, Bankside\"],[\"Birkenhead Street, King's Cross\"],[\"Drummond Street , Euston\"],[\"Curlew Street, Shad Thames\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Good's Way, King's Cross\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"St. George's Square, Pimlico\"],[\"Sedding Street, Sloane Square\"],[\"Ferndale Road, Brixton\"],[\"Watney Street, Shadwell\"],[\"North Wharf Road, Paddington\"],[\"Ossulston Street, Somers Town\"],[\"Broadwick Street, Soho\"],[\"Elizabeth Bridge, Victoria\"],[\"Hoxton Station, Hoxton\"],[\"Black Lion Gate, Kensington Gardens\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Clarges Street, Mayfair\"],[\"Pritchard's Road, Bethnal Green\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Sopwith Way, Battersea Park\"],[\"Broadwick Street, Soho\"],[\"Russell Gardens, Olympia\"],[\"Red Lion Square, Holborn\"],[\"East Village, Queen Elizabeth Olympic Park\"],[\"Tooley Street, Bermondsey\"],[\"Sopwith Way, Battersea Park\"],[\"Victoria & Albert Museum, South Kensington\"],[\"Roscoe Street, St. Luke's\"],[\"Boston Place, Marylebone\"],[\"Belvedere Road, South Bank\"],[\"St. George's Square, Pimlico\"],[\"Marylebone Lane, Marylebone\"],[\"London Zoo,  The Regent's Park\"],[\"Birkenhead Street, King's Cross\"],[\"Victory Place, Walworth\"],[\"Belgrove Street , King's Cross\"],[\"Harford Street, Mile End\"],[\"Hansard Mews, Holland Park\"],[\"Tooley Street, Bermondsey\"],[\"Queen's Gate (North), Kensington\"],[\"Northington Street , Holborn\"],[\"Hereford Road, Bayswater\"],[\"Claverton Street, Pimlico\"],[\"Pritchard's Road, Bethnal Green\"],[\"Bolsover Street, Fitzrovia\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Belgrove Street , King's Cross\"],[\"River Street , Clerkenwell\"],[\"Phillimore Gardens, Kensington\"],[\"Pancras Road, King's Cross\"],[\"Finsbury Library , Finsbury\"],[\"Hatton Wall, Holborn\"],[\"Baylis Road, Waterloo\"],[\"Battersea Power Station, Battersea Park\"],[\"LSBU (Borough Road), Elephant & Castle\"],[\"Pindar Street, Liverpool Street\"],[\"Golden Lane, Barbican\"],[\"Binfield Road, Stockwell\"],[\"Halford Road, West Kensington\"],[\"Royal London Hospital, Whitechapel\"],[\"Golden Lane, Barbican\"],[\"New Fetter Lane, Holborn\"],[\"Clapham Road, Lingham Street, Stockwell\"],[\"Bouverie Street, Temple\"],[\"Battersea Power Station, Battersea Park\"],[\"Commercial Street, Shoreditch\"],[\"Doric Way , Somers Town\"],[\"Lower Thames Street, Monument\"],[\"Bury Place, Holborn\"],[\"Golden Lane, Barbican\"],[\"Bedford Way, Bloomsbury\"],[\"Baylis Road, Waterloo\"],[\"Crawford Street, Marylebone\"],[\"Serpentine Car Park, Hyde Park\"],[\"Houndsditch, Aldgate\"],[\"Abyssinia Close, Clapham Junction\"],[\"Belgrove Street , King's Cross\"],[\"King Edward Street, St Pauls\"],[\"Embankment (Savoy), Strand\"],[\"Shoreditch High Street, Shoreditch\"],[\"Sun Street, Liverpool Street\"],[\"Wellington Row, Bethnal Green\"],[\"Timber Lodge, Queen Elizabeth Olympic Park\"],[\"Sedding Street, Sloane Square\"],[\"Hatton Wall, Holborn\"],[\"Lambeth Palace Road, Waterloo\"],[\"Antill Road, Mile End\"],[\"Baylis Road, Waterloo\"],[\"Kennington Lane Tesco, Vauxhall\"],[\"Bury Place, Holborn\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Belgrove Street , King's Cross\"],[\"Clapham Road, Lingham Street, Stockwell\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Bolsover Street, Fitzrovia\"],[\"Tooley Street, Bermondsey\"],[\"St. George's Square, Pimlico\"],[\"Green Park Station, Mayfair\"],[\"Great Russell Street, Bloomsbury\"],[\"New Fetter Lane, Holborn\"],[\"Westminster Pier, Westminster\"],[\"Halford Road, West Kensington\"],[\"Baylis Road, Waterloo\"],[\"Gwendwr Road, West Kensington\"],[\"Malet Street, Bloomsbury\"],[\"Kensington Church Street, Kensington\"],[\"Hatton Wall, Holborn\"],[\"St Mary's Hospital, Paddington\"],[\"Wenlock Road , Hoxton\"],[\"Godliman Street, St. Paul's\"],[\"Crawford Street, Marylebone\"],[\"Curlew Street, Shad Thames\"],[\"Empire Square, The Borough\"],[\"Roscoe Street, St. Luke's\"],[\"Imperial Wharf Station, Sands End\"],[\"Swan Street, The Borough\"],[\"Podium, Queen Elizabeth Olympic Park\"],[\"Bolsover Street, Fitzrovia\"],[\"Heron Quays DLR, Canary Wharf\"],[\"Winsland Street, Paddington\"],[\"Drury Lane, Covent Garden\"],[\"Hansard Mews, Holland Park\"],[\"St. Mary Axe, Aldgate\"],[\"De Vere Gardens, Kensington\"],[\"Stratford Station, Stratford\"],[\"Blackfriars Road, Southwark\"],[\"Hop Exchange, The Borough\"],[\"Embankment (Savoy), Strand\"],[\"Elizabeth Bridge, Victoria\"],[\"Goldsmith's Row, Haggerston\"],[\"Empire Square, The Borough\"],[\"Hatton Wall, Holborn\"],[\"Shouldham Street, Marylebone\"],[\"Crawford Street, Marylebone\"],[\"Red Lion Square, Holborn\"],[\"British Museum, Bloomsbury\"],[\"Hansard Mews, Holland Park\"],[\"Warwick Avenue Station, Maida Vale\"],[\"Broadcasting House, Marylebone\"],[\"Maida Vale, Maida Vale\"],[\"East India DLR, Blackwall\"],[\"King Edward Street, St Pauls\"],[\"Rectory Square, Stepney\"],[\"Fanshaw Street, Hoxton\"],[\"Taviton Street, Bloomsbury\"],[\"Elizabeth Bridge, Victoria\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Geraldine Street, Elephant & Castle\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Drummond Street , Euston\"],[\"Bouverie Street, Temple\"],[\"Doric Way , Somers Town\"],[\"Black Lion Gate, Kensington Gardens\"],[\"Lambeth North Station, Waterloo\"],[\"Cartwright Gardens , Bloomsbury\"],[\"Belgrove Street , King's Cross\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Waterloo Station 3, Waterloo\"],[\"Rathbone Street, Fitzrovia\"],[\"Watney Market, Stepney\"],[\"St. George's Square, Pimlico\"],[\"Long Lane , Bermondsey\"],[\"Finsbury Library , Finsbury\"],[\"Queen's Gate (North), Kensington\"],[\"Page Street, Westminster\"],[\"Boston Place, Marylebone\"],[\"New Spring Gardens Walk, Vauxhall\"],[\"Penywern Road, Earl's Court\"],[\"Bancroft Road, Bethnal Green\"],[\"Lavington Street, Bankside\"],[\"Page Street, Westminster\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Bolsover Street, Fitzrovia\"],[\"Wellington Row, Bethnal Green\"],[\"Westminster Bridge Road, Elephant & Castle\"],[\"Coram Street, Bloomsbury\"],[\"Lambeth Palace Road, Waterloo\"],[\"Aquatic Centre, Queen Elizabeth Olympic Park\"],[\"Smith Square, Westminster\"],[\"Boston Place, Marylebone\"],[\"Montpelier Street, Knightsbridge\"],[\"Aberfeldy Street, Poplar\"],[\"Sopwith Way, Battersea Park\"],[\"Smith Square, Westminster\"],[\"Regent's Row , Haggerston \"],[\"Boston Place, Marylebone\"]],\"hovertemplate\":\"start_hour=%{x}\\u003cbr\\u003eduration=%{y}\\u003cbr\\u003estart_station_name=%{customdata[0]}\\u003cbr\\u003eLong Trip (1) vs Short (0)=%{marker.color}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[1,0,1,1,1,1,0,1,1,0,0,0,1,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,1,0,1,0,1,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,1,1,0,0,1,1,0,1,0,0,1,0,1,0,0,1,0,0,0,1,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,1,1,0,1,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1,1,0,1,1,0,0,0,0,1,1,1,0,1,1,0,0,0,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,1,1,1,0,1,0,1,1,0,1,1,1,1,1,0,0,0,1,0,0,1,0,0,0,0,1,1,1,1,1,0,1,1,0,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,0,1,0,1,0,0,1,0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,0,0,1,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,0,1,1,0,1,0,1,0,1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,1,0,1,1,0,1,0,1,1,1,0,0,1,0,0,1,1,0,1,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,0,1,0,1,1,1,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,1,0,1,0,1,0,0,1,1,1,1,0,0,0,0,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,1,0,1,0,0,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,1,0,0,1,1,0,1,1,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,0,0,1,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1,0,1,1,0,1,1,0,0,0,1,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,1,1,0,0,1,1,0,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,1,1,0,1,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,1,1,0,1,1,0,0,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,1,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,1,0,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,1,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,1,0,1,1,0,1,1,0,1,1,1,0,0,1,0,1,1,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,0,0,1,0,0,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,1,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,1,1,1,0,0,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,0,0,0,0,1,1,0,1,1,0,0,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,0,0,1,1,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,1,1,0,1,1,0,1,0,1,0,1,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,1,1,0,1,0,1,0,0,1,0,1,1,0,1,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,1,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,1,0,0,1,0,0,1,1,0,0,1,1,0,1,1,1,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,1,0,1,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0,1,0,0,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,0,0,1,0,1,0,1,1,1,1,0,1,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0,1,1,1,1,0,1,0,1,1,1,1,0,1,0,1,0,0,1,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,0,0,0,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,1,0,0,0,1,1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,1,1,0,1,1,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,1,1,0,1,1,1,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,1,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,0,1,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1,0,1,1,0,0,0,1,1,1,0,1,0,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,0,1,1,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,1,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,1,0,1,0,1,1,0,1,1,0,0,1,0,1,0,1,1,0,1,1,1,0,1,1,0,1,0,0,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,1,1,0,1,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,1,0,0,1,0,1,1,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,1,1,1,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,1,1,1,1,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,1,1,0,0,0,0,1,1,1,1,0,0,0,1,0,1,0,1,1,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,1,0,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,1,1,0,1,1,0,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,0,0,1,0,1,1,1,0,0,1,1,0,1,0,1,0,0,0,1,0,0,0,0,1,0,1,1,1,0,0,1,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,1,1,0,1,0,1,1,0,1,1,0,0,1,0,1,0,1,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,0,1,0,0,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,0,0,0,1,1,1,1,0,1,0,0,0,1,0,1,1,0,1,1,0,1,1,0,0,0,1,0,0,1,0,0,0,1,0,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,1,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,1,1,0,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,1,0,0,0,1,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,1,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,0,0,1,0,1,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,0,1,1,0,0,1,0,0,1,1,1,1,0,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,0,1,0,1,1,0,1,0,1,0,0,0,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,0,0,1,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,0,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,0,1,1,0,0,0,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,1,1,0,1,0,1,0,1,0,0,1,1,1,0,1,0,0,1,0,0,0,0,0,0,1,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0,0,1,0,0,1,1,0,0,0,1,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,0,0,1,1,1,0,1,0,0,1,1,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,1,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,0,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,0,0,0,1,1,0,1,0,1,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,1,0,1,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,1,0,1,1,0,1,1,1,1,0,1,0,1,1,0,1,0,1,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,1,1,0,1,0,0,0,1,0,1,1,0,0,1,1,1,1,0,1,1,1,1,0,0,0,1,1,0,1,1,0,0,0,1,0,1,1,0,1,0,1,0,1,0,0,1,1,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,1,0,1,1,1,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,1,0,1,0,1,1,1,0,1,1,1,0,0,0,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1],\"coloraxis\":\"coloraxis\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"showlegend\":false,\"x\":[8,14,14,21,15,9,7,12,13,23,15,17,20,12,17,22,14,7,20,8,8,7,16,14,9,19,18,17,8,10,8,9,9,7,23,2,17,16,22,19,14,13,19,16,18,18,16,9,16,15,11,8,0,19,8,10,13,8,19,22,23,18,22,11,8,18,15,10,18,22,13,12,12,17,20,8,18,2,10,19,14,8,19,18,6,16,20,12,17,20,13,11,8,18,19,18,12,16,18,17,8,21,19,19,23,17,15,9,11,15,17,7,20,14,8,19,17,18,19,15,18,17,13,19,7,15,16,18,18,17,17,20,8,6,15,7,10,15,17,11,13,22,11,7,19,8,11,17,15,18,21,10,18,11,21,16,12,18,12,14,14,14,14,19,10,6,17,21,18,17,8,12,22,8,17,15,17,18,15,7,8,8,20,11,21,19,15,15,19,17,13,18,11,15,20,17,13,10,14,8,20,18,9,7,13,8,14,19,14,16,12,14,19,21,6,10,7,16,8,17,17,17,18,16,21,22,15,13,18,7,19,21,12,18,17,7,17,14,12,19,11,2,11,19,18,4,3,8,16,21,6,19,17,9,8,14,18,12,11,19,13,14,5,15,13,7,15,12,8,15,16,6,8,23,8,14,18,17,17,9,12,17,13,13,23,18,14,15,9,18,0,18,16,7,21,7,8,18,9,18,18,17,19,18,15,12,15,16,8,18,8,14,7,13,18,20,8,17,12,7,14,15,14,14,15,14,11,8,8,7,13,17,10,18,13,1,15,18,0,5,8,18,14,15,20,8,8,15,8,21,8,18,9,17,0,15,7,8,14,17,19,12,21,17,7,15,7,8,8,17,19,12,10,16,12,9,20,9,12,15,17,15,15,9,17,7,12,19,19,19,12,21,15,7,12,15,16,13,7,18,17,20,13,14,22,2,19,13,12,10,1,20,19,12,15,19,17,11,15,13,13,9,10,12,8,13,8,9,15,9,22,10,17,21,10,20,20,8,12,7,9,18,14,23,15,13,19,8,20,23,20,18,13,22,19,8,21,9,11,16,7,15,14,19,8,18,18,16,18,16,13,14,17,8,23,15,20,8,8,8,19,18,13,12,8,19,14,18,12,0,22,18,18,13,15,18,7,15,12,7,20,12,17,15,17,15,9,15,17,16,20,15,11,21,18,17,18,21,13,4,15,14,23,3,19,11,19,19,9,18,11,12,8,10,13,2,15,19,17,17,10,9,12,18,19,0,22,10,6,14,15,15,15,7,18,16,17,8,11,17,17,9,14,19,15,22,18,18,18,12,19,19,20,7,15,18,8,10,18,13,17,17,10,8,19,14,17,8,19,18,20,16,17,18,14,12,10,13,16,14,22,18,18,8,18,0,22,19,12,16,18,18,17,6,17,17,15,11,20,8,9,14,19,22,20,17,20,14,19,16,20,15,16,17,14,8,15,16,19,8,18,20,11,14,20,17,7,18,9,11,8,18,18,11,17,20,18,21,15,10,10,21,17,21,12,1,17,6,13,12,19,19,8,18,14,17,13,15,5,15,14,5,8,17,8,17,23,9,9,17,20,18,14,13,21,22,8,13,21,17,8,19,6,21,19,12,9,8,9,13,10,16,15,8,13,17,7,19,12,19,23,14,16,22,19,17,11,12,18,7,14,10,23,15,0,0,18,22,7,17,12,16,17,8,5,7,12,17,12,16,18,8,15,1,17,12,8,7,10,13,8,16,8,17,16,15,15,18,7,17,19,7,9,11,13,21,12,21,15,14,17,8,18,15,8,8,8,7,18,22,18,14,8,17,6,11,19,14,16,15,15,21,8,18,16,7,18,6,13,8,9,17,17,13,14,9,7,19,16,6,12,8,10,16,19,6,16,12,7,20,6,18,18,18,10,14,14,19,12,16,19,7,9,19,19,20,17,20,22,13,7,17,18,17,14,8,18,17,18,7,13,8,14,9,17,7,10,13,15,15,18,12,16,17,12,15,14,13,10,22,16,8,12,0,23,8,17,5,8,18,15,17,21,18,12,22,15,10,9,14,9,11,7,21,8,19,23,19,9,10,8,10,20,8,16,18,19,12,21,17,8,11,16,17,7,15,12,13,7,17,17,11,16,8,13,18,8,19,20,20,18,15,17,23,19,8,8,14,16,12,18,22,5,12,11,1,23,9,14,16,16,17,17,11,17,14,23,14,17,15,19,18,7,15,19,15,17,17,7,19,7,10,17,7,14,1,10,17,11,14,17,17,7,14,15,14,11,15,9,8,17,20,18,11,17,17,16,20,17,9,18,15,19,18,0,15,17,9,17,9,12,16,18,14,8,15,17,20,18,21,17,8,9,16,15,18,16,12,12,22,19,9,2,18,20,8,14,20,9,9,9,18,11,19,15,1,18,9,7,12,20,16,17,10,9,8,15,11,19,14,13,8,17,10,10,16,11,14,15,16,20,14,21,9,14,8,10,15,19,22,23,10,19,8,15,15,9,13,12,9,13,20,7,19,20,11,19,19,17,8,18,17,7,12,15,12,8,8,12,19,21,19,21,4,20,21,7,9,20,20,19,10,15,14,8,23,20,12,18,21,8,20,7,19,12,17,22,19,16,23,14,10,15,18,18,21,11,10,19,12,15,14,17,16,17,7,13,23,1,7,15,17,7,10,19,7,17,8,10,9,17,13,17,7,19,16,15,17,16,15,20,18,20,14,15,15,16,11,18,11,17,14,11,18,14,9,19,10,16,11,7,17,12,16,21,19,23,17,11,4,22,9,18,8,17,15,9,6,17,8,17,8,12,5,16,13,22,17,18,13,23,17,18,19,17,16,22,17,16,22,7,8,12,13,10,7,23,18,5,21,9,17,0,18,8,9,0,18,8,15,23,18,15,7,17,19,18,7,21,9,9,1,12,20,7,18,21,16,17,18,17,19,17,14,10,13,9,8,9,8,10,1,17,15,22,22,19,11,14,8,8,21,15,7,13,17,11,9,17,17,8,15,16,16,9,15,8,20,13,17,7,15,16,11,9,17,19,10,18,6,9,23,18,15,8,19,18,21,8,15,9,9,19,14,9,18,13,3,14,8,8,12,15,21,15,15,16,17,7,23,15,15,8,17,19,11,19,16,16,22,7,14,8,15,11,19,21,15,17,0,7,15,12,17,12,18,15,19,10,12,8,7,10,17,11,18,21,16,8,18,0,18,17,8,17,9,17,12,14,22,20,14,8,12,21,12,13,14,6,19,12,0,15,11,5,20,15,13,19,18,13,17,11,8,14,22,11,20,19,8,18,18,18,17,20,17,10,18,16,23,0,17,9,11,18,19,10,21,15,11,20,20,19,18,16,19,23,11,20,20,10,18,14,11,7,19,17,9,20,20,22,12,16,16,20,9,15,20,9,21,17,18,19,7,7,17,20,15,7,18,2,22,18,8,20,8,18,17,17,18,15,17,19,20,14,13,18,14,10,15,11,8,12,6,19,19,8,12,11,20,18,1,20,8,7,11,18,17,14,19,19,14,20,18,18,17,15,8,13,20,16,17,12,9,13,22,16,8,21,15,19,8,14,18,18,2,1,13,20,19,19,12,23,20,23,16,17,14,9,15,18,15,12,13,19,17,0,13,18,8,8,22,17,9,0,8,18,12,17,21,15,20,9,22,20,0,10,8,19,11,0,13,16,19,19,5,18,0,8,8,8,18,22,14,7,15,11,11,5,16,11,1,12,18,8,8,17,6,13,0,10,8,21,13,21,17,11,16,18,14,16,11,8,14,14,7,14,18,8,18,21,13,17,6,15,10,22,10,13,8,8,13,12,18,7,18,17,12,14,13,17,18,21,14,1,18,20,21,18,15,17,9,15,17,7,19,11,14,17,17,18,9,16,12,16,10,19,23,15,13,7,20,18,9,7,17,12,11,7,8,18,9,17,13,8,19,15,20,14,14,11,18,0,18,7,21,11,10,21,17,13,21,19,12,18,16,10,10,14,17,11,18,11,12,17,19,13,16,1,16,20,11,8,15,16,8,14,11,13,18,17,9,17,17,18,11,18,15,14,9,19,16,23,15,13,19,13,13,14,23,15,18,8,17,12,22,19,17,18,18,12,8,13,0,8,18,18,16,17,19,22,7,12,9,7,13,16,9,8,16,9,19,15,15,9,14,8,9,7,18,8,7,16,12,12,15,18,7,8,10,8,22,3,8,9,17,18,18,19,10,8,17,11,17,18,7,9,12,11,18,13,16,21,19,18,11,19,10,14,12,18,23,3,16,18,7,18,18,11,19,8,19,19,3,17,16,16,8,19,6,8,12,18,18,10,10,7,9,12,17,8,19,19,6,14,20,8,19,14,16,20,14,5,17,7,7,7,11,9,16,13,16,16,17,9,16,6,20,23,11,13,13,17,8,0,18,7,17,18,8,15,14,13,9,22,18,9,17,6,17,18,16,14,17,22,14,7,12,11,11,8,18,23,9,22,20,7,19,19,18,18,16,15,10,9,17,14,14,18,17,9,9,7,7,22,10,15,16,0,20,14,9,18,21,14,20,17,13,11,23,13,23,17,17,10,16,20,10,17,9,7,14,9,21,13,15,16,16,20,7,17,13,7,16,4,19,10,14,10,20,22,15,15,7,18,2,10,8,17,11,14,6,21,14,17,18,9,17,8,13,17,7,19,11,19,23,17,19,8,9,17,18,6,17,19,15,23,13,18,8,15,15,21,8,14,8,18,8,8,14,9,21,19,11,19,12,8,21,6,16,12,17,14,8,16,17,9,9,9,13,19,12,18,9,6,9,10,17,23,15,9,9,1,11,15,16,18,13,19,8,5,8,18,8,18,7,10,21,16,19,8,17,13,15,10,2,14,15,8,7,8,4,18,17,7,12,11,18,15,11,17,16,14,8,10,14,16,17,7,13,19,8,16,9,8,13,17,8,22,19,5,9,20,19,16,18,14,8,21,17,20,15,18,8,8,20,17,7,20,17,22,19,17,10,18,22,8,15,12,14,16,8,17,14,9,10,19,12,21,8,9,8,2,8,18,17,16,10,17,17,13,19,16,18,12,14,18,7,12,7,17,8,16,21,13,18,7,12,19,12,18,15,7,18,15,9,18,8,20,16,10,16,7,9,18,18,16,12,21,18,18,11,11,8,18,11,16,17,9,8,19,13,8,23,21,15,20,14,9,15,22,8,11,14,14,17,17,16,8,8,18,14,11,21,8,14,21,12,19,7,19,18,20,9,8,9,14,17,11,12,23,21,16,18,21,17,20,11,21,10,18,8,20,19,9,18,23,8,17,18,17,8,22,14,16,13,14,9,14,16,7,9,17,17,1,20,21,18,18,13,19,8,18,6,18,16,18,18,23,0,14,8,16,23,15,21,12,19,8,8,23,8,22,15,9,0,16,12,8,12,17,17,13,12,16,22,20,13,17,16,17,17,17,22,21,16,16,15,5,23,9,11,21,19,9,8,8,20,9,8,8,17,16,15,15,12,23,12,16,14,15,18,18,0,7,6,8,19,7,20,18,11,17,17,15,15,9,16,22,8,10,7,16,18,12,9,17,16,23,9,7,9,7,2,21,8,14,8,17,8,18,19,16,18,10,23,17,15,15,12,9,18,17,18,7,20,18,10,7,17,8,16,8,16,1,15,17,7,17,15,8,13,14,18,14,14,19,7,11,8,19,17,18,19,15,18,18,11,16,9,14,18,20,17,14,20,9,13,6,15,13,16,12,16,8,4,18,19,8,23,19,12,11,21,16,14,8,8,16,12,3,11,20,6,12,16,12,15,5,17,17,12,15,16,18,21,12,13,14,19,8,8,9,20,17,11,23,8,15,21,18,13,8,14,6,16,17,17,18,11,11,9,16,13,14,17,17,18,19,9,20,17,7,16,11,18,13,14,13,10,13,17,20,13,15,17,8,19,16,8,10,13,6,22,14,12,16,18,16,13,16,20,18,13,16,18,18,16,22,17,12,8,2,16,16,20,9,19,21,15,17,13,10,8,10,13,18,7,21,17,15,11,16,16,9,9,17,7,23,18,9,13,13,15,11,12,9,7,12,20,12,19,16,6,18,8,15,13,13,20,22,20,15,18,13,20,18,8,12,7,8,8,8,12,11,6,19,18,17,21,7,23,10,11,7,8,14,17,11,18,12,19,11,19,6,18,16,10,18,17,16,17,18,12,14,6,21,14,14,16,3,8,2,9,19,23,18,8,16,11,18,10,9,9,15,17,12,6,17,14,6,18,15,12,10,9,19,8,9,18,17,10,13,14,14,23,18,7,16,18,13,16,18,15,17,21,7,19,19,7,23,11,6,7,8,20,18,13,16,18,17,15,9,8,19,13,8,19,18,11,13,14,15,9,18,16,1,13,17,1,16,17,8,17,10,7,12,17,19,8,10,19,0,9,18,19,9,22,10,8,9,16,9,17,9,12,8,9,9,19,15,7,19,17,9,17,16,10,10,17,7,20,14,22,13,10,9,13,11,15,21,7,17,19,14,12,16,15,16,19,15,19,15,12,17,17,12,16,18,14,15,14,10,9,17,18,0,7,17,20,13,7,19,20,8,12,12,23,17,14,16,11,13,12,8,20,13,8,7,7,18,8,10,9,20,17,8,9,14,13,12,23,17,20,21,7,8,19,7,14,14,16,20,10,8,8,21,14,16,18,18,19,17,20,15,18,14,17,18,15,13,13,17,6,17,17,17,14,22,12,18,8,21,11,17,14,14,8,9,5,21,21,19,9,9,19,18,7,8,16,8,18,23,21,23,17,17,15,17,16,8,19,11,23,10,8,14,11,15,21,19,19,8,18,19,18,5,22,6,14,17,12,17,15,11,20,22,12,15,22,13,8,17,18,20,15,19,12,16,8,10,12,17,11,14,14,7,8,18,14,19,8,21,15,6,8,20,13,7,16,15,16,11,18,17,16,13,19,13,23,23,19,16,10,17,0,11,20,15,23,9,13,8,21,1,17,20,18,8,16,19,13,14,12,20,16,19,18,13,13,14,16,5,9,14,14,18,15,15,19,13,16,13,17,9,17,17,17,16,17,8,9,17,15,6,18,21,12,8,8,3,18,20,11,9,11,17,18,13,11,20,15,7,7,15,20,17,12,11,12,10,8,15,15,11,23,17,19,10,11,18,10,13,8,19,7,16,15,14,16,13,20,8,13,21,6,18,17,9,12,16,15,18,8,14,17,7,16,8,18,11,16,21,18,21,19,7,9,9,19,9,8,8,0,7,17,0,20,18,7,23,20,7,8,16,7,7,17,3,17,13,14,11,12,16,12,15,9,3,19,17,17,8,15,9,23,16,15,20,10,18,17,7,15,18,12,19,19,14,17,15,19,9,14,8,14,16,8,20,17,18,8,17,12,13,20,12,10,10,19,18,17,18,17,9,16,17,21,13,15,15,14,10,14,8,15,11,19,18,21,15,12,17,19,7,11,17,12,18,18,20,8,18,18,18,17,21,8,20,10,17,11,17,0,16,13,17,13,11,20,19,18,21,19,17,7,8,22,9,10,16,12,17,13,18,12,17,15,8,7,14,16,8,17,16,18,16,16,15,16,21,20,17,11,13,8,14,10,18,6,12,13,9,14,8,16,8,12,8,7,17,1,21,14,17,18,11,9,9,20,14,14,15,22,10,22,8,13,15,18,12,8,11,16,18,16,13,21,21,17,19,11,17,9,15,16,8,18,18,8,19,9,21,17,14,14,18,13,21,16,8,10,9,7,17,17,18,16,14,18,8,14,14,18,23,7,19,19,12,6,8,21,15,11,11,17,16,10,10,17,18,10,8,17,7,13,13,9,10,16,14,1,11,18,17,13,16,13,16,9,11,19,14,18,9,16,16,16,9,18,15,17,22,8,8,18,5,17,16,7,17,17,17,22,14,8,13,14,9,13,7,8,12,19,6,19,7,16,15,17,6,12,16,2,17,17,17,9,9,12,21,15,15,18,19,9,13,15,14,19,10,17,18,23,10,19,23,20,18,20,13,18,4,9,6,17,17,9,8,13,11,7,21,14,8,9,19,19,17,17,13,1,22,17,16,8,18,23,13,8,16,7,13,17,15,8,21,19,18,13,18,21,18,15,13,17,8,19,12,8,7,15,6,12,11,16,17,15,0,13,19,8,19,17,14,16,6,13,20,12,14,8,19,11,7,7,8,19,17,19,15,10,20,13,11,16,19,8,11,12,17,9,18,8,14,14,15,13,16,13,15,18,18,16,20,10,16,21,18,13,18,12,16,8,16,15,7,21,14,19,16,12,21,12,9,14,15,8,8,12,16,12,7,13,12,19,13,17,8,20,11,11,7,20,16,18,15,15,13,15,18,18,17,10,10,14,14,8,13,17,7,8,1,17,20,19,16,18,21,16,13,18,19,17,9,17,22,7,13,14,15,8,19,13,14,8,20,8,8,8,8,17,12,16,23,17,14,7,7,8,19,14,13,23,12,22,15,8,19,20,17,17,11,9,14,7,14,18,16,18,11,15,13,8,18,0,21,20,16,16,16,17,20,11,16,13,16,17,17,11,8,1,10,15,19,7,12,7,15,17,16,13,16,18,13,20,19,18,20,6,15,6,22,12,10,15,17,23,8,18,19,10,15,20,1,16,2,8,18,9,18,15,19,23,20,15,10,19,19,10,6,9,10,16,14,20,16,20,18,11,13,10,19,13,12,16,15,17,11,12,20,19,17,19,10,21,17,10,17,23,13,7,17,19,21,8,16,17,12,8,19,8,20,18,18,21,14,17,15,8,2,18,8,19,19,10,8,16,16,8,7,17,16,17,7,10,7,17,15,9,9,8,17,19,13,13,20,13,19,21,16,8,13,8,16,11,0,10,21,17,11,9,8,8,15,8,21,16,12,7,8,8,23,18,17,9,8,17,8,17,8,19,8,18,14,18,11,2,19,15,16,13,21,18,15,12,21,18,15,15,13,18,8,14,16,10,18,15,10,13,14,12,18,7,16,19,14,14,15,9,14,16,19,16,13,18,20,12,14,8,19,13,12,0,7,13,9,11,18,17,18,19,11,8,18,17,11,17,7,17,13,7,10,10,21,7,17,8,16,14,8,17,17,15,19,9,8,18,15,17,20,16,10,9,16,17,10,9,14,17,19,7,6,13,14,8,14,17,12,18,23,10,0,12,22,17,16,15,8,19,17,14,12,12,13,23,14,23,11,10,16,18,7,17,7,8,12,16,8,21,15,15,16,16,11,13,14,12,11,19,16,17,15,17,7,21,19,15,7,16,16,20,15,18,8,8,12,20,19,7,19,3,13,7,19,20,17,12,7,9,20,14,9,10,21,11,6,11,19,20,12,8,10,12,16,19,13,11,7,18,16,23,9,13,18,10,12,13,17,7,8,9,8,14,12,18,8,1,14,10,18,17,21,7,15,0,7,19,8,11,18,20,22,22,10,18,8,9,15,8,11,13,17,9,19,9,22,19,16,7,20,19,6,11,14,14,12,15,17,19,15,15,14,17,13,19,16,15,16,18,13,17,8,11,10,19,18,18,16,18,20,18,12,15,16,8,20,22,17,21,12,11,22,8,17,11,12,10,7,20,16,9,21,5,16,13,21,11,17,21,18,12,15,18,16,19,17,13,11,7,17,10,15,16,11,0,18,0,13,15,10,12,11,17,8,8,11,19,18,19,2,17,14,13,8,23,11,18,9,15,7,19,7,18,12,8,16,12,17,13,11,19,14,13,19,13,15,15,8,8,8,9,15,11,13,17,9,7,18,19,9,15,18,14,13,17,7,7,20,12,19,20,21,13,16,18,13,17,16,9,12,18,16,13,11,13,9,15,13,17,17,8,8,17,20,13,8,18,19,11,16,18,13,13,14,10,13,19,9,12,14,21,17,7,10,19,17,19,13,17,8,22,10,13,8,17,18,7,13,18,8,19,18,23,9,8,23,19,17,22,6,8,15,20,17,18,8,10,12,20,21,18,1,8,18,21,17,11,13,20,8,3,12,15,9,19,21,8,15,12,18,7,8,22,17,16,18,15,9,13,15,16,6,20,12,19,17,22,16,17,18,11,13,15,22,19,14,18,20,7,11,15,10,10,18,21,23,21,14,8,8,6,15,16,8,13,7,16,2,9,21,21,17,13,15,9,18,17,14,9,11,8,18,23,20,9,22,10,8,20,7,18,17,21,10,8,9,18,18,13,10,18,13,19,12,16,19,13,8,22,14,19,9,19,8,13,6,18,19,8,9,6,8,21,10,15,10,7,12,9,11,10,18,18,12,13,13,8,19,16,8,13,12,9,8,1,18,9,21,15,16,15,18,11,11,18,15,17,16,14,7,9,8,18,9,18,7,19,15,14,8,19,15,11,19,13,9,17,11,16,17,7,21,19,14,8,19,19,18,15,17,15,21,21,20,8,17,10,7,14,22,23,17,13,8,18,20,17,6,17,15,12,17,17,9,17,11,22,13,16,19,19,16,17,16,18,16,19,9,19,18,0,9,14,9,13,16,17,8,17,13,14,11,17,8,12,16,16,19,6,18,8,7,18,20,14,18,18,21,8,17,7,9,19,7,10,23,9,19,17,13,15,12,23,11,17,18,9,16,13,11,11,12,14,11,13,16,6,11,17,6,18,19,13,11,12,16,15,20,22,8,4,21,18,8,21,19,12,6,14,18,18,13,23,7,16,9,12,8,10,21,14,15,15,15,7,9,11,17,16,9,14,17,15,20,22,19,12,15,17,12,19,17,9,15,15,17,6,8,12,15,11,8,11,6,20,0,10,19,17,17,16,12,20,19,14,14,14,8,8,13,20,10,17,8,22,14,17,2,18,12,13,13,19,9,7,16,15,21,7,16,17,14,15,16,18,17,12,7,17,13,3,9,10,17,21,17,9,18,11,7,11,14,19,11,12,7,8,14,20,11,19,16,17,9,14,11,14,20,10,14,11,19,8,17,0,17,8,7,8,1,20,11,18,11,11,16,12,18,13,7,14,13,21,8,7,8,13,14,16,19,10,10,16,19,14,12,17,16,14,10,17,22,10,13,7,18,17,11,21,7,17,17,18,10,7,17,0,17,16,19,20,1,15,21,14,8,14,17,10,11,16,17,16,16,7,19,19,17,9,8,17,21,21,13,14,11,18,7,9,16,12,15,7,15,23,8,10,17,13,18,13,15,13,9,19,10,20,18,17,15,14,8,16,18,18,13,20,19,10,11,18,8,22,8,7,16,15,12,9,18,8,22,10,16,8,10,20,9,7,17,11,7,17,18,16,13,15,17,9,10,20,17,11,17,8,8,13,7,18],\"xaxis\":\"x\",\"y\":[960,60,3300,1380,2400,1020,120,1320,1500,600,579,840,2580,120,240,1440,2340,720,300,1020,120,660,960,720,180,720,600,480,1380,284,180,1140,3480,780,240,780,1200,960,360,900,3300,360,660,240,1500,1680,2580,240,1320,300,1260,540,720,720,2160,1200,360,120,1260,120,600,1140,600,840,2040,720,420,240,1620,1140,1200,240,2160,900,420,840,1620,1200,1920,480,1260,300,480,1080,240,1200,960,1020,928,360,660,1020,660,1560,3000,240,600,1500,1020,960,840,240,2880,1080,720,1020,420,420,1200,600,3360,540,540,1200,180,480,540,900,660,780,562,2100,1680,480,1320,1260,1920,1200,780,1200,2280,1020,660,1080,180,840,1260,1800,300,540,420,120,1680,1260,540,600,1260,840,1140,780,360,780,240,960,1920,1980,720,300,780,600,600,1380,780,360,1020,1200,1200,1200,1500,720,1320,1200,540,720,840,360,540,480,240,335,1680,1800,3300,960,1080,540,1260,2940,960,420,300,1440,1620,300,660,3060,900,1200,720,360,360,2040,1380,1123,660,360,900,900,660,840,540,120,960,2700,420,300,1200,840,840,660,240,1020,660,300,480,1200,540,420,1200,780,780,1080,900,660,600,540,660,1020,1020,840,480,480,900,600,180,1620,1200,840,420,960,300,840,300,300,522,1200,660,1080,360,420,480,600,60,1020,120,660,3180,420,780,2340,300,900,540,360,540,1500,660,1380,1380,900,2040,1380,240,960,480,1680,960,420,360,600,660,1471,420,360,840,1020,420,2100,1740,1680,420,300,1620,2040,1500,1320,1140,1680,780,720,360,240,1320,240,157,74,1500,780,1298,660,240,1560,720,420,540,1320,1724,480,2400,720,1603,780,1740,540,1260,904,300,1740,1020,1080,1380,1620,1080,1182,1260,706,1200,840,900,720,1140,1620,1560,1200,1260,1500,540,1620,1800,1500,420,540,240,960,720,540,660,420,540,540,1500,1320,1200,1020,1140,2280,960,1020,540,480,1500,2220,1260,240,840,420,1260,780,1740,1020,1620,660,600,240,1800,600,360,3420,300,600,1560,420,180,1560,1560,1380,3060,240,300,240,480,1207,840,1680,1200,780,720,1260,1740,780,1380,540,420,1980,780,600,1980,1020,1200,1560,1920,2100,360,1740,780,540,120,240,720,960,1020,1620,960,1980,1260,600,1260,1080,480,240,240,480,1860,1380,1980,240,900,1020,780,480,480,2160,420,1320,1020,1440,1020,2220,3540,660,960,2340,360,1140,960,1500,360,1061,420,1140,1080,1440,916,480,1560,840,540,780,420,240,300,660,1200,360,180,1140,600,2340,300,900,600,1560,480,1380,180,120,1260,780,389,600,660,628,720,780,420,360,780,1560,1380,240,240,240,660,1140,1020,780,480,1080,960,1500,780,1380,600,1320,1260,360,1080,1320,1080,3360,1020,360,420,840,1320,540,300,960,840,720,360,194,1156,1200,1920,2940,1320,420,1380,1080,480,1200,1200,1260,900,840,300,960,2100,1440,1620,780,1440,960,1800,900,480,1200,300,1680,300,1560,360,720,1500,660,1620,420,420,240,1020,960,480,780,1260,1380,840,660,360,900,60,600,1140,240,720,1080,240,900,1260,1080,1380,1140,300,360,240,2400,1680,240,600,1680,720,738,360,780,1320,1920,480,1740,60,1140,600,960,803,360,1320,660,2220,960,180,840,480,600,1020,1920,480,755,1620,1200,300,540,2820,2160,1200,600,960,660,480,240,540,480,240,720,780,720,1189,720,1260,1140,480,420,660,1020,1320,240,2280,1020,600,3360,1020,1860,1080,1020,1320,1680,1860,1140,1440,1200,600,2160,540,1080,3600,120,2100,120,1260,1080,1800,1560,960,780,900,540,360,1320,600,480,720,360,540,1740,1140,780,720,1560,660,1020,480,480,300,1320,1020,1080,120,240,2880,2220,540,960,1140,2220,660,1320,900,82,1560,420,2280,960,1320,780,840,1380,240,480,1200,1320,60,1260,840,420,780,1071,1320,300,1140,1200,840,2074,1920,377,1620,420,480,360,1320,300,1320,1260,2340,480,540,2100,1260,120,780,480,1380,780,1740,540,540,1560,840,600,900,240,1980,420,660,900,1860,1980,780,780,1020,1080,1140,3180,1380,780,1200,1320,1440,1560,1200,1380,1595,1080,180,1320,1980,2040,1140,540,540,1107,1560,300,300,300,180,660,780,360,1620,1080,1380,1200,600,840,1680,540,240,540,1920,603,1020,660,1080,180,626,1500,1200,1440,1380,660,120,780,660,960,1260,780,1740,780,3600,300,1980,1140,660,420,1080,1260,780,1080,1140,540,420,1500,960,600,1140,780,1680,720,180,1320,600,1380,2160,720,660,540,720,720,780,1140,1080,600,840,1680,300,1680,420,300,2760,3480,600,2220,1020,3300,780,240,960,360,840,1320,360,960,480,2340,720,720,840,1320,180,780,2400,1200,842,960,300,960,1260,540,420,1380,480,480,2940,660,300,1500,1260,780,1119,300,480,900,1200,1620,313,480,1560,1020,780,1020,1680,780,1320,1140,1200,1380,480,1920,840,780,840,2160,660,960,2460,1140,1080,360,660,1200,2460,480,1680,360,480,180,1740,120,1473,2160,1680,1440,900,420,960,420,1500,780,1560,1080,240,2280,1140,840,1500,1140,300,360,540,1440,1440,1500,660,1560,540,300,600,240,1080,1200,420,660,120,360,840,660,420,1380,480,960,1080,960,1020,3300,420,420,1680,1020,960,1560,900,1320,1020,240,360,720,2580,1200,540,600,900,1440,720,1020,1140,900,120,2100,1200,300,540,240,2220,1800,780,900,720,600,540,300,420,1320,240,540,660,480,300,2400,600,1020,1080,780,720,180,480,780,660,1200,1200,1140,960,1140,1200,1740,600,1140,480,1500,1860,540,660,780,334,1080,1020,600,600,1140,960,240,1020,540,600,1466,900,1680,960,3060,576,1200,780,1200,1260,1860,1080,1800,1020,1440,1260,1560,420,1320,1080,600,300,960,2580,540,660,840,1320,3060,720,360,600,1140,780,1283,1020,2280,780,180,240,1380,1560,639,2700,1200,1440,1260,1560,960,1380,240,480,1320,1020,480,300,720,720,480,3120,2820,1440,1620,720,480,480,480,1920,1140,480,480,660,540,1260,420,480,1740,1080,660,1620,1680,1440,720,660,1860,840,720,720,720,900,420,660,360,240,780,657,1140,1140,660,420,480,600,1200,1740,271,480,660,1560,1740,420,360,360,2700,780,420,540,720,540,600,960,780,1920,240,1380,1080,600,360,960,1080,1020,480,1020,360,1560,1140,180,1440,420,840,480,1080,1620,660,300,240,720,720,720,480,660,1200,840,2460,180,780,2220,2760,1020,660,960,660,420,1020,840,540,1980,1560,720,1200,660,660,840,840,1740,1560,1080,420,1380,1380,1020,480,3180,1740,600,1260,780,420,480,1200,840,360,1140,720,780,960,600,540,225,420,1260,1260,1800,420,1320,1200,720,360,3360,360,480,900,1500,1260,1620,420,1440,269,840,480,480,360,900,60,360,840,1307,540,960,1020,1080,1920,1860,1140,1020,2160,540,1140,660,60,600,2160,1740,420,1680,420,240,960,1080,540,840,629,1620,720,480,1260,480,840,1800,840,480,1920,300,1080,2400,780,960,300,960,360,960,600,1320,420,960,240,360,1740,1320,1380,780,3060,780,1320,240,120,1440,540,600,1860,780,600,960,660,1980,1560,720,540,1140,900,780,477,540,600,1020,540,840,1320,600,1680,660,240,429,180,420,2580,660,1200,1080,180,840,420,1500,1260,1200,1920,1020,480,420,300,540,660,1800,720,1380,540,300,1740,540,3480,540,360,1080,600,1500,1140,420,1620,1260,840,1020,900,1080,660,360,1440,1560,1140,660,780,180,660,480,540,1020,1080,1380,1260,180,2280,1740,960,383,720,300,1500,660,720,1980,2580,1320,1380,1440,2340,1200,480,540,1020,899,360,600,480,360,1200,480,600,3056,960,300,240,180,480,1020,720,1620,1680,780,300,660,900,420,420,660,300,3180,360,600,1440,600,480,420,180,2640,1353,420,1500,240,480,540,540,540,480,420,579,1080,1800,480,360,360,240,1500,900,1557,1620,900,360,600,1620,1500,240,180,540,840,1380,1080,2160,1560,480,1680,1320,1680,1320,240,1440,3060,2040,1020,1380,2220,1080,180,840,1560,382,640,1020,480,480,1980,120,900,1140,1440,780,840,960,1860,1140,480,2580,660,600,600,2820,180,480,1800,2700,1260,540,1365,1080,300,1260,2400,1380,300,1020,1500,1080,420,660,720,1140,540,180,600,600,900,180,600,540,240,1860,900,600,1560,900,360,420,540,900,1380,960,660,300,480,480,480,360,360,1080,900,2160,1260,240,300,660,1140,960,300,360,1080,900,1500,540,2460,1800,3360,1080,2280,180,1980,720,600,420,600,960,600,180,540,420,1680,900,900,660,600,420,3000,180,1260,1860,300,3120,1020,180,1020,1140,1260,840,780,1440,180,1320,900,420,1020,420,540,300,1020,300,720,240,540,660,960,2220,1320,1080,1200,1080,1260,360,600,780,360,720,300,960,1200,1140,720,960,780,2880,720,900,900,480,420,1080,240,900,1080,1680,900,660,780,660,960,660,660,420,180,60,1020,3420,456,1860,360,240,1320,1560,1260,420,1320,480,300,600,2400,600,660,900,540,600,1320,2220,1260,960,1020,600,1260,240,720,900,1200,1080,2340,960,3600,1080,1680,1020,1440,420,1440,1260,300,600,600,600,960,600,2820,540,360,1380,180,2520,480,1020,840,300,720,1200,360,1380,2160,780,900,1560,420,240,360,900,1080,360,1560,420,420,900,2520,960,780,3180,420,240,540,1080,1320,1080,360,300,1140,540,660,480,1260,2520,720,1020,240,1740,480,2820,1020,1260,1380,1500,1200,1260,900,1380,1320,1680,540,600,1380,660,840,420,120,540,360,240,1020,600,960,2640,1020,278,780,1260,960,840,1140,420,420,1020,1740,300,660,1020,1380,300,780,960,720,600,1200,1248,660,300,300,300,900,1320,1200,240,1140,960,1200,3120,240,1080,840,300,840,360,1200,960,540,3540,2820,420,420,720,2340,900,1320,600,1620,1320,840,1560,1260,360,1080,1440,2520,360,821,780,360,2040,540,1500,237,780,1620,1980,1320,840,1380,480,480,360,720,900,300,180,660,600,960,60,720,1200,300,600,1140,1920,1320,540,540,3360,960,120,600,1440,1140,540,120,720,720,180,360,1380,720,1320,1320,780,783,600,2460,1020,1320,240,660,360,1546,1380,600,360,600,360,600,480,900,1380,240,780,1020,120,420,840,1620,960,1200,420,509,840,2220,1440,720,900,1200,600,1080,240,1860,120,1080,360,1380,1500,1560,1140,120,900,2280,2400,420,480,300,180,900,2580,1260,540,540,2820,1620,360,1320,1260,720,600,1260,420,300,660,720,1320,780,1680,1260,420,1500,780,1860,660,600,900,300,3540,1020,840,1380,1920,120,960,660,1260,1560,2160,120,1800,420,636,2160,1860,1500,720,2160,1800,600,1800,180,840,600,1680,960,1020,1920,1500,1620,1860,720,1380,1920,1320,960,840,1863,1680,1080,900,900,2520,180,1020,840,300,780,420,780,1440,1080,1440,600,1440,240,360,120,1260,1440,900,660,660,180,360,1320,960,1200,1080,660,480,780,420,780,1320,1500,2040,720,1440,1320,840,1015,1560,480,300,240,300,660,1620,780,480,900,300,1440,1440,600,840,2160,1500,957,300,240,1140,420,840,2280,1680,472,240,1200,1020,2460,780,1740,780,1380,360,840,480,780,600,1980,360,660,960,1620,360,480,660,794,1320,420,724,420,900,660,1200,660,2580,1260,1080,480,1440,840,420,2340,960,300,1080,1440,300,420,840,631,540,420,660,960,1380,900,360,1140,1680,1740,1200,1020,320,1200,240,240,500,1200,900,1080,417,840,960,1140,2400,1260,1800,720,540,1320,2040,1080,360,120,960,840,420,660,2220,240,180,900,840,540,1020,1610,420,654,1380,1140,840,1620,1140,1440,900,300,360,600,660,360,1560,960,780,300,3120,660,660,660,660,300,1320,60,780,1620,1080,2880,480,1080,480,900,540,1560,1440,300,240,1140,780,480,1380,1140,600,788,600,1740,420,840,60,420,1020,1200,600,3360,540,840,480,300,2400,480,540,1020,360,649,1260,1080,1380,1740,360,1320,2760,540,840,1320,1560,720,480,1740,1620,240,360,420,2820,360,600,420,600,1140,420,1200,900,1800,1402,180,480,600,1140,3180,540,600,1800,240,240,720,840,1920,1380,1020,1620,1680,600,840,420,1140,840,240,720,360,720,660,1260,1620,1440,2160,1500,1260,1020,480,1680,1260,2520,420,840,900,780,3180,300,1020,1380,508,1140,960,240,420,540,1020,600,300,1680,300,1800,660,1920,3360,1920,1680,540,1200,2100,1560,1726,445,420,1080,300,1260,540,1320,840,900,480,960,420,240,1020,1680,540,1620,1080,1440,1140,180,600,1260,1140,1380,780,1020,1080,420,1080,900,660,720,540,360,480,1440,900,660,360,960,600,960,600,780,1020,1020,2820,180,1500,420,720,1320,1500,1080,1740,1020,2160,1140,840,300,1740,900,1200,1380,1140,1380,480,420,1260,360,360,2640,780,1200,180,540,900,1860,960,900,840,1380,300,1140,1080,900,1260,540,1320,360,1260,660,780,1740,180,1080,540,480,1080,1200,1380,1260,240,360,1140,1260,120,660,360,120,660,1080,300,660,1080,480,840,1440,540,3120,720,540,180,2640,1740,1020,1020,960,2520,1020,420,300,900,960,480,1200,1920,240,360,480,600,480,1380,180,720,180,300,360,1260,240,1260,1260,1531,840,1440,1500,480,1860,1236,1440,360,1020,420,1440,2280,840,600,300,1140,1260,360,1680,780,3060,900,660,660,1140,2940,1620,1380,814,1260,900,420,840,540,1620,960,480,600,900,420,1080,120,1320,1200,1560,1440,1080,120,300,780,1020,960,2040,420,1740,300,1080,540,360,1440,1740,780,300,780,1800,780,900,1500,1200,1620,1260,600,600,1320,600,360,2400,1020,1200,1260,2220,720,900,1140,540,780,540,1740,360,1560,360,600,660,720,180,2040,300,1500,720,300,1920,1080,2220,660,2520,1980,1260,840,240,600,2460,1320,540,660,960,60,250,660,600,840,749,600,1500,420,240,1320,420,1560,720,840,1140,840,720,960,960,1260,540,3420,1500,240,1740,900,2040,840,240,660,1320,720,420,2460,1980,600,180,300,540,1800,300,1200,660,480,1500,600,1080,240,780,420,1260,1740,1440,483,420,660,600,660,840,720,2340,2100,840,900,1080,1320,600,360,240,660,1560,1440,600,1440,780,720,1380,1080,960,360,840,1800,2220,999,960,300,480,1140,660,354,420,540,551,1380,360,891,1080,300,1680,2940,1440,3480,1427,1560,420,660,300,900,480,1260,1140,1500,3120,1020,2100,600,360,1440,1440,180,1084,2340,311,1740,540,1860,1800,540,60,360,2520,1200,1740,360,1440,837,900,660,840,1140,2040,600,2220,2880,360,840,960,360,420,540,840,360,1020,480,1680,900,1380,1020,1140,780,480,1860,300,900,2100,1640,1320,300,600,1080,600,813,240,1260,1020,1200,540,1504,1440,780,660,900,900,240,1723,600,1500,420,298,3180,600,1020,960,720,660,480,420,180,360,780,3360,600,540,360,960,540,660,540,1140,1920,1140,600,900,2340,360,480,720,360,1200,480,180,360,420,180,2520,360,900,600,2220,2220,240,900,240,1620,1020,660,900,1560,480,480,1920,660,960,780,1080,1680,240,1560,1200,1080,300,2640,1440,840,1800,240,360,1260,1200,360,540,840,420,780,1620,780,720,1244,300,1500,720,420,1620,720,480,1140,360,360,960,720,840,600,2700,480,1140,1140,300,1560,600,2100,240,720,600,1860,480,420,300,180,1620,540,1440,960,360,2280,600,900,840,720,240,420,1380,420,540,660,840,840,900,1140,840,1380,900,1140,180,360,1440,180,900,2820,180,1320,960,720,1440,1200,300,300,2580,1080,300,900,2100,360,600,720,300,1860,180,720,720,420,780,1380,840,1080,840,600,360,1080,1200,960,1020,600,1440,540,1260,1020,420,2460,180,360,1860,1980,600,1320,660,900,1260,1740,1680,1140,1140,240,540,1440,240,240,600,840,1130,3180,780,360,360,600,1980,600,3120,540,3240,240,420,300,1620,360,480,2340,1020,1380,660,900,540,1140,1020,660,840,300,420,1020,720,360,660,300,420,420,300,1680,1380,1260,600,540,780,660,420,1140,1440,3300,3120,960,780,120,900,780,960,540,540,3300,900,1680,540,120,300,1260,1680,537,240,300,480,480,1500,900,3300,120,1080,840,840,480,1500,1080,840,1080,540,840,240,960,540,240,1440,420,1140,840,420,600,240,780,120,1140,480,1200,240,1740,300,1560,900,420,1500,600,900,240,420,1500,660,540,148,960,1320,780,780,1200,360,540,660,1200,660,780,660,300,1200,480,1440,300,840,660,2241,1320,1620,720,1680,180,600,480,660,540,540,1500,480,60,420,360,3240,240,360,660,1020,960,600,1080,360,300,660,300,1380,660,960,1500,420,480,420,720,1920,1440,1260,3120,480,720,180,1140,420,2340,540,1080,1260,360,3240,180,240,1140,1560,1920,720,720,1380,1260,660,535,300,660,1080,780,540,540,540,1500,360,960,300,480,360,2700,1500,1260,360,540,1380,780,540,901,480,600,720,240,1920,240,1440,439,240,540,180,1740,780,720,1440,1440,1860,414,840,420,1200,840,600,480,1020,1028,300,300,1320,1200,600,600,600,780,2460,420,1440,2280,780,900,780,360,900,540,180,1020,300,720,1980,1020,1020,1200,960,600,2760,1260,960,1500,780,540,540,720,900,1260,1320,687,540,720,660,1080,180,720,240,780,1140,1620,300,1020,300,720,1080,300,720,120,60,720,900,1320,1200,1200,300,540,540,480,480,300,1440,1320,360,420,720,480,480,1080,1860,900,2160,420,1560,1020,540,1800,1740,480,780,1500,900,1020,900,600,1200,1440,900,900,1140,1140,960,540,300,720,1080,1320,1500,360,600,1260,1020,672,1740,1500,840,360,780,1020,960,240,720,540,1740,1020,540,900,2760,600,1860,2640,360,600,480,1140,900,1440,1680,660,540,300,780,1260,960,1140,1080,2100,1740,1260,720,1080,840,840,420,600,1080,900,2340,1140,840,600,1080,540,1500,1140,900,480,720,960,2054,480,1080,420,1200,300,660,360,960,660,300,840,420,1320,660,1440,1440,1620,540,120,1440,960,660,3420,420,960,660,3480,2100,1020,2040,1140,360,540,780,720,1860,840,780,2400,1980,720,720,1620,362,2340,1200,360,900,420,1140,360,2100,240,1560,3120,540,360,840,1260,720,2220,420,300,1740,480,1740,180,300,600,420,600,870,360,420,540,240,1080,1260,1680,360,780,360,360,960,240,720,540,1380,720,1620,2880,761,502,1440,240,510,660,660,960,900,240,660,240,420,660,180,1140,480,1620,420,1860,900,540,1320,240,1235,1080,660,1680,1080,720,240,2220,540,1080,540,1320,420,720,1260,480,360,960,720,780,480,1680,1200,660,60,780,210,1500,1560,540,1320,360,660,300,480,660,300,2040,600,480,600,660,1260,600,2160,300,720,600,457,1800,1087,1800,1020,840,120,960,1440,1440,360,1140,240,840,540,420,240,1080,1020,1140,540,780,600,1020,1560,345,784,720,1020,2760,660,600,300,360,1320,780,1560,180,780,1260,720,420,1860,960,1680,960,1140,420,780,240,900,1200,1020,1080,2760,2220,2841,960,420,1620,420,900,240,360,660,480,600,1260,1380,1020,1500,1680,960,660,900,780,360,840,1140,2580,1020,606,480,1620,1740,1140,1140,1680,1200,960,2220,3480,1200,420,180,1320,2580,480,1500,660,780,480,1080,1200,1140,2040,660,2040,240,360,660,900,780,1020,1140,600,900,1440,720,1920,1140,660,840,360,1080,840,540,1440,420,420,720,1080,300,1500,960,2460,840,780,1140,360,480,1080,840,1320,240,360,1680,780,1620,1020,2820,300,1500,1440,1440,840,240,660,480,960,960,600,660,1080,120,1320,1200,240,900,600,540,360,1260,1020,582,300,600,420,300,180,1680,600,300,2280,1380,720,1140,780,840,769,660,360,300,240,660,1440,420,720,900,480,1140,540,720,540,840,1980,960,240,1140,1980,180,1020,1440,1320,1200,720,540,1320,2880,1680,420,780,480,1440,1500,1740,1200,480,2280,420,420,2160,300,1920,600,1020,780,1260,1140,900,2580,1620,120,2040,2040,360,1560,1020,1680,360,540,2460,1500,540,300,1440,960,840,900,1200,1500,780,1560,540,389,120,2760,720,660,900,120,1800,840,623,300,600,921,540,900,480,180,480,600,1620,780,3360,1276,1740,1320,960,660,960,540,1140,1200,2880,1380,660,900,1020,2700,420,840,360,420,1740,360,840,3180,120,1080,420,780,2760,660,300,3300,2160,1320,3060,780,480,240,1620,120,1920,1380,240,420,360,420,1440,660,720,720,360,720,1500,1740,900,600,960,300,300,1140,720,1620,300,720,900,1620,1560,600,1140,420,1620,1380,1020,720,420,300,840,1320,1440,1560,1380,480,360,1080,960,1380,1080,1500,420,3540,960,600,840,1680,480,600,960,1860,1380,1020,600,1620,300,2280,1560,431,1140,900,900,420,720,960,1620,1394,1560,1380,1320,960,960,2520,1380,1200,720,780,600,480,1740,180,240,960,1680,1740,1140,1620,660,780,480,600,1260,1260,1200,420,2640,600,300,240,360,1140,180,1200,1080,832,1320,840,1200,240,600,480,1920,240,1140,660,540,600,1680,840,1920,240,1080,540,420,540,720,1680,480,780,1320,240,1440,360,1560,720,960,240,1140,360,1020,660,1500,1380,840,840,720,1560,840,1980,1620,840,2520,420,926,480,780,840,720,960,3300,300,480,840,2348,1020,240,1620,360,720,1920,780,1500,1680,2280,1320,960,1260,1020,180,600,600,360,720,180,240,840,604,420,600,2400,1320,240,2760,1020,720,300,480,1920,480,420,1020,720,840,540,1260,960,960,900,1380,300,660,1080,1440,300,300,780,1560,1020,60,1440,1260,720,780,180,1620,2040,300,1140,720,540,480,120,600,660,960,1200,1680,60,720,993,1140,600,1395,1140,660,1140,660,720,1260,360,420,2280,1320,3480,300,240,1020,600,900,300,360,780,1740,1320,720,360,660,60,720,1560,1200,600,2760,600,300,900,480,1020,1260,420,1140,373,420,1620,720,1320,1560,660,600,1140,660,540,780,600,1440,1200,1260,900,900,1680,900,600,600,540,840,900,420,480,1260,1200,1020,1680,660,900,600,1800,840,1380,420,120,1320,1260,1020,600,1020,540,180,1140,840,480,600,540,600,180,2940,660,1680,900,1500,720,540,1380,840,1320,720,780,660,120,2280,600,240,420,540,900,600,1020,1140,540,2460,1380,780,2040,1620,240,1920,2760,1500,240,840,600,1260,809,1020,420,240,720,900,300,480,420,720,960,600,900,1620,300,780,780,720,840,1680,420,1200,420,1020,1620,540,2220,540,720,780,900,600,360,1140,180,600,1260,960,240,420,240,1560,300,1620,1440,180,480,1140,2160,1200,360,540,900,660,600,2040,900,840,180,1440,1440,1920,682,1200,420,780,1200,900,489,1500,60,540,840,780,1080,780,960,420,240,240,540,1620,840,120,1140,360,420,1620,1500,720,1320,1560,300,240,840,1320,1320,3600,1380,1140,1260,2280,120,600,360,1500,720,1320,780,300,2400,1320,240,780,1380,2340,540,720,420,466,480,1800,900,1020,720,1800,960,420,1080,1860,900,720,1740,1920,480,1380,1320,300,660,480,720,720,300,2100,1560,1320,540,420,600,1020,300,780,849,1320,660,1500,1500,1200,420,960,540,2700,720,1260,420,240,780,300,480,3360,900,1020,1200,900,420,840,1020,1560,480,780,300,600,600,720,900,600,660,1080,1260,1020,1380,960,900,1080,1200,1440,360,3180,1320,480,540,2520,240,540,840,180,797,360,1620,480,1140,1320,1020,180,1800,360,1980,1320,180,240,660,2820,1320,240,1020,180,2160,1500,420,1320,300,780,1440,3180,960,540,360,360,1440,1200,2580,240,360,360,840,1140,840,1200,139,420,300,360,480,1140,900,2520,240,3480,480,602,720,180,1500,540,1200,540,1260,1200,480,720,300,1020,1020,660,120,1320,3180,1200,1140,1200,840,360,300,480,1200,840,1620,1260,360,1680,1140,1500,1860,240,1740,780,900,1031,720,1320,671,1380,1200,660,780,780,1200,900,900,300,480,540,360,1080,780,300,1380,1380,1920,480,1080,1740,840,840,1080,1020,1620,780,420,960,300,900,1140,720,960,600,1140,240,1740,1620,1800,540,720,1680,660,960,420,480,1260,660,420,300,660,1620,360,1200,1380,1080,1320,240,1260,960,420,1500,240,600,180,300,1140,180,900,960,780,240,660,1860,2280,1200,360,1380,1380,1140,780,1680,1140,240,420,240,480,1860,300,600,360,360,900,600,1860,1020,240,163,420,600,660,900,1200,360,900,660,420,1260,180,1320,900,480,600,840,1320,1680,300,1140,720,300,420,1560,600,3360,900,120,180,1980,2025,1020,900,300,1140,1320,960,960,840,660,300,1260,1380,521,2760,2760,420,780,480,1326,540,3060,1560,720,1272,240,1260,120,1260,420,360,1560,1440,1380,300,780,1020,2100,480,540,3000,300,1200,1560,360,1140,360,840,540,1200,660,840,840,600,1320,660,420,240,120,1140,240,540,660,1260,300,300,1320,420,600,840,420,900,600,1200,480,1560,1560,2220,480,780,540,360,1140,240,540,720,240,780,1320,1320,1980,660,720,840,720,120,600,300,480,1020,540,300,1440,1260,300,180,540,1260,840,900,1440,1140,1080,960,1620,1140,420,1380,240,1020,660,900,480,480,1320,840,1560,1380,1440,960,240,300,300,480,300,1153,840,720,3360,1560,3120,480,360,2100,2460,780,120,240,1140,180,1260,720,960,900,1140,600,1380,1740,900,540,360,480,660,960,2160,1020,600,360,1200,360,480,60,600,1560,584,780,180,480,420,780,780,2040,360,1140,1440,1020,1140,1020,1680,1400,1380,720,540,120,1620,1140,1860,1320,1260,540,300,480,1980],\"yaxis\":\"y\",\"type\":\"scattergl\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"start_hour\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"duration\"}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Long Trip (1) vs Short (0)\"}},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Trip Duration vs. Start Hour (Interactive)\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('87bbcf3f-7cea-44ae-9994-0e0b32bc9433');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The interactive scatter plot of trip duration versus start hour, colored by the “long” (≥15 min) flag, shows that longer rides (yellow points) are more dispersed throughout the midday and early afternoon (10 AM–3 PM) rather than concentrated solely at commute peaks. During early morning (before 7 AM) and evening rush hours (5 PM–7 PM), most trips are short (blue), reflecting quick commuter hops. The midday spread suggests leisure or sightseeing rides, which tend to last longer and occur when traffic and dock availability are less constrained. This pattern indicates an opportunity for differentiated service: operations could allocate more bikes to central tourist areas during midday, while ensuring rapid turnover and redistribution around core commuter times."
      ],
      "metadata": {
        "id": "aijKtlPOv4VV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Predictive Modeling\n",
        "##Regression Baseline\n"
      ],
      "metadata": {
        "id": "c9BMQ25_o-bQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.cloud import bigquery #Imports the BigQuery client so you can run SQL queries against your Google Cloud project’s datasets.\n",
        "import pandas as pd #brings in pandas, the go-to library for data manipulation and analysis in Python."
      ],
      "metadata": {
        "id": "31FDEgHxcJiq"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "project_id = 'plasma-raceway-457020-v4' #sets which Google Cloud project you’re billing and where your BigQuery jobs run.\n",
        "client = bigquery.Client(project = project_id) #creates a BigQuery client object configured to use that project, letting you submit queries and retrieve results."
      ],
      "metadata": {
        "id": "SUCpAgpNcfFQ"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define a SQL query to pull a representative sample of trip records:\n",
        "#   - duration: the length of each bike trip, in seconds.\n",
        "#   - start_hour: the hour of day (0–23) when the trip began, extracted from start_date.\n",
        "#   - day_of_week: the day of the week (1=Sunday…7=Saturday) when the trip began.\n",
        "#   - start_station_name: the name of the station where the trip started.\n",
        "# Filters applied for data quality and performance:\n",
        "#   - duration BETWEEN 60 AND 3600: include only trips between 1 minute and 1 hour.\n",
        "#   - start_station_name IS NOT NULL: exclude any rows missing a station name.\n",
        "#   - LIMIT 200000: limit the result set to 200,000 rows for quicker querying\n",
        "query = \"\"\"\n",
        "SELECT\n",
        "  duration,\n",
        "  EXTRACT(HOUR FROM start_date)    AS start_hour,\n",
        "  EXTRACT(DAYOFWEEK FROM start_date) AS day_of_week,\n",
        "  start_station_name\n",
        "FROM\n",
        "  `bigquery-public-data.london_bicycles.cycle_hire`\n",
        "WHERE\n",
        "  duration BETWEEN 60 AND 3600\n",
        "  AND start_station_name IS NOT NULL\n",
        "LIMIT\n",
        "  200000\n",
        "\"\"\"\n",
        "# Submit the query to BigQuery, which returns a QueryJob object\n",
        "job = client.query(query)\n",
        "# Wait for the job to complete and convert the results into a pandas DataFrame\n",
        "df = job.result().to_dataframe()"
      ],
      "metadata": {
        "id": "IxvPAJ8_cmFb"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Cast the 'start_hour' column to integer type:\n",
        "# BigQuery returns extracted fields as floats; converting to int ensures 'start_hour' ranges from 0 to 23 as whole numbers.\n",
        "df['start_hour'] = df['start_hour'].astype(int)\n",
        "# Cast the 'day_of_week' column to integer type:\n",
        "# Converting to int ensures 'day_of_week' values (1=Sunday through 7=Saturday) are whole numbers suitable for modeling.\n",
        "df['day_of_week'] = df['day_of_week'].astype(int)"
      ],
      "metadata": {
        "id": "MBOhCGJXcqk7"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Flag the true top-10 stations (by full table counts)\n",
        "# Execute a SQL query to identify the 10 stations with the highest number of trips:\n",
        "#   - SELECT start_station_name to get each station’s name.\n",
        "#   - WHERE duration > 0 excludes trips with invalid durations.\n",
        "#   - GROUP BY start_station_name aggregates trips by station.\n",
        "#   - ORDER BY COUNT(*) DESC sorts stations by their trip counts, highest first.\n",
        "#   - LIMIT 10 returns only the top 10 busiest stations.\n",
        "top10_df = client.query(\"\"\"\n",
        "  SELECT start_station_name\n",
        "  FROM `bigquery-public-data.london_bicycles.cycle_hire`\n",
        "  WHERE duration > 0\n",
        "  GROUP BY start_station_name\n",
        "  ORDER BY COUNT(*) DESC\n",
        "  LIMIT 10\n",
        "\"\"\").result().to_dataframe()\n",
        "# Convert the resulting station names into a Python list called top_stations\n",
        "# This list will be used to flag whether individual trips in 'df' started at one of these top stations.\n",
        "top_stations = top10_df['start_station_name'].tolist()\n"
      ],
      "metadata": {
        "id": "aOlUYB_EuiFM"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Flag trips originating at a top-10 station:\n",
        "# - df['start_station_name'].isin(top_stations) checks membership in the top_stations list.\n",
        "# - Converting the boolean result to int yields 1 for top-10 stations, 0 otherwise.\n",
        "df['start_top10'] = df['start_station_name'].isin(top_stations).astype(int)\n",
        "# Confirm the DataFrame now includes the new feature and report its dimensions\n",
        "print(\"Data loaded. Shape:\", df.shape)\n",
        "# Show the first few rows so we can visually inspect the 'start_top10' flag\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        },
        "id": "L-2XSf79upHl",
        "outputId": "7adabf67-0d1e-415b-e0b1-1c961e5e6e1e"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data loaded. Shape: (200000, 5)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   duration  start_hour  day_of_week               start_station_name  \\\n",
              "0      1800          15            1        Hop Exchange, The Borough   \n",
              "1      1800          13            1    Seville Street, Knightsbridge   \n",
              "2       780          15            1  Eaton Square (South), Belgravia   \n",
              "3       780          17            1   Broadcasting House, Marylebone   \n",
              "4       780          15            1  Aberdeen Place, St. John's Wood   \n",
              "\n",
              "   start_top10  \n",
              "0            1  \n",
              "1            0  \n",
              "2            0  \n",
              "3            0  \n",
              "4            0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6dd76c6e-f14e-458a-8506-521ff8c5f639\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration</th>\n",
              "      <th>start_hour</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>start_station_name</th>\n",
              "      <th>start_top10</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1800</td>\n",
              "      <td>15</td>\n",
              "      <td>1</td>\n",
              "      <td>Hop Exchange, The Borough</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1800</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>Seville Street, Knightsbridge</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>780</td>\n",
              "      <td>15</td>\n",
              "      <td>1</td>\n",
              "      <td>Eaton Square (South), Belgravia</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>780</td>\n",
              "      <td>17</td>\n",
              "      <td>1</td>\n",
              "      <td>Broadcasting House, Marylebone</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>780</td>\n",
              "      <td>15</td>\n",
              "      <td>1</td>\n",
              "      <td>Aberdeen Place, St. John's Wood</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6dd76c6e-f14e-458a-8506-521ff8c5f639')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6dd76c6e-f14e-458a-8506-521ff8c5f639 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6dd76c6e-f14e-458a-8506-521ff8c5f639');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-361d8678-203b-4ae2-935a-64bd69ba8561\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-361d8678-203b-4ae2-935a-64bd69ba8561')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-361d8678-203b-4ae2-935a-64bd69ba8561 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. TASK 4: Predictive Modeling (Regression)\n",
        "from sklearn.model_selection import train_test_split #Utility to split your data into training and testing subsets.\n",
        "from sklearn.tree import DecisionTreeRegressor #The regression model you use as a baseline.\n",
        "from sklearn.metrics import mean_squared_error, r2_score #Metrics for evaluating regression—MSE’s square root gives RMSE, and R² shows variance explained.\n",
        "import pandas as pd  #Data manipulation library for handling DataFrames."
      ],
      "metadata": {
        "id": "ho8jtbV2c7bE"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " #Feature & Target Definition\n",
        "# Select predictor variables (features) and the response variable (target) for the regression task.\n",
        "# - start_hour: captures the hour of day (0–23) when each trip began, reflecting diurnal usage patterns.\n",
        "# - day_of_week: captures the day of week (1=Sunday…7=Saturday), reflecting differences between weekdays and weekends.\n",
        "# - start_top10: a binary flag (1 if the trip started at one of the system’s top-10 busiest stations, else 0), capturing station popularity.\n",
        "# - duration (target): the actual length of each trip in seconds, which we want to predict.\n",
        "X = df[['start_hour', 'day_of_week', 'start_top10']]\n",
        "y = df['duration']\n",
        "\n",
        "# Train/Test Split\n",
        "# Partition the data to evaluate model performance on unseen data.\n",
        "# - test_size=0.2 reserves 20% of the dataset for testing; the remaining 80% is used for training.\n",
        "# - random_state=42 sets a fixed seed for reproducibility, ensuring the same split each run.\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "# Model Initialization\n",
        "# Instantiate a Decision Tree Regressor for continuous output prediction.\n",
        "# - max_depth=8 limits the depth of the tree to control complexity and prevent overfitting.\n",
        "# - random_state=42 ensures consistent tree construction across runs.\n",
        "model = DecisionTreeRegressor(max_depth=8, random_state=42)\n",
        "\n",
        "# Model Training\n",
        "# Fit the Decision Tree model to the training data:\n",
        "# - The algorithm learns decision rules by recursively splitting feature space\n",
        "#   to minimize the mean squared error between predicted and actual durations.\n",
        "model.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "pZMcMweEc-LB",
        "outputId": "0143d011-15fe-4f2c-9f8f-4a700edb3fd1"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeRegressor(max_depth=8, random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(max_depth=8, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>DecisionTreeRegressor</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeRegressor.html\">?<span>Documentation for DecisionTreeRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeRegressor(max_depth=8, random_state=42)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#  Model Evaluation\n",
        "\n",
        "# 1. Predict using the test features\n",
        "#    y_pred contains the model’s predicted durations for X_test\n",
        "y_pred = model.predict(X_test)\n",
        "from math import sqrt\n",
        "# 2. Compute Mean Squared Error (MSE)\n",
        "#    mean_squared_error computes the average of (actual - predicted)²\n",
        "mse  = mean_squared_error(y_test, y_pred)   # default gives MSE\n",
        "# 3. Compute Root Mean Squared Error (RMSE)\n",
        "#    RMSE is sqrt(MSE), giving error in the same units as duration (seconds)\n",
        "rmse = sqrt(mse)\n",
        "\n",
        "# 4. Compute R-squared (R²)\n",
        "#    r2_score measures the proportion of variance in y_test explained by the model\n",
        "r2   = r2_score(y_test, y_pred)\n",
        "# 5. Print evaluation metrics\n",
        "#    - RMSE: average prediction error (lower is better)\n",
        "#    - R²: proportion of variance explained (1.0 = perfect prediction)\n",
        "print(f\"Regression → RMSE: {rmse:.1f} sec, R²: {r2:.3f}\")\n",
        "\n",
        "# Feature Importance\n",
        "\n",
        "# 1. Retrieve feature importance scores from the trained model\n",
        "#    model.feature_importances_ gives the relative importance of each feature\n",
        "fi = pd.Series(model.feature_importances_, index=X.columns)\n",
        "# 2. Sort and print the importance scores in descending order\n",
        "#    Higher values indicate features that contribute more to reducing prediction error\n",
        "print(\"Feature importances:\\n\", fi.sort_values(ascending=False))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DLlbyISQdAZw",
        "outputId": "ff334c6e-e193-4563-e606-7d521e87c175"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Regression → RMSE: 620.7 sec, R²: 0.040\n",
            "Feature importances:\n",
            " start_hour     0.338117\n",
            "day_of_week    0.331776\n",
            "start_top10    0.330106\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "RMSE: 620.7 seconds (~10.3 minutes), meaning on average the model’s duration predictions are off by about ten minutes.\n",
        "\n",
        "R²: 0.040, so the model explains only 4% of the variance in trip duration—most of the variation remains unexplained with these simple features.\n",
        "\n",
        "Feature importances are nearly evenly split:\n",
        "\n",
        "    start_hour (33.8%)\n",
        "\n",
        "    day_of_week (33.2%)\n",
        "\n",
        "    start_top10 (33.0%)"
      ],
      "metadata": {
        "id": "Fcr7zFe3xCW2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Our decision‐tree regression model predicts trip duration with a root-mean-squared error of about 10 minutes, which is roughly half of the average ride length. With an R² of 0.04, time-of-day and day-of-week effects only scratch the surface of what determines how long rides actually last. Interestingly, the model finds start hour, weekday versus weekend, and whether the trip began at a top-10 station to be almost equally important, suggesting that none of these alone is a dominant driver. To build a truly accurate duration predictor, we’d need more features—like ride distance, route information, or weather conditions—to capture the full story behind trip lengths."
      ],
      "metadata": {
        "id": "UhHxPHGxxDfS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Decision Tree Regression"
      ],
      "metadata": {
        "id": "8eXSyavsbiWY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# === Task 4: Predictive Modeling – Classification ===\n",
        "\n",
        "# 1. Define the binary target 'is_long':\n",
        "#    - We consider trips of 15 minutes (900 seconds) or longer as \"long\" (label=1),\n",
        "#      and shorter trips as \"short\" (label=0). Converting to int makes it suitable for modeling.\n",
        "df['is_long'] = (df['duration'] >= 900).astype(int)\n",
        "\n",
        "# 2. Select features (X) and the label (y):\n",
        "#    - X: DataFrame with predictor variables:\n",
        "#        * 'start_hour': Hour of day the trip started (0–23), capturing daily usage patterns.\n",
        "#        * 'day_of_week': Day of week (1=Sunday…7=Saturday), capturing weekday vs. weekend variations.\n",
        "#        * 'start_top10': Binary flag indicating if the trip started at one of the top-10 busiest stations.\n",
        "#    - y: Series with the binary target 'is_long' indicating long (1) vs. short (0) trips.\n",
        "X = df[['start_hour', 'day_of_week', 'start_top10']]\n",
        "y = df['is_long']\n",
        "\n",
        "# 3. Split data into training and test sets:\n",
        "#    - train_test_split randomly shuffles and splits X and y.\n",
        "#    - test_size=0.2 reserves 20% of data for evaluating model performance.\n",
        "#    - random_state=42 ensures the split is reproducible across runs.\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "# 4. Initialize and train the Decision Tree Classifier:\n",
        "#    - max_depth=6 limits the maximum depth of the tree to avoid overfitting.\n",
        "#    - random_state=42 fixes randomness for consistency.\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "clf = DecisionTreeClassifier(max_depth=6, random_state=42)\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "# 5. Predict on test set and evaluate performance:\n",
        "#    - y_pred: predicted class labels for X_test.\n",
        "#    - accuracy_score: overall fraction of correct predictions.\n",
        "#    - classification_report: precision, recall, F1-score for each class.\n",
        "#    - confusion_matrix: counts of true/false positives and negatives.\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "y_pred = clf.predict(X_test)\n",
        "\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
        "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred, target_names=['Short','Long']))\n",
        "print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n",
        "\n",
        "# 6. Extract and display feature importances:\n",
        "#    - feature_importances_ gives the relative importance of each feature in the tree.\n",
        "#    - We create a pandas Series and sort it to see which features are most predictive.\n",
        "fi = pd.Series(clf.feature_importances_, index=X.columns)\n",
        "print(\"\\nFeature importances:\\n\", fi.sort_values(ascending=False))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cf3WFSqtr-Ob",
        "outputId": "08ca0053-0286-4dbf-b993-15998e1c5629"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.569925\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "       Short       0.56      0.81      0.67     21003\n",
            "        Long       0.59      0.30      0.40     18997\n",
            "\n",
            "    accuracy                           0.57     40000\n",
            "   macro avg       0.58      0.56      0.53     40000\n",
            "weighted avg       0.58      0.57      0.54     40000\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            " [[17091  3912]\n",
            " [13291  5706]]\n",
            "\n",
            "Feature importances:\n",
            " day_of_week    0.458953\n",
            "start_hour     0.362119\n",
            "start_top10    0.178928\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Classification Performance Summary\n",
        "\n",
        "    Overall Accuracy: 57.0%\n",
        "    The Decision Tree correctly classifies “short” vs. “long” trips about 57% of the time—better than random (50%), but still with room to improve.\n",
        "\n",
        "    Class‐Specific Metrics\n",
        "\n",
        "        Short trips (duration < 15 min):\n",
        "\n",
        "            Precision 0.56, Recall 0.81 (it catches 81% of true short trips, though 44% of its “short” predictions are actually long).\n",
        "\n",
        "        Long trips (duration ≥ 15 min):\n",
        "\n",
        "            Precision 0.59, Recall 0.30 (it’s conservative on long—when it predicts long, it’s right 59% of the time, but it only finds 30% of all true longs)."
      ],
      "metadata": {
        "id": "05nrFoALyr0O"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "      Predicted\n",
        "          Short   Long\n",
        "    Actual\n",
        "    Short   17091   3912\n",
        "    Long    13291   5706"
      ],
      "metadata": {
        "id": "HToQiPo_y7wj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "    day_of_week    0.459  \n",
        "    start_hour     0.362  \n",
        "    start_top10    0.179  \n"
      ],
      "metadata": {
        "id": "N6mH3LurzDNe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "    * Day of week is the strongest predictor—weekend vs. weekday differences matter most.\n",
        "\n",
        "    * Start hour is next—time‐of‐day still drives ride length category.\n",
        "\n",
        "    * Station popularity plays a smaller role, but still contributes.\n",
        "\n"
      ],
      "metadata": {
        "id": "lVuOEY7JzGKQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Managerial Insights & Takeaways\n",
        "\n",
        "**Weekday vs. Weekend Drives Ride Length**\n",
        "\n",
        "  With day_of_week carrying the largest importance (≈46%), the model tells us that whether it’s a weekday or weekend strongly influences trip length. In practice, longer rides are more common on weekends—people likely use the bikes for leisure rather than quick commutes.\n",
        "\n",
        "\n",
        "**Time of Day Still Matters**\n",
        "\n",
        "  start_hour is the second‐most important feature (≈36%), confirming that off‐peak midday hours see relatively more long rides compared to the sharp commuter peaks of morning and evening. This matches our EDA in the scatter plot.\n",
        "\n",
        "**Station Popularity Has Limited Impact**\n",
        "\n",
        "  The start_top10 flag plays a smaller role (≈18%), suggesting that while busy stations see lots of rides, they don’t necessarily predict longer trips. High‐traffic hubs are used for both quick hops and longer excursions.\n",
        "\n",
        "**Model Conservatively Identifies Long Rides**\n",
        "\n",
        "  The low long‐trip recall (30%) means the model misses many long rides, even though its precision (59%) shows that when it does predict a long ride, it’s correct more often than not. In operations, this suggests a basic time‐and‐day rule can flag some long trips but will undercount them without additional context (distance, weather, user type).\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "AAhR-VSieFzy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Managerial Implications\n",
        "\n",
        "- Weekend Promotions: Since weekends yield more long rides, consider special weekend passes or leisure‐oriented packages.\n",
        "\n",
        "- Midday Fleet Allocation: Shift extra bikes to key stations around midday to serve leisure riders seeking longer trips.\n",
        "\n",
        "- Data Enrichment: To better capture long‐ride demand, incorporate distance or weather data—this will improve detection and resource planning."
      ],
      "metadata": {
        "id": "PiOfdk460D3d"
      }
    }
  ]
}